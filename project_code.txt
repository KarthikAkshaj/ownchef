# Project Code Extract
# Generated on Sun, Jun 22, 2025  9:38:34 PM


============================================================
File: ./drizzle.config.ts
Type: .ts
============================================================

import { defineConfig } from 'drizzle-kit';
if (!process.env.DATABASE_URL) throw new Error('DATABASE_URL is not set');

export default defineConfig({
	schema: './src/lib/server/db/schema.ts',

	dbCredentials: {
		url: process.env.DATABASE_URL
	},

	verbose: true,
	strict: true,
	dialect: 'postgresql'
});



============================================================
File: ./eslint.config.js
Type: .js
============================================================

import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
	includeIgnoreFile(gitignorePath),
	js.configs.recommended,
	...ts.configs.recommended,
	...svelte.configs['flat/recommended'],
	prettier,
	...svelte.configs['flat/prettier'],
	{
		languageOptions: {
			globals: {
				...globals.browser,
				...globals.node
			}
		}
	},
	{
		files: ['**/*.svelte'],

		languageOptions: {
			parserOptions: {
				parser: ts.parser
			}
		}
	}
);



============================================================
File: ./package.json
Type: .json
============================================================

{
	"name": "ownchef",
	"private": true,
	"version": "0.0.1",
	"type": "module",
	"scripts": {
		"dev": "vite dev",
		"build": "vite build",
		"preview": "vite preview",
		"prepare": "svelte-kit sync || echo ''",
		"check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
		"check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
		"format": "prettier --write .",
		"lint": "prettier --check . && eslint .",
		"db:start": "docker compose up",
		"db:push": "drizzle-kit push",
		"db:migrate": "drizzle-kit migrate",
		"db:studio": "drizzle-kit studio"
	},
	"devDependencies": {
		"@eslint/compat": "^1.2.5",
		"@eslint/js": "^9.18.0",
		"@sveltejs/adapter-auto": "^4.0.0",
		"@sveltejs/kit": "^2.16.0",
		"@sveltejs/vite-plugin-svelte": "^5.0.0",
		"@tailwindcss/forms": "^0.5.10",
		"@tailwindcss/typography": "^0.5.16",
		"@types/node": "^22.12.0",
		"autoprefixer": "^10.4.20",
		"drizzle-kit": "^0.30.2",
		"eslint": "^9.18.0",
		"eslint-config-prettier": "^10.0.1",
		"eslint-plugin-svelte": "^2.46.1",
		"globals": "^15.14.0",
		"prettier": "^3.4.2",
		"prettier-plugin-svelte": "^3.3.3",
		"prettier-plugin-tailwindcss": "^0.6.10",
		"svelte": "^5.0.0",
		"svelte-check": "^4.0.0",
		"tailwindcss": "^3.4.17",
		"typescript": "^5.0.0",
		"typescript-eslint": "^8.20.0",
		"vite": "^6.0.0"
	},
	"dependencies": {
		"@auth/sveltekit": "^1.7.4",
		"@node-rs/argon2": "^2.0.2",
		"@oslojs/crypto": "^1.0.1",
		"@oslojs/encoding": "^1.1.0",
		"drizzle-orm": "^0.38.4",
		"lucide-svelte": "^0.474.0",
		"postgres": "^3.4.5",
		"quill": "^2.0.3"
	}
}



============================================================
File: ./postcss.config.js
Type: .js
============================================================

export default {
	plugins: {
		tailwindcss: {},
		autoprefixer: {}
	}
};



============================================================
File: ./README.md
Type: .md
============================================================

# OwnChef - Recipe Sharing Platform üç≥

OwnChef is a modern, community-driven recipe sharing platform built with SvelteKit and PostgreSQL. Share your culinary creations, discover new recipes, and connect with food enthusiasts from around the world.

## üåü Features

### üî• For Users
- **Recipe Discovery**: Browse through a curated collection of recipes with detailed instructions
- **User Profiles**: Create your personal profile and share your culinary journey
- **Recipe Categories**: Easy navigation through different cuisine types and meal categories
- **Dark Mode**: Comfortable viewing experience with light/dark theme support
- **Responsive Design**: Perfect experience across all devices

### üë®‚Äçüç≥ For Creators
- **Recipe Creation**: Rich text editor for creating detailed recipes
- **Media Support**: Add images to showcase your dishes
- **Recipe Management**: Edit and manage your published recipes
- **Engagement Tracking**: See how your recipes perform

## üöÄ Tech Stack

- **Frontend**: 
  - SvelteKit
  - TailwindCSS
  - Lucide Icons
  - Rich Text Editor (Quill)

- **Backend**:
  - PostgreSQL
  - Drizzle ORM
  - Node.js

- **Authentication**:
  - Custom auth system
  - Session management
  - Social login support (Google, GitHub, Facebook)

## üõ†Ô∏è Setup

1. **Clone the repository**
   ```bash
   git clone https://github.com/yourusername/ownchef.git
   cd ownchef
   ```

2. **Install dependencies**
   ```bash
   pnpm install
   ```

3. **Set up environment variables**
   ```bash
   # Create a .env file with the following variables
   DATABASE_URL="postgresql://user:password@localhost:5432/ownchef"
   GOOGLE_CLIENT_ID="your_google_client_id"
   GOOGLE_CLIENT_SECRET="your_google_client_secret"
   PUBLIC_URL="http://localhost:5173"
   ```

4. **Start the database**
   ```bash
   pnpm run db:start
   ```

5. **Run migrations**
   ```bash
   pnpm run db:push
   ```

6. **Start development server**
   ```bash
   pnpm run dev
   ```

## üìÅ Project Structure

```
ownchef/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/    # Reusable UI components
‚îÇ   ‚îú‚îÄ‚îÄ routes/        # SvelteKit routes
‚îÇ   ‚îú‚îÄ‚îÄ lib/          # Shared utilities and helpers
‚îÇ   ‚îî‚îÄ‚îÄ app.html      # App template
‚îú‚îÄ‚îÄ static/           # Static assets
‚îú‚îÄ‚îÄ drizzle.config.ts # Database configuration
‚îî‚îÄ‚îÄ README.md
```

## üîë Available Scripts

- `pnpm run dev` - Start development server
- `pnpm run build` - Build for production
- `pnpm run preview` - Preview production build
- `pnpm run db:start` - Start PostgreSQL database
- `pnpm run db:push` - Push database changes
- `pnpm run db:studio` - Open Drizzle Studio

## üé® Features Details

### Authentication
- Email/Password login
- Social authentication (Google, GitHub, Facebook)
- Secure session management
- Protected routes

### Recipe Management
- Create, edit, and delete recipes
- Rich text editing
- Image upload support
- Recipe categorization

### User Interface
- Responsive design
- Dark/Light theme
- Modern UI components
- Interactive elements

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/AmazingFeature`)
3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## üìù License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- [SvelteKit](https://kit.svelte.dev/)
- [TailwindCSS](https://tailwindcss.com/)
- [Drizzle ORM](https://orm.drizzle.team/)
- [Lucide Icons](https://lucide.dev/)

## üìß Contact

KarthikAkshaj - [@yourusername](https://github.com/KarthikAkshaj)

Project Link: [https://github.com/KarthikAkshaj/ownchef](https://github.com/KarthikAkshaj/ownchef)



============================================================
File: ./src/app.css
Type: .css
============================================================

@import 'tailwindcss/base';
@import 'tailwindcss/components';
@import 'tailwindcss/utilities';
/* @import '$lib/styles/themes.css'; */

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
	--background: #fff;
	--foreground: #000;
}

[data-theme='dark'] {
	--background: #1a1a1a;
	--foreground: #fff;
}

body {
	background-color: var(--background);
	color: var(--foreground);
}



============================================================
File: ./src/app.d.ts
Type: .ts
============================================================

declare global {
	namespace App {
		interface Locals {
			user: {
				id: string;
				username: string;
				email: string | null;
				firstName: string | null;
				lastName: string | null;
				bio: string | null;
				profileImage: string | null;
				age: number | null;
				createdAt: Date;
				updatedAt: Date;
			} | null;
			session: {
				id: string;
				userId: string;
				expiresAt: Date;
			} | null;
		}
	}
}


============================================================
File: ./src/app.html
Type: .html
============================================================

<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>



============================================================
File: ./src/components/AuthLinks/AuthLinks.svelte
Type: .svelte
============================================================

<!-- src/components/AuthLinks/AuthLinks.svelte -->
<script lang="ts">
	import { page } from '$app/stores';
	import { signOut } from '$lib/auth';
</script>

{#if !$page.data.session}
	<a href="/login" class="login-btn">
		<span>Login</span>
		<div class="shine"></div>
	</a>
{:else}
	<a href="/write" class="auth-link"> Add Recipe </a>
	<button class="auth-link" on:click={signOut}> Logout </button>
{/if}

<style lang="postcss">
	.login-btn {
		@apply relative flex items-center justify-center overflow-hidden rounded-full px-6 py-2;
		@apply bg-gradient-to-r from-orange-500 via-red-500 to-orange-500 bg-[length:200%_100%];
		@apply text-sm font-semibold text-white;
		@apply transition-all duration-300;
		@apply hover:scale-105 hover:shadow-lg hover:shadow-orange-500/25;
		animation: gradient 3s linear infinite;
	}

	.login-btn .shine {
		@apply absolute inset-0 block;
		background: linear-gradient(
			45deg,
			transparent 0%,
			rgba(255, 255, 255, 0.25) 25%,
			transparent 50%
		);
		animation: shine 3s linear infinite;
	}

	@keyframes gradient {
		0% {
			background-position: 0% 50%;
		}
		50% {
			background-position: 100% 50%;
		}
		100% {
			background-position: 0% 50%;
		}
	}

	@keyframes shine {
		0% {
			transform: translateX(-100%);
		}
		100% {
			transform: translateX(200%);
		}
	}

	.auth-link {
		@apply rounded-md bg-blue-500 px-3 py-2 text-sm font-medium text-white transition-colors duration-200 hover:bg-blue-600;
	}

	button.auth-link {
		@apply cursor-pointer border-0;
	}
</style>



============================================================
File: ./src/components/Card/Card.svelte
Type: .svelte
============================================================

<!-- src/components/Card/Card.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Clock, Star } from 'lucide-svelte';

	export let recipe: {
		title: string;
		description: string;
		image: string;
		cookTime: number;
		category: string;
		difficulty: string;
		author: {
			name: string;
			avatar: string;
		};
		rating: number;
	};

	// Create an array for star rating
	$: stars = Array(5)
		.fill(null)
		.map((_, i) => i < Math.floor(recipe.rating));
</script>

<article
	class="recipe-card"
	class:dark={$theme === 'dark'}
	on:mousemove={(e) => {
		const { currentTarget: card } = e;
		const rect = card.getBoundingClientRect();
		const x = e.clientX - rect.left;
		const y = e.clientY - rect.top;

		const centerX = rect.width / 2;
		const centerY = rect.height / 2;

		const rotateX = (y - centerY) / 20;
		const rotateY = (centerX - x) / 20;

		card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) scale3d(1.02, 1.02, 1.02)`;
	}}
	on:mouseleave={(e) => {
		e.currentTarget.style.transform =
			'perspective(1000px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)';
	}}
>
	<!-- Image Section -->
	<div class="image-wrapper">
		<img src={recipe.image} alt={recipe.title} class="recipe-image" loading="lazy" />
		<div class="badges">
			<span class="category-badge">{recipe.category}</span>
			<span
				class="difficulty-badge"
				class:easy={recipe.difficulty === 'Easy'}
				class:medium={recipe.difficulty === 'Medium'}
				class:hard={recipe.difficulty === 'Hard'}
			>
				{recipe.difficulty}
			</span>
		</div>
	</div>

	<!-- Content Section -->
	<div class="content">
		<h3 class="title">{recipe.title}</h3>
		<p class="description">{recipe.description}</p>

		<!-- Meta Information -->
		<div class="meta">
			<div class="cook-time">
				<Clock size={16} strokeWidth={2.5} />
				<span>{recipe.cookTime} mins</span>
			</div>
			<div class="rating" title={`Rating: ${recipe.rating} out of 5`}>
				{#each stars as filled}
					<Star
						size={16}
						fill={filled ? 'currentColor' : 'none'}
						class={filled ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}
					/>
				{/each}
			</div>
		</div>

		<!-- Author Info -->
		<div class="author">
			<img src={recipe.author.avatar} alt={`Chef ${recipe.author.name}`} class="author-avatar" />
			<span class="author-name">by {recipe.author.name}</span>
		</div>

		<!-- Action Button -->
		<button class="view-recipe" aria-label={`View recipe for ${recipe.title}`}>
			<span>View Recipe</span>
			<div class="button-shine" aria-hidden="true" />
		</button>
	</div>
</article>

<style lang="postcss">
	.recipe-card {
		@apply relative overflow-hidden rounded-2xl bg-white;
		@apply transform transition-all duration-500 ease-out;
		@apply hover:shadow-xl dark:bg-gray-800;
		@apply border border-gray-100 dark:border-gray-700;
		@apply will-change-transform;
		max-width: 380px;
		height: fit-content;
	}

	.image-wrapper {
		@apply relative aspect-[16/9] w-full overflow-hidden;
	}

	.recipe-image {
		@apply h-full w-full object-cover;
		@apply transition-transform duration-700 ease-out;
	}

	.recipe-card:hover .recipe-image {
		@apply scale-110;
	}

	.badges {
		@apply absolute inset-x-0 top-0 flex items-center justify-between p-4;
	}

	.category-badge {
		@apply rounded-full px-3 py-1 text-xs font-semibold;
		@apply bg-white/90 text-gray-800 backdrop-blur-sm;
		@apply dark:bg-gray-800/90 dark:text-white;
		@apply transition-transform duration-300;
	}

	.recipe-card:hover .category-badge {
		@apply -translate-y-0.5;
	}

	.difficulty-badge {
		@apply rounded-full px-3 py-1 text-xs font-semibold backdrop-blur-sm;
		@apply transition-transform duration-300;
	}

	.recipe-card:hover .difficulty-badge {
		@apply translate-y-0.5;
	}

	.difficulty-badge.easy {
		@apply bg-emerald-500/90 text-white;
	}

	.difficulty-badge.medium {
		@apply bg-amber-500/90 text-white;
	}

	.difficulty-badge.hard {
		@apply bg-rose-500/90 text-white;
	}

	.content {
		@apply flex flex-col gap-4 p-6;
	}

	.title {
		@apply text-lg font-bold leading-tight tracking-tight;
		@apply text-gray-800 dark:text-white;
		@apply line-clamp-1;
	}

	.description {
		@apply text-sm leading-relaxed;
		@apply text-gray-600 dark:text-gray-300;
		@apply line-clamp-2;
	}

	.meta {
		@apply flex items-center justify-between;
	}

	.cook-time {
		@apply flex items-center gap-1.5 text-sm;
		@apply text-gray-600 dark:text-gray-400;
	}

	.rating {
		@apply flex gap-0.5;
	}

	.author {
		@apply flex items-center gap-3 border-t border-gray-100 pt-4 dark:border-gray-700;
	}

	.author-avatar {
		@apply h-8 w-8 rounded-full object-cover ring-2 ring-white dark:ring-gray-700;
	}

	.author-name {
		@apply text-sm font-medium;
		@apply text-gray-600 dark:text-gray-400;
	}

	.view-recipe {
		@apply relative mt-2 w-full overflow-hidden rounded-lg px-6 py-2.5;
		@apply text-sm font-semibold tracking-wide;
		@apply bg-gradient-to-r from-orange-500 to-red-500;
		@apply text-white transition-all duration-300;
	}

	.view-recipe:hover {
		@apply -translate-y-0.5 shadow-lg shadow-orange-500/25;
	}

	.view-recipe:active {
		@apply translate-y-0;
	}

	.button-shine {
		@apply absolute inset-0;
		background: linear-gradient(
			45deg,
			transparent 0%,
			rgba(255, 255, 255, 0.25) 50%,
			transparent 100%
		);
		transform: translateX(-100%) skewX(-15deg);
		transition: transform 0.75s ease;
	}

	.view-recipe:hover .button-shine {
		transform: translateX(100%) skewX(-15deg);
	}
</style>



============================================================
File: ./src/components/CardList/CardList.svelte
Type: .svelte
============================================================

<!-- src/components/CardList/CardList.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { onMount } from 'svelte';
	import Card from '../Card/Card.svelte';
	import Pagination from '../Pagination/Pagination.svelte';

	export let page = 1;
	export let hasMore = true;

	// Extended sample data with more recipes
	const recipes = [
		{
			title: 'Homemade Margherita Pizza',
			description: 'Classic Italian pizza with fresh basil, mozzarella, and tomato sauce',
			image: '/images/recipes/margherita-pizza.jpg',
			cookTime: 45,
			category: 'Italian',
			difficulty: 'Medium',
			author: {
				name: 'Chef Maria',
				avatar: '/images/users/chef-maria.jpg'
			},
			rating: 4.5
		},
		{
			title: 'Spicy Thai Green Curry',
			description:
				'Authentic Thai green curry with coconut milk, vegetables, and your choice of protein',
			image: '/images/recipes/thai-curry.jpg',
			cookTime: 35,
			category: 'Thai',
			difficulty: 'Easy',
			author: {
				name: 'Chef Raj',
				avatar: '/images/users/chef-raj.jpg'
			},
			rating: 4.8
		},
		{
			title: 'Classic Beef Burger',
			description: 'Juicy homemade beef burger with special sauce and fresh toppings',
			image: '/images/recipes/beef-burger.jpg',
			cookTime: 25,
			category: 'American',
			difficulty: 'Easy',
			author: {
				name: 'Chef Ahmed',
				avatar: '/images/users/chef-ahmed.jpg'
			},
			rating: 4.7
		},
		{
			title: 'Sushi Roll Platter',
			description: 'Assorted fresh sushi rolls with premium grade fish and seasonal ingredients',
			image: '/images/recipes/sushi.jpeg',
			cookTime: 60,
			category: 'Japanese',
			difficulty: 'Hard',
			author: {
				name: 'Chef Yuki',
				avatar: '/images/users/chef-yuki.jpg'
			},
			rating: 4.9
		},
		{
			title: 'Mediterranean Mezze',
			description: 'A vibrant platter of hummus, falafel, baba ganoush, and fresh pita bread',
			image: '/images/recipes/mezze.jpeg',
			cookTime: 40,
			category: 'Mediterranean',
			difficulty: 'Medium',
			author: {
				name: 'Chef Giovanni',
				avatar: '/images/users/chef-giovanni.jpeg'
			},
			rating: 4.6
		},
		{
			title: 'French Onion Soup',
			description: 'Rich beef broth with caramelized onions and melted Gruy√®re cheese',
			image: '/images/recipes/onion-soup.jpg',
			cookTime: 55,
			category: 'French',
			difficulty: 'Medium',
			author: {
				name: 'Chef Sarah',
				avatar: '/images/users/chef-sarah.jpg'
			},
			rating: 4.7
		}
	];

	let isLoading = true;

	onMount(() => {
		setTimeout(() => {
			isLoading = false;
		}, 1500);
	});
</script>

<section class="recipe-section">
	<div class="section-header">
		<h1 class="title">
			<span class="highlight">Featured Re</span>
			<span class="regular-text" class:dark={$theme === 'dark'}>cipes</span>
		</h1>
		<p class="subtitle">Discover delicious recipes from around the world</p>
	</div>

	<div class="recipe-grid">
		{#each recipes as recipe (recipe.title)}
			<Card {recipe} />
		{/each}
	</div>

	<div class="pagination-wrapper">
		<Pagination {page} {hasMore} />
	</div>
</section>

<style lang="postcss">
	.recipe-section {
		@apply mx-auto w-full max-w-7xl px-4;
	}

	.section-header {
		@apply mb-12 text-center;
	}

	.title {
		@apply mb-4 text-4xl font-bold;
	}

	.highlight {
		@apply text-orange-500;
	}

	.regular-text {
		@apply text-gray-900;
	}

	.regular-text.dark {
		@apply text-white;
	}

	.subtitle {
		@apply text-lg text-gray-600 dark:text-gray-400;
	}

	.recipe-grid {
		@apply grid gap-8;
		@apply grid-cols-1 sm:grid-cols-2 lg:grid-cols-3;
	}

	.pagination-wrapper {
		@apply mt-12;
	}
</style>



============================================================
File: ./src/components/CategoryList/CategoryList.svelte
Type: .svelte
============================================================

<!-- src/components/CategoryList/CategoryList.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import {
		Utensils,
		Coffee,
		Pizza,
		Soup,
		Beef,
		Sandwich,
		ChevronLeft,
		ChevronRight
	} from 'lucide-svelte';

	const categories = [
		{
			name: 'Indian',
			icon: Soup,
			color: 'bg-orange-500',
			bgLight: 'bg-orange-50',
			bgDark: 'dark:bg-orange-500/10'
		},
		{
			name: 'Chinese',
			icon: Utensils,
			color: 'bg-red-500',
			bgLight: 'bg-red-50',
			bgDark: 'dark:bg-red-500/10'
		},
		{
			name: 'Italian',
			icon: Pizza,
			color: 'bg-emerald-500',
			bgLight: 'bg-emerald-50',
			bgDark: 'dark:bg-emerald-500/10'
		},
		{
			name: 'Spanish',
			icon: Coffee,
			color: 'bg-amber-500',
			bgLight: 'bg-amber-50',
			bgDark: 'dark:bg-amber-500/10'
		},
		{
			name: 'Thai',
			icon: Soup,
			color: 'bg-purple-500',
			bgLight: 'bg-purple-50',
			bgDark: 'dark:bg-purple-500/10'
		},
		{
			name: 'Japanese',
			icon: Beef,
			color: 'bg-rose-500',
			bgLight: 'bg-rose-50',
			bgDark: 'dark:bg-rose-500/10'
		}
	];
</script>

<section class="categories-section" class:dark={$theme === 'dark'}>
	<div class="header">
		<h2 class="title">
			<span class="highlight">Categories</span>
		</h2>
		<p class="subtitle">Explore recipes by cuisine type</p>
	</div>

	<div class="categories-container">
		<div class="scroll-area" class:dark={$theme === 'dark'}>
			{#each categories as category}
				<a
					href="/category/{category.name.toLowerCase()}"
					class="category-card {category.bgLight} {category.bgDark}"
					data-sveltekit-noscroll
					on:click|preventDefault
				>
					<div class="icon-wrapper {category.color}">
						<svelte:component this={category.icon} size={20} class="text-white" />
					</div>
					<span class="category-name">{category.name}</span>
				</a>
			{/each}
		</div>

		<!-- Navigation Arrows -->
		<button class="nav-button left">
			<ChevronLeft size={20} />
		</button>
		<button class="nav-button right">
			<ChevronRight size={20} />
		</button>
	</div>
</section>

<style lang="postcss">
	.categories-section {
		@apply py-8;
	}

	.header {
		@apply mb-8 text-center;
	}

	.title {
		@apply text-3xl font-bold text-gray-900 dark:text-white;
	}

	.highlight {
		@apply text-orange-500;
	}

	.subtitle {
		@apply mt-2 text-gray-600 dark:text-gray-400;
	}

	.categories-container {
		@apply relative mx-auto max-w-7xl px-8;
	}

	.scroll-area {
		@apply flex gap-6 overflow-x-auto py-4;
		/* Hide scrollbar */
		-ms-overflow-style: none;
		scrollbar-width: none;
	}

	.scroll-area::-webkit-scrollbar {
		display: none;
	}

	.category-card {
		@apply flex min-w-[160px] flex-col items-center gap-4 rounded-xl p-6;
		@apply transform transition-all duration-300;
		@apply will-change-transform;
		@apply border border-gray-100 dark:border-gray-700;
	}

	/* Prevent jumping by setting explicit height */
	.category-card::before {
		content: '';
		@apply block;
		padding-bottom: 100%;
	}

	.icon-wrapper {
		@apply flex h-12 w-12 items-center justify-center rounded-full;
		@apply shadow-lg;
	}

	.category-name {
		@apply text-base font-medium text-gray-800 dark:text-gray-200;
	}

	.nav-button {
		@apply absolute top-1/2 hidden -translate-y-1/2 items-center justify-center;
		@apply h-10 w-10 rounded-full bg-white shadow-lg dark:bg-gray-800;
		@apply text-gray-600 dark:text-gray-300;
		@apply transition-all duration-300;
		@apply hover:bg-gray-50 hover:text-gray-900;
		@apply dark:hover:bg-gray-700 dark:hover:text-white;
		@apply lg:flex;
	}

	.nav-button.left {
		@apply -left-5;
	}

	.nav-button.right {
		@apply -right-5;
	}

	/* Add smooth hover effect */
	.category-card {
		@apply hover:-translate-y-1 hover:shadow-lg;
	}
</style>



============================================================
File: ./src/components/Comments/Comments.svelte
Type: .svelte
============================================================

<script lang="ts">
	let status = true; 
</script>

<div class="container">
	<h1 class="title">Comments</h1>
	{#if status}
		<div class="write">
			<textarea placeholder="Write a Comment..." class="input" ></textarea>
			<button class="button">Send</button>
		</div>
	{:else}
		<a href="/login">Please Login to Write a comment</a>
	{/if}

	<div class="comments">
		{#each Array(3) as _}
			<div class="comment">
				<div class="user">
					<div class="userImageContainer">
						<img src="/Food.jpg" alt="user Image" class="image" />
					</div>
					<div class="userInfo">
						<span class="username">Megumi Fushiguro</span>
						<span class="date">10.02.2023</span>
					</div>
				</div>
				<p class="desc">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Corrupti, molestiae optio odio
					dolorum recusandae perspiciatis.
				</p>
			</div>
		{/each}
	</div>
</div>

<style lang="postcss">
	.container {
		@apply mt-12;
	}

	.title {
		@apply mb-6 text-2xl font-bold text-gray-800;
	}

	.write {
		@apply flex flex-col gap-4;
	}

	.input {
		@apply w-full rounded-md border p-5;
	}

	.button {
		@apply w-max rounded-md bg-blue-500 px-4 py-2 text-white transition-colors hover:bg-blue-600;
	}

	.comments {
		@apply mt-8;
	}

	.comment {
		@apply mb-8;
	}

	.user {
		@apply mb-4 flex items-center gap-4;
	}

	.userImageContainer {
		@apply relative h-12 w-12;
	}

	.image {
		@apply h-full w-full rounded-full object-cover;
	}

	.userInfo {
		@apply flex flex-col;
	}

	.username {
		@apply font-medium;
	}

	.date {
		@apply text-sm text-gray-500;
	}

	.desc {
		@apply leading-6 text-gray-700;
	}
</style>



============================================================
File: ./src/components/CookingMode/CookingMode.svelte
Type: .svelte
============================================================

<!-- src/components/CookingMode/CookingMode.svelte -->
<script lang="ts">
	import { fade, fly } from 'svelte/transition';
	import { X, ChevronLeft, ChevronRight, Clock, Check } from 'lucide-svelte';

	export let steps: { title: string; content: string }[] = [];
	export let title: string = '';
	export let onClose: () => void;

	let currentStep = 0;
	let completedSteps: boolean[] = Array(steps.length).fill(false);

	function nextStep() {
		if (currentStep < steps.length - 1) {
			currentStep++;
			window.scrollTo(0, 0);
		}
	}

	function prevStep() {
		if (currentStep > 0) {
			currentStep--;
			window.scrollTo(0, 0);
		}
	}

	function toggleStepComplete() {
		completedSteps[currentStep] = !completedSteps[currentStep];
	}

	// Handle keyboard navigation
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			onClose();
		} else if (event.key === 'ArrowRight') {
			nextStep();
		} else if (event.key === 'ArrowLeft') {
			prevStep();
		}
	}
</script>

<svelte:window on:keydown={handleKeydown} />

<div class="cooking-mode" in:fade={{ duration: 300 }}>
	<div class="cooking-mode-header">
		<button class="close-button" on:click={onClose} aria-label="Close cooking mode">
			<X size={24} />
		</button>
		<h1 class="recipe-title">{title}</h1>
		<div class="progress-indicator">
			Step {currentStep + 1} of {steps.length}
		</div>
	</div>

	<div class="step-container">
		{#key currentStep}
			<div class="step" in:fly={{ y: 20, duration: 300 }}>
				<div class="step-header">
					<div class="step-number">{currentStep + 1}</div>
					<h2 class="step-title">{steps[currentStep].title}</h2>
					<button
						class="complete-step-button"
						class:completed={completedSteps[currentStep]}
						on:click={toggleStepComplete}
						aria-label={completedSteps[currentStep]
							? 'Mark step as incomplete'
							: 'Mark step as complete'}
					>
						<Check size={24} />
					</button>
				</div>
				<p class="step-content">{steps[currentStep].content}</p>
			</div>
		{/key}
	</div>

	<div class="cooking-mode-footer">
		<button
			class="nav-button prev"
			on:click={prevStep}
			disabled={currentStep === 0}
			aria-label="Previous step"
		>
			<ChevronLeft size={24} />
			<span>Previous</span>
		</button>

		<div class="step-dots">
			{#each steps as _, i}
				<button
					class="step-dot"
					class:active={i === currentStep}
					class:completed={completedSteps[i]}
					on:click={() => (currentStep = i)}
					aria-label={`Go to step ${i + 1}`}
				></button>
			{/each}
		</div>

		<button
			class="nav-button next"
			on:click={nextStep}
			disabled={currentStep === steps.length - 1}
			aria-label="Next step"
		>
			<span>Next</span>
			<ChevronRight size={24} />
		</button>
	</div>
</div>

<style lang="postcss">
	.cooking-mode {
		@apply fixed inset-0 z-50 flex flex-col bg-white dark:bg-gray-900;
		@apply overflow-y-auto;
	}

	.cooking-mode-header {
		@apply sticky top-0 flex items-center justify-between border-b border-gray-200 bg-white p-4 dark:border-gray-700 dark:bg-gray-900;
		@apply z-10;
	}

	.close-button {
		@apply rounded-full p-2 text-gray-500 transition-colors hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200;
	}

	.recipe-title {
		@apply absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-xl font-bold text-gray-900 dark:text-white;
		@apply max-w-[60%] truncate;
	}

	.progress-indicator {
		@apply text-sm font-medium text-gray-500 dark:text-gray-400;
	}

	.step-container {
		@apply flex-1 p-6;
	}

	.step {
		@apply mx-auto max-w-2xl rounded-xl bg-white p-6 shadow-lg dark:bg-gray-800;
	}

	.step-header {
		@apply mb-6 flex items-center gap-4;
	}

	.step-number {
		@apply flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-orange-500 text-2xl font-bold text-white shadow-md;
	}

	.step-title {
		@apply flex-1 text-2xl font-bold text-gray-900 dark:text-white;
	}

	.complete-step-button {
		@apply flex h-10 w-10 items-center justify-center rounded-full border-2 border-gray-300 text-gray-400 transition-all hover:border-orange-500 hover:text-orange-500 dark:border-gray-600 dark:text-gray-500 dark:hover:border-orange-500 dark:hover:text-orange-500;
	}

	.complete-step-button.completed {
		@apply border-green-500 bg-green-500 text-white hover:border-green-600 hover:bg-green-600 hover:text-white dark:border-green-500 dark:bg-green-500 dark:text-white dark:hover:border-green-600 dark:hover:bg-green-600;
	}

	.step-content {
		@apply prose prose-lg max-w-none text-gray-700 dark:prose-invert dark:text-gray-300;
		@apply prose-headings:text-gray-900 dark:prose-headings:text-white;
		@apply prose-strong:text-gray-900 dark:prose-strong:text-white;
	}

	.cooking-mode-footer {
		@apply sticky bottom-0 flex items-center justify-between border-t border-gray-200 bg-white p-4 dark:border-gray-700 dark:bg-gray-900;
	}

	.nav-button {
		@apply flex items-center gap-2 rounded-lg bg-gray-100 px-4 py-3 text-gray-700 transition-all hover:bg-gray-200 disabled:cursor-not-allowed disabled:opacity-50 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.nav-button.prev {
		@apply mr-auto;
	}

	.nav-button.next {
		@apply ml-auto;
	}

	.step-dots {
		@apply absolute left-1/2 flex -translate-x-1/2 gap-2;
	}

	.step-dot {
		@apply h-2.5 w-2.5 rounded-full bg-gray-300 transition-all hover:bg-gray-400 dark:bg-gray-600 dark:hover:bg-gray-500;
	}

	.step-dot.active {
		@apply w-8 bg-orange-500 hover:bg-orange-600 dark:bg-orange-500 dark:hover:bg-orange-600;
	}

	.step-dot.completed {
		@apply bg-green-500 hover:bg-green-600 dark:bg-green-500 dark:hover:bg-green-600;
	}
</style>



============================================================
File: ./src/components/Featured/Featured.svelte
Type: .svelte
============================================================

<script lang="ts">
	import { onMount } from 'svelte';
	import { fade, scale, fly } from 'svelte/transition';
	import { ChevronLeft, ChevronRight, Clock, User } from 'lucide-svelte';

	// Sample data - later we can fetch this from an API
	const featuredPosts = [
		{
			id: 1,
			title: 'Classic Italian Pasta Carbonara',
			description:
				'Learn the authentic way to make this creamy Roman pasta dish with eggs, cheese, and pancetta.',
			image: '/images/recipes/carbonara.jpg',
			category: 'Italian',
			author: 'Chef Maria',
			readTime: '15 min'
		},
		{
			id: 2,
			title: 'Perfect Butter Chicken',
			description:
				'Discover the secrets to making the most tender and flavorful butter chicken at home.',
			image: '/images/recipes/butter-chicken.jpg',
			category: 'Indian',
			author: 'Chef Raj',
			readTime: '25 min'
		},
		{
			id: 3,
			title: 'Sushi Rolling Masterclass',
			description:
				'Master the art of sushi rolling with our step-by-step guide to perfect rolls every time.',
			image: '/images/recipes/sushi.jpeg',
			category: 'Japanese',
			author: 'Chef Yuki',
			readTime: '30 min'
		}
	];

	let currentIndex = 0;
	let intervalId: NodeJS.Timeout;
	let isHovered = false;

	function nextSlide() {
		currentIndex = (currentIndex + 1) % featuredPosts.length;
	}

	function prevSlide() {
		currentIndex = (currentIndex - 1 + featuredPosts.length) % featuredPosts.length;
	}

	function startAutoPlay() {
		intervalId = setInterval(nextSlide, 5000);
		isHovered = false;
	}

	function stopAutoPlay() {
		if (intervalId) clearInterval(intervalId);
		isHovered = true;
	}

	onMount(() => {
		startAutoPlay();
		return () => stopAutoPlay();
	});
</script>

<div
	class="featured-section"
	role="region"
	aria-label="Featured Recipes Carousel"
	on:mouseenter={stopAutoPlay}
	on:mouseleave={startAutoPlay}
>
	<div class="featured-content" role="group">
		{#key currentIndex}
			<div
				class="slide"
				role="group"
				aria-roledescription="slide"
				aria-label={`Slide ${currentIndex + 1} of ${featuredPosts.length}`}
				in:fade={{ duration: 400 }}
				out:fade={{ duration: 400 }}
			>
				<div class="image-wrapper">
					<img
						src={featuredPosts[currentIndex].image}
						alt={featuredPosts[currentIndex].title}
						class="slide-image"
					/>
					<div class="overlay" aria-hidden="true" ></div>
				</div>

				<div class="text-content" in:fly={{ x: 50, duration: 500, delay: 200 }}>
					<span class="category" in:scale={{ duration: 300, delay: 300 }}>
						{featuredPosts[currentIndex].category}
					</span>
					<h1 class="title">{featuredPosts[currentIndex].title}</h1>
					<p class="description">{featuredPosts[currentIndex].description}</p>
					<div class="meta" role="contentinfo">
						<div class="meta-item">
							<User size={16} aria-hidden="true" />
							<span>{featuredPosts[currentIndex].author}</span>
						</div>
						<div class="divider" aria-hidden="true"></div>
						<div class="meta-item">
							<Clock size={16} aria-hidden="true" />
							<span>{featuredPosts[currentIndex].readTime} read</span>
						</div>
					</div>
					<button class="read-more" aria-label={`Read ${featuredPosts[currentIndex].title}`}>
						Read Recipe
						<div class="btn-shine" aria-hidden="true"></div>
					</button>
				</div>
			</div>
		{/key}

		<!-- Navigation -->
		<div
			class="navigation-wrapper"
			class:show={isHovered}
			role="group"
			aria-label="Carousel Navigation"
		>
			<button class="nav-button prev" on:click={prevSlide} aria-label="Previous slide">
				<ChevronLeft size={24} aria-hidden="true" />
			</button>

			<button class="nav-button next" on:click={nextSlide} aria-label="Next slide">
				<ChevronRight size={24} aria-hidden="true" />
			</button>
		</div>

		<div class="dots" role="tablist" aria-label="Slide dots">
			{#each featuredPosts as _, index}
				<button
					class="dot"
					role="tab"
					aria-selected={currentIndex === index}
					aria-label={`Go to slide ${index + 1}`}
					class:active={currentIndex === index}
					on:click={() => (currentIndex = index)}
				></button>
			{/each}
		</div>
	</div>
</div>

<style lang="postcss">
	.featured-section {
		@apply relative mx-auto mt-8 overflow-hidden rounded-3xl;
		@apply z-[1];
		height: min(70vh, 600px);
	}

	.featured-content {
		@apply relative h-full w-full;
	}

	.slide {
		@apply relative flex h-full w-full items-center;
	}

	.image-wrapper {
		@apply absolute inset-0 overflow-hidden;
	}

	.slide-image {
		@apply h-full w-full object-cover;
		transform: scale(1);
		transition: transform 6s ease;
	}

	.slide:hover .slide-image {
		transform: scale(1.1);
	}

	.overlay {
		@apply absolute inset-0;
		background: linear-gradient(
			90deg,
			rgba(0, 0, 0, 0.8) 0%,
			rgba(0, 0, 0, 0.6) 50%,
			rgba(0, 0, 0, 0.2) 100%
		);
	}

	.text-content {
		@apply relative z-[2] ml-16 max-w-2xl text-white;
	}

	.category {
		@apply mb-4 inline-block rounded-full px-4 py-1 text-sm font-semibold;
		background: linear-gradient(135deg, #ff6b6b, #ffa07a);
	}

	.title {
		@apply mb-4 text-5xl font-bold leading-tight;
		text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
	}

	.description {
		@apply mb-6 text-lg text-gray-200;
		text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
	}

	.meta {
		@apply mb-8 flex items-center space-x-4 text-sm text-gray-300;
	}

	.meta-item {
		@apply flex items-center gap-2;
	}

	.divider {
		@apply h-4 w-px bg-gray-400/30;
	}

	.read-more {
		@apply relative overflow-hidden rounded-lg px-6 py-3 text-sm font-semibold;
		background: linear-gradient(135deg, #ff6b6b, #ffa07a);
		transition: all 0.3s ease;
	}

	.read-more:hover {
		transform: translateY(-2px);
		box-shadow: 0 10px 20px rgba(255, 107, 107, 0.2);
	}

	.btn-shine {
		@apply absolute inset-0;
		background: linear-gradient(
			45deg,
			transparent 0%,
			rgba(255, 255, 255, 0.2) 50%,
			transparent 100%
		);
		transform: translateX(-100%);
		transition: transform 0.5s ease;
	}

	.read-more:hover .btn-shine {
		transform: translateX(100%);
	}

	.navigation-wrapper {
		@apply absolute inset-y-0 left-0 right-0 z-[3] flex items-center justify-between px-4;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	.navigation-wrapper.show {
		opacity: 1;
	}

	.nav-button {
		@apply flex h-12 w-12 items-center justify-center rounded-full bg-black/30 text-white backdrop-blur-sm;
		@apply transition-all duration-300;
		@apply hover:scale-110 hover:bg-black/50;
	}

	.dots {
		@apply absolute bottom-6 left-1/2 z-[3] flex -translate-x-1/2 space-x-2;
	}

	.dot {
		@apply h-2 w-2 rounded-full transition-all duration-300;
		background: rgba(255, 255, 255, 0.3);
	}

	.dot.active {
		@apply w-8;
		background: linear-gradient(135deg, #ff6b6b, #ffa07a);
	}
</style>



============================================================
File: ./src/components/Footer/Footer.svelte
Type: .svelte
============================================================

<!-- src/components/Footer/Footer.svelte -->
<script lang="ts">
	import { Facebook, Instagram, Twitter, Youtube } from 'lucide-svelte';
	import { theme } from '$lib/stores/theme';
</script>

<footer class="footer" class:dark={$theme === 'dark'}>
	<div class="footer-container">
		<!-- Logo Section -->
		<div class="info">
			<div class="logo-section">
				<div class="logo-text">
					<span class="own">Own</span>
					<span class="chef" class:dark={$theme === 'dark'}>CHEF</span>
				</div>
			</div>
			<p class="desc">
				Discover, create, and share delicious recipes from around the world. Join our community of
				food lovers and culinary enthusiasts.
			</p>
			<div class="social-links">
				<a href="/" class="social-icon facebook">
					<Facebook size={20} />
				</a>
				<a href="/" class="social-icon instagram">
					<Instagram size={20} />
				</a>
				<a href="/" class="social-icon twitter">
					<Twitter size={20} />
				</a>
				<a href="/" class="social-icon youtube">
					<Youtube size={20} />
				</a>
			</div>
		</div>

		<!-- Links Section -->
		<div class="links">
			<div class="link-group">
				<h3 class="group-title">Quick Links</h3>
				<a href="/">Home</a>
				<a href="/blog">Recipes</a>
				<a href="/about">About</a>
				<a href="/contact">Contact</a>
			</div>

			<div class="link-group">
				<h3 class="group-title">Categories</h3>
				<a href="/category/indian">Indian</a>
				<a href="/category/chinese">Chinese</a>
				<a href="/category/italian">Italian</a>
				<a href="/category/spanish">Spanish</a>
			</div>

			<div class="link-group">
				<h3 class="group-title">Follow Us</h3>
				<a href="/">Facebook</a>
				<a href="/">Instagram</a>
				<a href="/">Twitter</a>
				<a href="/">Youtube</a>
			</div>
		</div>
	</div>

	<div class="copyright">
		<p>¬© {new Date().getFullYear()} OwnChef. All rights reserved.</p>
	</div>
</footer>

<style lang="postcss">
	.footer {
		@apply mt-24 border-t transition-colors duration-300;
		@apply border-gray-200 bg-white;
	}

	.footer.dark {
		@apply border-gray-800 bg-gray-900;
	}

	.footer-container {
		@apply mx-auto max-w-7xl px-6 py-12;
		@apply grid grid-cols-1 gap-8 lg:grid-cols-3;
	}

	.info {
		@apply lg:col-span-1;
	}

	.logo-text {
		@apply flex items-baseline gap-1 text-2xl font-bold;
	}

	.own {
		@apply bg-gradient-to-br from-red-500 via-orange-400 to-yellow-500 bg-clip-text font-black text-transparent;
	}

	.chef {
		@apply font-bold tracking-wider text-gray-800 transition-colors duration-300;
	}

	.chef.dark {
		@apply text-white;
	}

	.desc {
		@apply mt-6 text-gray-600 transition-colors duration-300;
	}

	.footer.dark .desc {
		@apply text-gray-300;
	}

	.social-links {
		@apply mt-8 flex space-x-6;
	}

	.social-icon {
		@apply flex h-10 w-10 items-center justify-center rounded-full transition-all duration-300;
	}

	.facebook {
		@apply text-[#316FF6] hover:bg-[#316FF6]/10;
	}

	.instagram {
		@apply text-[#d62976] hover:bg-[#d62976]/10;
	}

	.twitter {
		@apply text-[#1DA1F2] hover:bg-[#1DA1F2]/10;
	}

	.youtube {
		@apply text-[#FF0000] hover:bg-[#FF0000]/10;
	}

	.links {
		@apply grid grid-cols-1 gap-8 sm:grid-cols-3 lg:col-span-2;
	}

	.link-group {
		@apply flex flex-col space-y-4;
	}

	.group-title {
		@apply text-sm font-semibold uppercase tracking-wider;
		@apply text-gray-400 transition-colors duration-300;
	}

	.footer.dark .group-title {
		@apply text-gray-300;
	}

	.link-group a {
		@apply text-base transition-colors duration-300;
		@apply text-gray-600 hover:text-gray-900;
	}

	.footer.dark .link-group a {
		@apply text-gray-300 hover:text-white;
	}

	.copyright {
		@apply border-t transition-colors duration-300;
		@apply border-gray-200 bg-gray-50 py-4 text-center;
	}

	.footer.dark .copyright {
		@apply border-gray-800 bg-gray-900;
	}

	.copyright p {
		@apply text-sm transition-colors duration-300;
		@apply text-gray-500;
	}

	.footer.dark .copyright p {
		@apply text-gray-400;
	}
</style>



============================================================
File: ./src/components/Menu/Menu.svelte
Type: .svelte
============================================================

<!-- src/components/Menu/Menu.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Flame, Award, Hash } from 'lucide-svelte';

	// Sample data - replace with actual data later
	const popularPosts = [
		{
			id: 1,
			title: 'Classic Italian Pasta Carbonara',
			views: 12543,
			image: '/images/recipes/carbonara.jpg',
			author: 'Chef Maria',
			date: '2024-01-15'
		},
		{
			id: 2,
			title: 'Authentic Thai Green Curry',
			views: 10234,
			image: '/images/recipes/thai-curry.jpg',
			author: 'Chef Sorn',
			date: '2024-01-18'
		},
		{
			id: 3,
			title: 'Perfect Homemade Pizza',
			views: 9876,
			image: '/images/recipes/margherita-pizza.jpg',
			author: 'Chef Marco',
			date: '2024-01-20'
		}
	];

	const editorsPicks = [
		{
			id: 1,
			title: 'Japanese Ramen from Scratch',
			rating: 4.9,
			image: '/images/recipes/ramen.jpg',
			author: 'Chef Yuki',
			date: '2024-01-22'
		},
		{
			id: 2,
			title: 'French Croissants Masterclass',
			rating: 4.8,
			image: '/images/recipes/croissant.jpg',
			author: 'Chef Pierre',
			date: '2024-01-25'
		}
	];

	const categories = [
		{ name: 'Indian', count: 128, color: 'bg-orange-500' },
		{ name: 'Italian', count: 156, color: 'bg-green-500' },
		{ name: 'Chinese', count: 142, color: 'bg-red-500' },
		{ name: 'Japanese', count: 98, color: 'bg-blue-500' },
		{ name: 'Mexican', count: 87, color: 'bg-yellow-500' },
		{ name: 'Thai', count: 76, color: 'bg-purple-500' }
	];

	function formatNumber(num: number): string {
		return num > 999 ? (num / 1000).toFixed(1) + 'k' : num.toString();
	}

	function formatDate(dateStr: string): string {
		const date = new Date(dateStr);
		return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
	}
</script>

<aside class="sidebar" class:dark={$theme === 'dark'}>
	<!-- Most Popular Section -->
	<section class="section">
		<div class="section-header">
			<Flame class="icon text-orange-500" size={20} />
			<h2 class="section-title">Most Popular</h2>
		</div>
		<div class="posts-grid">
			{#each popularPosts as post}
				<article class="post-card">
					<div class="post-image-wrapper">
						<img src={post.image} alt={post.title} class="post-image" />
						<span class="views-badge">{formatNumber(post.views)} views</span>
					</div>
					<div class="post-content">
						<h3 class="post-title">{post.title}</h3>
						<div class="post-meta">
							<span class="author">{post.author}</span>
							<span class="date">{formatDate(post.date)}</span>
						</div>
					</div>
				</article>
			{/each}
		</div>
	</section>

	<!-- Categories Section -->
	<section class="section">
		<div class="section-header">
			<Hash class="icon text-blue-500" size={20} />
			<h2 class="section-title">Categories</h2>
		</div>
		<div class="categories-grid">
			{#each categories as category}
				<a href="/category/{category.name.toLowerCase()}" class="category-card">
					<div class="category-info">
						<span class="category-name">{category.name}</span>
						<span class="category-count">{category.count} recipes</span>
					</div>
					<div class="category-indicator {category.color}"></div>
				</a>
			{/each}
		</div>
	</section>

	<!-- Editor's Picks Section -->
	<section class="section">
		<div class="section-header">
			<Award class="icon text-yellow-500" size={20} />
			<h2 class="section-title">Editor's Picks</h2>
		</div>
		<div class="picks-grid">
			{#each editorsPicks as pick}
				<article class="pick-card">
					<div class="pick-image-wrapper">
						<img src={pick.image} alt={pick.title} class="pick-image" />
						<span class="rating-badge">‚≠ê {pick.rating}</span>
					</div>
					<div class="pick-content">
						<h3 class="pick-title">{pick.title}</h3>
						<div class="pick-meta">
							<span class="author">{pick.author}</span>
							<span class="date">{formatDate(pick.date)}</span>
						</div>
					</div>
				</article>
			{/each}
		</div>
	</section>
</aside>

<style lang="postcss">
	.sidebar {
		@apply flex flex-col gap-8 rounded-2xl bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.section {
		@apply flex flex-col gap-6;
	}

	.section-header {
		@apply flex items-center gap-3;
	}

	.section-title {
		@apply text-xl font-bold text-gray-900 dark:text-white;
	}

	.posts-grid {
		@apply flex flex-col gap-6;
	}

	.post-card {
		@apply flex gap-4 rounded-lg p-2 transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700;
	}

	.post-image-wrapper {
		@apply relative h-20 w-20 flex-shrink-0 overflow-hidden rounded-lg;
	}

	.post-image {
		@apply h-full w-full object-cover;
	}

	.views-badge {
		@apply absolute bottom-1 right-1 rounded bg-black/70 px-1.5 py-0.5 text-xs font-medium text-white;
	}

	.post-content {
		@apply flex flex-col justify-center;
	}

	.post-title {
		@apply mb-1 line-clamp-2 text-sm font-medium text-gray-900 dark:text-white;
	}

	.post-meta {
		@apply flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400;
	}

	.categories-grid {
		@apply grid gap-3 sm:grid-cols-2;
	}

	.category-card {
		@apply flex items-center justify-between rounded-lg border p-3 transition-all duration-300 hover:border-gray-300 dark:border-gray-700 dark:hover:border-gray-600;
	}

	.category-info {
		@apply flex flex-col;
	}

	.category-name {
		@apply text-sm font-medium text-gray-900 dark:text-white;
	}

	.category-count {
		@apply text-xs text-gray-500 dark:text-gray-400;
	}

	.category-indicator {
		@apply h-2 w-2 rounded-full;
	}

	.picks-grid {
		@apply flex flex-col gap-6;
	}

	.pick-card {
		@apply flex gap-4 rounded-lg p-2 transition-all duration-300 hover:bg-gray-50 dark:hover:bg-gray-700;
	}

	.pick-image-wrapper {
		@apply relative h-24 w-24 flex-shrink-0 overflow-hidden rounded-lg;
	}

	.pick-image {
		@apply h-full w-full object-cover;
	}

	.rating-badge {
		@apply absolute bottom-1 right-1 rounded bg-black/70 px-1.5 py-0.5 text-xs font-medium text-white;
	}

	.pick-content {
		@apply flex flex-col justify-center;
	}

	.pick-title {
		@apply mb-1 line-clamp-2 text-sm font-medium text-gray-900 dark:text-white;
	}

	.pick-meta {
		@apply flex items-center gap-2 text-xs text-gray-500 dark:text-gray-400;
	}

	.author {
		@apply font-medium;
	}

	.date {
		@apply before:mx-1 before:content-['‚Ä¢'];
	}
</style>



============================================================
File: ./src/components/MenuCategories/MenuCategories.svelte
Type: .svelte
============================================================

<div class="categoryList">
	<a href="/blog?cat=thai" class="categoryItem style">Thai</a>
	<a href="/blog?cat=japanese" class="categoryItem fashion">Japanese</a>
	<a href="/blog?cat=italian" class="categoryItem food">Italian</a>
	<a href="/blog?cat=indian" class="categoryItem travel">Indian</a>
	<a href="/blog?cat=spanish" class="categoryItem culture">Spanish</a>
	<a href="/blog?cat=chinese" class="categoryItem coding">Chinese</a>
</div>

<style lang="postcss">
	.categoryList {
		@apply flex flex-wrap gap-3;
	}

	.categoryItem {
		@apply rounded-lg px-4 py-2 text-sm;
	}

	.style {
		@apply bg-blue-100 text-blue-600;
	}

	.fashion {
		@apply bg-rose-100 text-rose-600;
	}

	.food {
		@apply bg-green-100 text-green-600;
	}

	.travel {
		@apply bg-orange-100 text-orange-600;
	}

	.culture {
		@apply bg-purple-100 text-purple-600;
	}

	.coding {
		@apply bg-indigo-100 text-indigo-600;
	}
</style>



============================================================
File: ./src/components/MenuPosts/MenuPosts.svelte
Type: .svelte
============================================================

<script lang="ts">
	export let withImage: boolean;
</script>

<div class="items">
	{#each Array(4) as _, i}
		<a href="/" class="item">
			{#if withImage}
				<div class="imageContainer">
					<img src="/Food.jpg" alt="" class="image" />
				</div>
			{/if}
			<div class="textContainer">
				<span class="category travel">Indian</span>
				<h3 class="postTitle">Lorem ipsum dolor sit amet consectetur adipisicing elit.</h3>
				<div class="detail">
					<span class="username">John Doe</span>
					<span class="date"> - 10.03.2023</span>
				</div>
			</div>
		</a>
	{/each}
</div>

<style lang="postcss">
	.items {
		@apply mt-5 flex flex-col gap-8;
	}

	.item {
		@apply flex gap-5;
	}

	.imageContainer {
		@apply relative aspect-square flex-1;
	}

	.image {
		@apply rounded-full border object-cover;
	}

	.textContainer {
		@apply flex flex-[4] flex-col gap-1;
	}

	.category {
		@apply w-max rounded-2xl px-2 py-1 text-sm;
	}

	.travel {
		@apply bg-orange-100 text-orange-600;
	}

	.postTitle {
		@apply text-base font-medium leading-5;
	}

	.detail {
		@apply text-sm;
	}

	.username {
		@apply font-medium;
	}

	.date {
		@apply text-gray-500;
	}
</style>



============================================================
File: ./src/components/Navbar/Navbar.svelte
Type: .svelte
============================================================

<!-- src/components/Navbar/Navbar.svelte -->
<script lang="ts">
	import { page } from '$app/stores';
	import { theme } from '$lib/stores/theme';
	import { browser } from '$app/environment';
	import { slide } from 'svelte/transition';
	import { clickOutside } from '$lib/utils/clickOutside';
	import {
		Menu,
		X,
		Search,
		ChevronDown,
		Facebook,
		Instagram,
		Twitter,
		Youtube
	} from 'lucide-svelte';
	import ThemeToggle from '../ThemeToggle/ThemeToggle.svelte';
	import AuthLinks from '../AuthLinks/AuthLinks.svelte';

	let isScrolled = false;
	let isMobileMenuOpen = false;
	let isDropdownOpen = false;
	let isSearchOpen = false;
	let searchQuery = '';
	let suppressHover = false;

	// Handle scroll effect
	if (browser) {
		window.addEventListener('scroll', () => {
			isScrolled = window.scrollY > 20;
		});
	}

	const categories = [
		{ id: 'indian', name: 'Indian', path: '/category/indian' },
		{ id: 'chinese', name: 'Chinese', path: '/category/chinese' },
		{ id: 'italian', name: 'Italian', path: '/category/italian' },
		{ id: 'spanish', name: 'Spanish', path: '/category/spanish' },
		{ id: 'thai', name: 'Thai', path: '/category/thai' },
		{ id: 'japanese', name: 'Japanese', path: '/category/japanese' }
	];

	function closeMenu() {
		isMobileMenuOpen = false;
		isDropdownOpen = false;
	}

	function handleKeydown(event: KeyboardEvent) {
		if (isDropdownOpen && event.key === 'Escape') {
			isDropdownOpen = false;
		}
	}

	function handleSearch() {
		if (searchQuery.trim()) {
			console.log('Searching for:', searchQuery);
		}
	}

	function toggleDropdown() {
		isDropdownOpen = !isDropdownOpen;
		// Temporarily suppress hover interactions
		suppressHover = true;
		setTimeout(() => (suppressHover = false), 300);
	}

	function handleMouseEnter() {
		if (!suppressHover) isDropdownOpen = true;
	}

	function handleMouseLeave() {
		if (!suppressHover) isDropdownOpen = false;
	}
</script>

<svelte:window on:keydown={handleKeydown} />

<nav
	class="fixed left-0 right-0 z-[100] mx-auto mt-4 max-w-[calc(100%-2rem)] rounded-2xl transition-all duration-300"
	class:scrolled={isScrolled}
	class:dark={$theme === 'dark'}
>
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="flex h-16 items-center justify-between">
			<!-- Logo -->
			<a href="/" class="logo" on:click={closeMenu}>
				<div class="logo-wrapper">
					<span class="own">Own</span>
					<div class="chef-wrapper">
						<span class="chef" class:dark={$theme === 'dark'}>CHEF</span>
						<div class="utensils">
							<span class="knife">üî™</span>
							<span class="fork">üç¥</span>
						</div>
					</div>
				</div>
			</a>

			<!-- Desktop Navigation -->
			<div
				class="group relative"
				role="navigation"
				on:mouseenter={handleMouseEnter}
				on:mouseleave={handleMouseLeave}
				class:dark={$theme === 'dark'}
			>
				<button
					class="nav-link flex items-center gap-1"
					class:dark={$theme === 'dark'}
					aria-expanded={isDropdownOpen}
					aria-controls="categories-menu"
					aria-haspopup="true"
					on:click={toggleDropdown}
				>
					<span>Recipes</span>
					<ChevronDown
						size={16}
						class={`transform transition-transform duration-200 ${isDropdownOpen ? 'rotate-180' : ''}`}
					/>
				</button>

				{#if isDropdownOpen}
					<div
						id="categories-menu"
						class="dropdown-menu"
						role="menu"
						tabindex="0"
						on:mouseenter={handleMouseEnter}
						on:mouseleave={handleMouseLeave}
						transition:slide={{ duration: 200 }}
						use:clickOutside={() => {
							if (!suppressHover) isDropdownOpen = false;
						}}
					>
						{#each categories as category (category.id)}
							<a
								href={category.path}
								class="dropdown-item"
								class:active={$page.url.pathname === category.path}
								role="menuitem"
								tabindex="0"
								on:click={() => (isDropdownOpen = false)}
							>
								{category.name}
							</a>
						{/each}
					</div>
				{/if}
			</div>

			<a
				href="/about"
				class="nav-link"
				class:dark={$theme === 'dark'}
				class:active={$page.url.pathname === '/about'}
			>
				About
			</a>

			<!-- Search Bar -->
			<div class="search-container" class:open={isSearchOpen}>
				<input
					type="text"
					bind:value={searchQuery}
					placeholder="Search recipes..."
					class="search-input"
					on:keydown={(e) => e.key === 'Enter' && handleSearch()}
				/>
				<button
					class="search-toggle"
					aria-label={isSearchOpen ? 'Close search' : 'Open search'}
					on:click={() => (isSearchOpen = !isSearchOpen)}
				>
					{#if isSearchOpen}
						<X size={20} />
					{:else}
						<Search size={20} />
					{/if}
				</button>
			</div>

			<!-- Social Links -->
			<div class="social-links">
				<a href="/" class="social-icon facebook" aria-label="Facebook">
					<Facebook size={18} />
				</a>
				<a href="/" class="social-icon instagram" aria-label="Instagram">
					<Instagram size={18} />
				</a>
				<a href="/" class="social-icon twitter" aria-label="Twitter">
					<Twitter size={18} />
				</a>
				<a href="/" class="social-icon youtube" aria-label="YouTube">
					<Youtube size={18} />
				</a>
			</div>

			<!-- Theme Toggle and Auth -->
			<div class="flex items-center space-x-4">
				<ThemeToggle />
				<AuthLinks />
			</div>
		</div>

		<!-- Mobile Menu Button -->
		<button
			class="mobile-menu-button"
			on:click={() => (isMobileMenuOpen = !isMobileMenuOpen)}
			aria-expanded={isMobileMenuOpen}
			aria-controls="mobile-menu"
			aria-label="Toggle menu"
		>
			{#if isMobileMenuOpen}
				<X size={24} />
			{:else}
				<Menu size={24} />
			{/if}
		</button>
	</div>

	<!-- Mobile Menu -->
	{#if isMobileMenuOpen}
		<div
			class="mobile-menu"
			id="mobile-menu"
			role="navigation"
			transition:slide={{ duration: 200 }}
		>
			<div class="mobile-search">
				<input
					type="text"
					bind:value={searchQuery}
					placeholder="Search recipes..."
					class="mobile-search-input"
				/>
			</div>
			{#each categories as category (category.id)}
				<a
					href={category.path}
					class="mobile-nav-item"
					class:active={$page.url.pathname === category.path}
					on:click={closeMenu}
				>
					{category.name}
				</a>
			{/each}
			<!-- Mobile Social Links -->
			<div class="mobile-social-links">
				<a href="/" class="social-icon facebook" aria-label="Facebook">
					<Facebook size={20} />
				</a>
				<a href="/" class="social-icon instagram" aria-label="Instagram">
					<Instagram size={20} />
				</a>
				<a href="/" class="social-icon twitter" aria-label="Twitter">
					<Twitter size={20} />
				</a>
				<a href="/" class="social-icon youtube" aria-label="YouTube">
					<Youtube size={20} />
				</a>
			</div>
			<!-- Mobile Auth Links -->
			<div class="mobile-auth-wrapper">
				<AuthLinks />
			</div>
		</div>
	{/if}
</nav>

<style lang="postcss">
	nav {
		@apply shadow-sm backdrop-blur-md;
		background: rgba(255, 255, 255, 0.8);
		left: 50%;
		transform: translateX(-50%);
	}

	nav.scrolled {
		@apply shadow-xl;
	}

	nav.dark {
		background: rgba(17, 17, 17, 0.8);
	}

	.logo {
		@apply relative z-50 transition-all duration-300 hover:-translate-y-0.5;
	}

	.logo-wrapper {
		@apply flex flex-col items-start;
	}

	.own {
		@apply bg-gradient-to-br from-red-500 via-orange-400 to-yellow-500 bg-clip-text text-3xl font-black text-transparent;
		text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
	}

	.chef-wrapper {
		@apply relative flex items-center;
	}

	.chef {
		@apply -mt-2 text-xl font-bold tracking-widest text-gray-800 transition-colors duration-300;
	}

	.chef.dark {
		@apply text-gray-100;
	}

	.utensils {
		@apply absolute -right-10 -top-1 flex space-x-2;
	}

	.knife,
	.fork {
		@apply text-lg transition-transform duration-300;
	}

	.logo:hover .knife {
		transform: rotate(-15deg) translateX(-2px);
	}

	.logo:hover .fork {
		transform: rotate(15deg) translateX(2px);
	}

	.nav-link {
		@apply relative px-3 py-2 text-sm font-medium;
		@apply text-gray-900 hover:text-orange-500 dark:text-gray-900 dark:hover:text-orange-400;
	}

	.nav-link.active {
		@apply text-orange-500 dark:text-orange-400;
	}

	.nav-link.dark {
		@apply text-gray-100;
		@apply hover:text-orange-400;
	}

	.dropdown-menu {
		@apply absolute left-0 top-full z-[101] mt-1 w-48 rounded-lg py-1 shadow-lg;
		@apply bg-white dark:bg-gray-800;
		@apply border border-gray-100 dark:border-gray-700;
		margin-top: 2px;
	}

	.dropdown-menu::before {
		content: '';
		@apply absolute -top-2 left-0 h-2 w-full;
	}

	.group:hover .dropdown-menu {
		display: block;
	}

	.relative {
		@apply z-40;
	}

	.dropdown-item {
		@apply block w-full px-4 py-2 text-left text-sm transition-colors duration-200;
		@apply text-gray-900 hover:bg-gray-100 hover:text-orange-500;
		@apply dark:text-gray-100 dark:hover:bg-gray-700 dark:hover:text-orange-400;
	}

	.dropdown-item:focus {
		@apply outline-none ring-2 ring-orange-500 dark:ring-orange-400;
	}

	.search-container {
		@apply relative flex items-center;
		width: 40px;
		transition: width 0.3s ease;
	}

	.search-container.open {
		width: 220px;
	}

	.search-input {
		@apply h-8 w-full rounded-full pl-4 pr-10 text-sm outline-none transition-all duration-300;
		@apply bg-gray-100 dark:bg-gray-800;
		@apply text-gray-900 dark:text-gray-100;
		@apply placeholder-gray-500 dark:placeholder-gray-400;
		opacity: 0;
		pointer-events: none;
	}

	.search-container.open .search-input {
		opacity: 1;
		pointer-events: auto;
	}

	.search-toggle {
		@apply absolute right-0 flex h-8 w-8 items-center justify-center rounded-full transition-colors duration-300;
		@apply text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800;
	}

	.social-links {
		@apply hidden items-center space-x-6 md:flex;
	}

	.social-icon {
		@apply flex h-8 w-8 items-center justify-center rounded-full transition-all duration-300;
	}

	.facebook {
		@apply text-[#316FF6] hover:bg-[#316FF6]/10;
	}

	.instagram {
		@apply text-[#d62976] hover:bg-[#d62976]/10;
	}

	.twitter {
		@apply text-[#1DA1F2] hover:bg-[#1DA1F2]/10;
	}

	.youtube {
		@apply text-[#FF0000] hover:bg-[#FF0000]/10;
	}

	.mobile-menu-button {
		@apply flex items-center rounded-lg p-2 transition-colors duration-300 lg:hidden;
		@apply text-gray-500 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800;
	}

	.mobile-menu {
		@apply px-4 pb-3 pt-2 shadow-lg lg:hidden;
		@apply bg-white dark:bg-gray-900;
	}

	.mobile-search {
		@apply px-3 py-2;
	}

	.mobile-search-input {
		@apply w-full rounded-full px-4 py-2;
		@apply bg-gray-100 dark:bg-gray-800;
		@apply text-gray-900 dark:text-gray-100;
		@apply placeholder-gray-500 dark:placeholder-gray-400;
	}

	.mobile-nav-item {
		@apply block px-3 py-2 text-base font-medium transition-colors duration-200;
		@apply text-gray-700 hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800;
	}

	.mobile-social-links {
		@apply flex justify-center space-x-6 px-3 py-4;
		@apply border-t border-gray-200 dark:border-gray-700;
	}

	.mobile-auth-wrapper {
		@apply px-3 py-4;
		@apply border-t border-gray-200 dark:border-gray-700;
	}
</style>



============================================================
File: ./src/components/Pagination/Pagination.svelte
Type: .svelte
============================================================

<!-- src/components/Pagination/Pagination.svelte -->
<script lang="ts">
	export let page: number;
	export let hasMore: boolean;

	function handlePageChange(newPage: number) {
		if ((newPage > page && hasMore) || (newPage < page && page > 1)) {
			window.history.pushState({}, '', `?page=${newPage}`);
		}
	}
</script>

<div class="pagination">
	<button
		class="page-button"
		class:disabled={page <= 1}
		on:click={() => handlePageChange(page - 1)}
	>
		Previous
	</button>
	<button class="page-button" class:disabled={!hasMore} on:click={() => handlePageChange(page + 1)}>
		Next
	</button>
</div>

<style lang="postcss">
	.pagination {
		@apply flex items-center justify-between;
	}

	.page-button {
		@apply rounded-lg px-6 py-2 text-sm font-semibold transition-all duration-200;
		@apply bg-orange-500 text-white hover:bg-orange-600;
		@apply disabled:cursor-not-allowed disabled:opacity-50;
	}

	.disabled {
		@apply pointer-events-none opacity-50;
	}
</style>



============================================================
File: ./src/components/QuickCategories/QuickCategories.svelte
Type: .svelte
============================================================

<!-- src/components/QuickCategories/QuickCategories.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Clock, Leaf, Coffee, Cake, Heart, Users } from 'lucide-svelte';

	const categories = [
		{
			id: 'quick',
			title: 'Quick & Easy',
			description: 'Ready in 30 minutes or less',
			icon: Clock,
			color: 'bg-orange-500',
			gradient: 'from-orange-500 to-red-500',
			count: 245
		},
		{
			id: 'vegetarian',
			title: 'Vegetarian',
			description: 'Plant-based delights',
			icon: Leaf,
			color: 'bg-green-500',
			gradient: 'from-green-500 to-emerald-500',
			count: 189
		},
		{
			id: 'breakfast',
			title: 'Breakfast',
			description: 'Start your day right',
			icon: Coffee,
			color: 'bg-blue-500',
			gradient: 'from-blue-500 to-indigo-500',
			count: 167
		},
		{
			id: 'desserts',
			title: 'Desserts',
			description: 'Sweet treats & bakes',
			icon: Cake,
			color: 'bg-pink-500',
			gradient: 'from-pink-500 to-rose-500',
			count: 203
		},
		{
			id: 'healthy',
			title: 'Healthy',
			description: 'Nutritious & delicious',
			icon: Heart,
			color: 'bg-purple-500',
			gradient: 'from-purple-500 to-violet-500',
			count: 178
		},
		{
			id: 'party',
			title: 'Party Food',
			description: 'Crowd-pleasing favorites',
			icon: Users,
			color: 'bg-yellow-500',
			gradient: 'from-yellow-500 to-amber-500',
			count: 156
		}
	];
</script>

<section class="quick-categories" class:dark={$theme === 'dark'}>
	<div class="section-header">
		<h2 class="title">Quick Recipe Categories</h2>
		<p class="subtitle">Find recipes by meal type</p>
	</div>

	<div class="categories-grid">
		{#each categories as category}
			<a href="/category/{category.id}" class="category-card" class:dark={$theme === 'dark'}>
				<div class="card-content bg-gradient-to-r {category.gradient}">
					<div class="icon-wrapper">
						<svelte:component this={category.icon} size={24} class="text-white" />
					</div>
					<div class="text-content">
						<h3 class="card-title">{category.title}</h3>
						<p class="card-description">{category.description}</p>
					</div>
					<div class="recipe-count">
						<span class="count">{category.count}</span>
						<span class="label">Recipes</span>
					</div>
					<div class="shine-effect"></div>
				</div>
			</a>
		{/each}
	</div>
</section>

<style lang="postcss">
	.quick-categories {
		@apply mx-auto my-16 max-w-7xl px-4;
	}

	.section-header {
		@apply mb-8 text-center;
	}

	.title {
		@apply mb-2 text-3xl font-bold text-gray-900 dark:text-white;
	}

	.subtitle {
		@apply text-gray-600 dark:text-gray-400;
	}

	.categories-grid {
		@apply grid gap-6;
		@apply grid-cols-1 sm:grid-cols-2 lg:grid-cols-3;
	}

	.category-card {
		@apply block overflow-hidden rounded-2xl;
		@apply transform transition-all duration-500;
		@apply hover:shadow-xl hover:shadow-black/5;
		@apply dark:hover:shadow-white/5;
	}

	.category-card:hover {
		transform: translateY(-4px) scale(1.01);
	}

	.category-card:hover .shine-effect {
		transform: translateX(100%);
	}

	.card-content {
		@apply relative flex items-center gap-4 p-6;
		@apply overflow-hidden;
	}

	.icon-wrapper {
		@apply flex h-12 w-12 items-center justify-center rounded-lg;
		@apply bg-white/20 backdrop-blur-sm;
	}

	.text-content {
		@apply flex-1;
	}

	.card-title {
		@apply text-lg font-semibold text-white;
	}

	.card-description {
		@apply text-sm text-white/90;
	}

	.recipe-count {
		@apply flex flex-col items-end text-white;
	}

	.count {
		@apply text-2xl font-bold;
	}

	.label {
		@apply text-xs text-white/90;
	}

	.shine-effect {
		@apply absolute inset-0;
		background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
		transform: translateX(-100%);
		transition: transform 0.8s;
	}

	/* Dark mode specific styles */
	.category-card.dark {
		@apply bg-gray-800;
	}

	.category-card.dark .card-content {
		@apply shadow-lg;
	}
</style>



============================================================
File: ./src/components/ThemeToggle/ThemeToggle.svelte
Type: .svelte
============================================================

<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Moon, Sun } from 'lucide-svelte';
</script>

<button type="button" class="container" on:click={() => ($theme = $theme === 'dark' ? 'light' : 'dark')} aria-label="Toggle Theme">
	<Moon class="icon moon" size={16} />
	<div class="ball" class:dark={$theme === 'dark'}></div>
	<Sun class="icon sun" size={16} />
</button>

<style lang="postcss">	
	.container {
		@apply relative flex h-[24px] w-[42px] cursor-pointer items-center justify-between rounded-full border border-gray-300 bg-white p-1 dark:bg-gray-800;
	}

	.ball {
		@apply absolute right-1 h-[15px] w-[15px] rounded-full bg-gray-200 transition-all duration-300;
	}

	.ball.dark {
		@apply left-1 bg-gray-700;
	}

	/* .icon {
		@apply text-gray-700 dark:text-gray-300;
	} */

	/* .moon {
		@apply text-gray-400;
	}

	.sun {
		@apply text-yellow-500;
	} */
</style>



============================================================
File: ./src/hooks.server.ts
Type: .ts
============================================================

// src/hooks.server.ts
import type { Handle } from '@sveltejs/kit';
import { sessionCookieName, validateSessionToken } from '$lib/server/auth';

export const handle: Handle = async ({ event, resolve }) => {
    const token = event.cookies.get(sessionCookieName);
    
    if (!token) {
        event.locals.user = null;
        event.locals.session = null;
        return resolve(event);
    }

    const { session, user } = await validateSessionToken(token);
    
    if (session && user) {
        event.locals.session = session;
        event.locals.user = user;
    } else {
        event.locals.session = null;
        event.locals.user = null;
        event.cookies.delete(sessionCookieName, { path: '/' });
    }

    return resolve(event);
};


============================================================
File: ./src/lib/auth/index.ts
Type: .ts
============================================================

// src/lib/auth/index.ts
import { goto } from '$app/navigation';
import { page } from '$app/stores';
import { get } from 'svelte/store';

export async function signIn(username: string, password: string) {
	try {
		const response = await fetch('/api/auth', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({ username, password })
		});

		const data = await response.json();

		if (!response.ok) {
			throw new Error(data.error || 'Authentication failed');
		}

		goto('/');
		return { success: true };
	} catch (error) {
		console.error('Sign in error:', error);
		return {
			success: false,
			error: error instanceof Error ? error.message : 'Authentication failed'
		};
	}
}

export async function signOut() {
	try {
		await fetch('/api/auth', {
			method: 'DELETE'
		});
		goto('/login');
	} catch (error) {
		console.error('Sign out error:', error);
	}
}

export function requireAuth() {
	const $page = get(page);
	if (!$page?.data?.session) {
		goto('/login');
		return false;
	}
	return true;
}



============================================================
File: ./src/lib/components/RichTextEditor.svelte
Type: .svelte
============================================================

<script lang="ts">
	import { onMount } from 'svelte';
	import 'quill/dist/quill.bubble.css';

	export let value = '';
	let element: HTMLDivElement;
	let quill: any;

	onMount(async () => {
		const Quill = (await import('quill')).default;
		quill = new Quill(element, {
			theme: 'bubble',
			placeholder: 'Share Your Recipe....'
		});

		quill.on('text-change', () => {
			value = quill.root.innerHTML;
		});
	});
</script>

<div bind:this={element} class="editor"/>

<style lang="postcss">
	.editor {
		@apply min-h-[400px] text-lg;
	}

	:global(.ql-editor.ql-blank::before) {
		@apply font-normal text-gray-400;
	}
</style>



============================================================
File: ./src/lib/index.ts
Type: .ts
============================================================

// place files you want to import through the `$lib` alias in this folder.



============================================================
File: ./src/lib/server/auth.ts
Type: .ts
============================================================

// src/lib/server/auth.ts - Clean Enhanced Version
import type { RequestEvent } from '@sveltejs/kit';
import { eq } from 'drizzle-orm';
import { sha256 } from '@oslojs/crypto/sha2';
import { encodeBase64url, encodeHexLowerCase } from '@oslojs/encoding';
import { hash, verify } from '@node-rs/argon2';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';

const DAY_IN_MS = 1000 * 60 * 60 * 24;

export const sessionCookieName = 'auth-session';

// ========================================
// SESSION MANAGEMENT
// ========================================

export function generateSessionToken(): string {
	const bytes = crypto.getRandomValues(new Uint8Array(18));
	const token = encodeBase64url(bytes);
	return token;
}

export function generateUserId(): string {
	const bytes = crypto.getRandomValues(new Uint8Array(15));
	return encodeBase64url(bytes);
}

export async function createSession(token: string, userId: string) {
	const sessionId = encodeHexLowerCase(sha256(new TextEncoder().encode(token)));
	const session: table.Session = {
		id: sessionId,
		userId,
		expiresAt: new Date(Date.now() + DAY_IN_MS * 30)
	};
	await db.insert(table.session).values(session);
	return session;
}

export async function validateSessionToken(token: string) {
	const sessionId = encodeHexLowerCase(sha256(new TextEncoder().encode(token)));
	const [result] = await db
		.select({
			// Use only fields that exist in your schema
			user: {
				id: table.user.id,
				username: table.user.username,
				age: table.user.age
				// Note: Removed fields that don't exist yet
			},
			session: table.session
		})
		.from(table.session)
		.innerJoin(table.user, eq(table.session.userId, table.user.id))
		.where(eq(table.session.id, sessionId));

	if (!result) {
		return { session: null, user: null };
	}
	const { session, user } = result;

	const sessionExpired = Date.now() >= session.expiresAt.getTime();
	if (sessionExpired) {
		await db.delete(table.session).where(eq(table.session.id, session.id));
		return { session: null, user: null };
	}

	const renewSession = Date.now() >= session.expiresAt.getTime() - DAY_IN_MS * 15;
	if (renewSession) {
		session.expiresAt = new Date(Date.now() + DAY_IN_MS * 30);
		await db
			.update(table.session)
			.set({ expiresAt: session.expiresAt })
			.where(eq(table.session.id, session.id));
	}

	return { session, user };
}

export async function invalidateSession(sessionId: string) {
	await db.delete(table.session).where(eq(table.session.id, sessionId));
}

export function setSessionTokenCookie(event: RequestEvent, token: string, expiresAt: Date) {
	event.cookies.set(sessionCookieName, token, {
		expires: expiresAt,
		path: '/',
		httpOnly: true,
		secure: process.env.NODE_ENV === 'production',
		sameSite: 'lax'
	});
}

export function deleteSessionTokenCookie(event: RequestEvent) {
	event.cookies.delete(sessionCookieName, {
		path: '/',
		httpOnly: true,
		secure: process.env.NODE_ENV === 'production',
		sameSite: 'lax'
	});
}

export type SessionValidationResult = Awaited<ReturnType<typeof validateSessionToken>>;

// ========================================
// VALIDATION FUNCTIONS
// ========================================

export function validateUsername(username: unknown): username is string {
	return (
		typeof username === 'string' &&
		username.length >= 3 &&
		username.length <= 31 &&
		/^[a-zA-Z0-9_]+$/.test(username)
	);
}

export function validatePassword(password: unknown): password is string {
	return (
		typeof password === 'string' &&
		password.length >= 6 &&
		password.length <= 255
	);
}

export function validateEmail(email: unknown): email is string {
	return (
		typeof email === 'string' &&
		email.length <= 320 &&
		/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)
	);
}

export function validateName(name: unknown): name is string {
	return (
		typeof name === 'string' &&
		name.length >= 1 &&
		name.length <= 50 &&
		/^[a-zA-Z\s'-]+$/.test(name.trim())
	);
}

// ========================================
// PASSWORD UTILITIES
// ========================================

export async function hashPassword(password: string): Promise<string> {
	return await hash(password, {
		memoryCost: 19456,
		timeCost: 2,
		outputLen: 32,
		parallelism: 1
	});
}

export async function verifyPassword(hash: string, password: string): Promise<boolean> {
	return await verify(hash, password, {
		memoryCost: 19456,
		timeCost: 2,
		outputLen: 32,
		parallelism: 1
	});
}


============================================================
File: ./src/lib/server/db/index.ts
Type: .ts
============================================================

import { drizzle } from 'drizzle-orm/postgres-js';
import postgres from 'postgres';
import { env } from '$env/dynamic/private';
if (!env.DATABASE_URL) throw new Error('DATABASE_URL is not set');
const client = postgres(env.DATABASE_URL);
export const db = drizzle(client);



============================================================
File: ./src/lib/server/db/schema.ts
Type: .ts
============================================================

// src/lib/server/db/schema.ts - ENTERPRISE VERSION
import { pgTable, serial, text, integer, timestamp, varchar, boolean, json, index } from 'drizzle-orm/pg-core';
import { relations } from 'drizzle-orm';

// ========================================
// CORE USER TABLES (Already exists)
// ========================================
export const user = pgTable('user', {
	id: text('id').primaryKey(),
	age: integer('age'),
	username: text('username').notNull().unique(),
	passwordHash: text('password_hash').notNull(),
	email: text('email').unique(),
	firstName: text('first_name'),
	lastName: text('last_name'),
	bio: text('bio'),
	profileImage: text('profile_image'),
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
	updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
});

export const session = pgTable('session', {
	id: text('id').primaryKey(),
	userId: text('user_id')
		.notNull()
		.references(() => user.id, { onDelete: 'cascade' }),
	expiresAt: timestamp('expires_at', { withTimezone: true, mode: 'date' }).notNull()
});

// ========================================
// RECIPE TAXONOMY TABLES
// ========================================
export const category = pgTable('category', {
	id: serial('id').primaryKey(),
	name: varchar('name', { length: 100 }).notNull().unique(),
	slug: varchar('slug', { length: 100 }).notNull().unique(),
	description: text('description'),
	image: text('image'),
	sortOrder: integer('sort_order').default(0),
	isActive: boolean('is_active').default(true),
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	slugIdx: index('category_slug_idx').on(table.slug),
	activeIdx: index('category_active_idx').on(table.isActive)
}));

export const cuisine = pgTable('cuisine', {
	id: serial('id').primaryKey(),
	name: varchar('name', { length: 100 }).notNull().unique(),
	slug: varchar('slug', { length: 100 }).notNull().unique(),
	description: text('description'),
	image: text('image'),
	sortOrder: integer('sort_order').default(0),
	isActive: boolean('is_active').default(true),
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	slugIdx: index('cuisine_slug_idx').on(table.slug),
	activeIdx: index('cuisine_active_idx').on(table.isActive)
}));

// ========================================
// CORE RECIPE TABLE
// ========================================
export const recipe = pgTable('recipe', {
	id: serial('id').primaryKey(),
	title: varchar('title', { length: 255 }).notNull(),
	slug: varchar('slug', { length: 255 }).notNull().unique(),
	description: text('description').notNull(),
	content: text('content'), // Rich text instructions (optional - we have steps table)

	// Recipe Metrics
	prepTime: integer('prep_time').notNull(), // minutes
	cookTime: integer('cook_time').notNull(), // minutes
	totalTime: integer('total_time').notNull(), // computed: prep + cook
	servings: integer('servings').notNull(),
	difficulty: varchar('difficulty', { length: 20 }).notNull(), // 'Easy', 'Medium', 'Hard'

	// Media
	featuredImage: text('featured_image'), // Main recipe image
	videoUrl: text('video_url'),

	// Relationships
	authorId: text('author_id')
		.notNull()
		.references(() => user.id, { onDelete: 'cascade' }),
	categoryId: integer('category_id')
		.references(() => category.id, { onDelete: 'set null' }),
	cuisineId: integer('cuisine_id')
		.references(() => cuisine.id, { onDelete: 'set null' }),

	// Content Status
	isPublished: boolean('is_published').default(false).notNull(),
	isDraft: boolean('is_draft').default(true).notNull(),

	// Analytics
	views: integer('views').default(0).notNull(),
	likesCount: integer('likes_count').default(0).notNull(),
	ratingsCount: integer('ratings_count').default(0).notNull(),
	averageRating: integer('average_rating').default(0), // Store as integer (x100) for precision

	// Timestamps
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
	updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
	publishedAt: timestamp('published_at', { withTimezone: true, mode: 'date' })
}, (table) => ({
	// Performance Indexes - Big Tech Style!
	slugIdx: index('recipe_slug_idx').on(table.slug),
	authorIdx: index('recipe_author_idx').on(table.authorId),
	categoryIdx: index('recipe_category_idx').on(table.categoryId),
	cuisineIdx: index('recipe_cuisine_idx').on(table.cuisineId),
	publishedIdx: index('recipe_published_idx').on(table.isPublished, table.publishedAt),
	popularIdx: index('recipe_popular_idx').on(table.likesCount, table.averageRating),
	searchIdx: index('recipe_search_idx').on(table.title, table.description)
}));

// ========================================
// RECIPE INGREDIENTS (Grouped & Structured)
// ========================================
export const recipeIngredient = pgTable('recipe_ingredient', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),

	// Grouping (e.g., "For the sauce", "For the garnish")
	groupName: varchar('group_name', { length: 100 }), // Optional grouping
	groupOrder: integer('group_order').default(0), // Order of groups

	// Ingredient Details
	name: varchar('name', { length: 255 }).notNull(), // "all-purpose flour"
	amount: varchar('amount', { length: 50 }), // "2" or "1.5"
	unit: varchar('unit', { length: 50 }), // "cups", "tbsp", "kg"
	preparation: varchar('preparation', { length: 100 }), // "chopped", "diced", "melted"
	notes: text('notes'), // "room temperature", "organic preferred"

	// Ordering
	itemOrder: integer('item_order').default(0), // Order within group

	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('ingredient_recipe_idx').on(table.recipeId),
	orderIdx: index('ingredient_order_idx').on(table.recipeId, table.groupOrder, table.itemOrder)
}));

// ========================================
// RECIPE INSTRUCTIONS (Step-by-Step)
// ========================================
export const recipeInstruction = pgTable('recipe_instruction', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),

	stepNumber: integer('step_number').notNull(), // 1, 2, 3...
	title: varchar('title', { length: 200 }), // Optional step title
	content: text('content').notNull(), // Step instructions

	// Optional Media for Steps
	image: text('image'), // Step-specific image
	videoUrl: text('video_url'), // Step-specific video

	// Timing (optional)
	estimatedTime: integer('estimated_time'), // minutes for this step
	temperature: varchar('temperature', { length: 50 }), // "350¬∞F", "medium heat"

	// Tips & Notes
	tips: text('tips'), // Chef tips for this step

	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('instruction_recipe_idx').on(table.recipeId),
	stepIdx: index('instruction_step_idx').on(table.recipeId, table.stepNumber)
}));

// ========================================
// RECIPE MEDIA GALLERY
// ========================================
export const recipeImage = pgTable('recipe_image', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),

	url: text('url').notNull(),
	alt: text('alt'), // Accessibility text
	caption: text('caption'), // User-provided caption

	// Image Metadata
	width: integer('width'),
	height: integer('height'),
	fileSize: integer('file_size'), // bytes
	mimeType: varchar('mime_type', { length: 50 }),

	// Ordering & Status
	sortOrder: integer('sort_order').default(0),
	isFeatured: boolean('is_featured').default(false),

	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('image_recipe_idx').on(table.recipeId),
	orderIdx: index('image_order_idx').on(table.recipeId, table.sortOrder)
}));

// ========================================
// TAGGING SYSTEM
// ========================================
export const tag = pgTable('tag', {
	id: serial('id').primaryKey(),
	name: varchar('name', { length: 50 }).notNull().unique(),
	slug: varchar('slug', { length: 50 }).notNull().unique(),
	description: text('description'),
	color: varchar('color', { length: 7 }), // hex color
	usageCount: integer('usage_count').default(0), // Denormalized for performance
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	slugIdx: index('tag_slug_idx').on(table.slug),
	popularIdx: index('tag_popular_idx').on(table.usageCount)
}));

export const recipeTag = pgTable('recipe_tag', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),
	tagId: integer('tag_id')
		.notNull()
		.references(() => tag.id, { onDelete: 'cascade' }),
	addedAt: timestamp('added_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('recipe_tag_recipe_idx').on(table.recipeId),
	tagIdx: index('recipe_tag_tag_idx').on(table.tagId),
	uniqueIdx: index('recipe_tag_unique_idx').on(table.recipeId, table.tagId)
}));

// ========================================
// RECIPE TIPS (Separate from instructions)
// ========================================
export const recipeTip = pgTable('recipe_tip', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),

	content: text('content').notNull(),
	category: varchar('category', { length: 50 }), // 'chef_tip', 'storage', 'variation'
	sortOrder: integer('sort_order').default(0),

	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('tip_recipe_idx').on(table.recipeId),
	orderIdx: index('tip_order_idx').on(table.recipeId, table.sortOrder)
}));

// ========================================
// SOCIAL FEATURES (Instagram-style)
// ========================================
export const recipeLike = pgTable('recipe_like', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),
	userId: text('user_id')
		.notNull()
		.references(() => user.id, { onDelete: 'cascade' }),
	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('like_recipe_idx').on(table.recipeId),
	userIdx: index('like_user_idx').on(table.userId),
	uniqueIdx: index('like_unique_idx').on(table.recipeId, table.userId)
}));

export const recipeRating = pgTable('recipe_rating', {
	id: serial('id').primaryKey(),
	recipeId: integer('recipe_id')
		.notNull()
		.references(() => recipe.id, { onDelete: 'cascade' }),
	userId: text('user_id')
		.notNull()
		.references(() => user.id, { onDelete: 'cascade' }),

	rating: integer('rating').notNull(), // 1-5 stars
	review: text('review'), // Optional written review

	createdAt: timestamp('created_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull(),
	updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'date' }).defaultNow().notNull()
}, (table) => ({
	recipeIdx: index('rating_recipe_idx').on(table.recipeId),
	userIdx: index('rating_user_idx').on(table.userId),
	ratingIdx: index('rating_value_idx').on(table.rating),
	uniqueIdx: index('rating_unique_idx').on(table.recipeId, table.userId)
}));

// ========================================
// DRIZZLE RELATIONS (Type-Safe Queries)
// ========================================
export const userRelations = relations(user, ({ many }) => ({
	recipes: many(recipe),
	likes: many(recipeLike),
	ratings: many(recipeRating)
}));

export const recipeRelations = relations(recipe, ({ one, many }) => ({
	author: one(user, {
		fields: [recipe.authorId],
		references: [user.id]
	}),
	category: one(category, {
		fields: [recipe.categoryId],
		references: [category.id]
	}),
	cuisine: one(cuisine, {
		fields: [recipe.cuisineId],
		references: [cuisine.id]
	}),
	ingredients: many(recipeIngredient),
	instructions: many(recipeInstruction),
	images: many(recipeImage),
	tags: many(recipeTag),
	tips: many(recipeTip),
	likes: many(recipeLike),
	ratings: many(recipeRating)
}));

export const categoryRelations = relations(category, ({ many }) => ({
	recipes: many(recipe)
}));

export const cuisineRelations = relations(cuisine, ({ many }) => ({
	recipes: many(recipe)
}));

export const recipeIngredientRelations = relations(recipeIngredient, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeIngredient.recipeId],
		references: [recipe.id]
	})
}));

export const recipeInstructionRelations = relations(recipeInstruction, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeInstruction.recipeId],
		references: [recipe.id]
	})
}));

export const recipeImageRelations = relations(recipeImage, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeImage.recipeId],
		references: [recipe.id]
	})
}));

export const tagRelations = relations(tag, ({ many }) => ({
	recipes: many(recipeTag)
}));

export const recipeTagRelations = relations(recipeTag, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeTag.recipeId],
		references: [recipe.id]
	}),
	tag: one(tag, {
		fields: [recipeTag.tagId],
		references: [tag.id]
	})
}));

export const recipeTipRelations = relations(recipeTip, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeTip.recipeId],
		references: [recipe.id]
	})
}));

export const recipeLikeRelations = relations(recipeLike, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeLike.recipeId],
		references: [recipe.id]
	}),
	user: one(user, {
		fields: [recipeLike.userId],
		references: [user.id]
	})
}));

export const recipeRatingRelations = relations(recipeRating, ({ one }) => ({
	recipe: one(recipe, {
		fields: [recipeRating.recipeId],
		references: [recipe.id]
	}),
	user: one(user, {
		fields: [recipeRating.userId],
		references: [user.id]
	})
}));

// ========================================
// TYPESCRIPT TYPES (Full Type Safety)
// ========================================
export type User = typeof user.$inferSelect;
export type NewUser = typeof user.$inferInsert;

export type Recipe = typeof recipe.$inferSelect;
export type NewRecipe = typeof recipe.$inferInsert;

export type Category = typeof category.$inferSelect;
export type NewCategory = typeof category.$inferInsert;

export type Cuisine = typeof cuisine.$inferSelect;
export type NewCuisine = typeof cuisine.$inferInsert;

export type RecipeIngredient = typeof recipeIngredient.$inferSelect;
export type NewRecipeIngredient = typeof recipeIngredient.$inferInsert;

export type RecipeInstruction = typeof recipeInstruction.$inferSelect;
export type NewRecipeInstruction = typeof recipeInstruction.$inferInsert;

export type RecipeImage = typeof recipeImage.$inferSelect;
export type NewRecipeImage = typeof recipeImage.$inferInsert;

export type Tag = typeof tag.$inferSelect;
export type NewTag = typeof tag.$inferInsert;

export type RecipeTag = typeof recipeTag.$inferSelect;
export type NewRecipeTag = typeof recipeTag.$inferInsert;

export type RecipeTip = typeof recipeTip.$inferSelect;
export type NewRecipeTip = typeof recipeTip.$inferInsert;

export type RecipeLike = typeof recipeLike.$inferSelect;
export type NewRecipeLike = typeof recipeLike.$inferInsert;

export type RecipeRating = typeof recipeRating.$inferSelect;
export type NewRecipeRating = typeof recipeRating.$inferInsert;

export type Session = typeof session.$inferSelect;

// ========================================
// COMPLEX QUERY TYPES (API Response Types)
// ========================================
export type RecipeWithDetails = Recipe & {
	author: Pick<User, 'id' | 'username' | 'firstName' | 'lastName' | 'profileImage'>;
	category: Category | null;
	cuisine: Cuisine | null;
	ingredients: (RecipeIngredient & { groupName?: string })[];
	instructions: RecipeInstruction[];
	images: RecipeImage[];
	tips: RecipeTip[];
	tags: (Tag & { pivot: RecipeTag })[];
	stats: {
		likesCount: number;
		ratingsCount: number;
		averageRating: number;
		views: number;
		userLiked?: boolean;
		userRating?: number;
	};
};

export type RecipeCard = Pick<Recipe,
	'id' | 'title' | 'slug' | 'description' | 'featuredImage' |
	'prepTime' | 'cookTime' | 'servings' | 'difficulty' |
	'likesCount' | 'averageRating' | 'createdAt'
> & {
	author: Pick<User, 'id' | 'username' | 'profileImage'>;
	category: Pick<Category, 'id' | 'name' | 'slug'> | null;
	tags: Pick<Tag, 'id' | 'name' | 'slug'>[];
};


============================================================
File: ./src/lib/stores/theme.ts
Type: .ts
============================================================

// src/lib/stores/theme.ts
import { browser } from '$app/environment';
import { writable } from 'svelte/store';

const defaultValue = 'light';
const initialValue = browser
	? (window.localStorage.getItem('theme') ?? defaultValue)
	: defaultValue;

export const theme = writable<string>(initialValue);

if (browser) {
	theme.subscribe((value) => {
		window.localStorage.setItem('theme', value);
		document.documentElement.setAttribute('data-theme', value);
		document.documentElement.classList.toggle('dark', value === 'dark');
	});
}



============================================================
File: ./src/lib/styles/components.css
Type: .css
============================================================




============================================================
File: ./src/lib/styles/themes.css
Type: .css
============================================================

:root {
	/* Main Brand Colors */
	--brand-primary: #ff4b6e; /* Vibrant Coral - for main actions & emphasis */
	--brand-secondary: #ffb156; /* Warm Orange - for secondary elements */
	--brand-accent: #41e9c3; /* Fresh Mint - for accents & highlights */

	/* Background Colors */
	--bg-primary: #ffffff; /* Main background */
	--bg-secondary: #f8f9fc; /* Secondary background */
	--bg-tertiary: #f1f4f9; /* Tertiary background */

	/* Text Colors */
	--text-primary: #1a1f36; /* Main text */
	--text-secondary: #4f566b; /* Secondary text */
	--text-tertiary: #8792a2; /* Tertiary text */

	/* Gradients */
	--gradient-primary: linear-gradient(135deg, #ff4b6e, #ffb156);
	--gradient-hover: linear-gradient(135deg, #ff6b85, #ffc278);

	/* Shadows */
	--shadow-sm: 0 2px 8px rgba(26, 31, 54, 0.06);
	--shadow-md: 0 4px 16px rgba(26, 31, 54, 0.08);
	--shadow-lg: 0 8px 24px rgba(26, 31, 54, 0.12);
}

.dark {
	/* Dark mode colors */
	--bg-primary: #131620;
	--bg-secondary: #1c1f2e;
	--bg-tertiary: #252a3d;

	--text-primary: #f1f4f9;
	--text-secondary: #b4bcd0;
	--text-tertiary: #8792a2;

	--shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.2);
	--shadow-md: 0 4px 16px rgba(0, 0, 0, 0.24);
	--shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.32);
}

/* Common Component Styles */
.card {
	background-color: var(--bg-primary);
	box-shadow: var(--shadow-sm);
	transition: all 0.3s ease;
}

.card:hover {
	box-shadow: var(--shadow-md);
	transform: translateY(-2px);
}

.button-primary {
	background: var(--gradient-primary);
	color: white;
	transition: all 0.3s ease;
}

.button-primary:hover {
	background: var(--gradient-hover);
	box-shadow: 0 4px 12px rgba(255, 75, 110, 0.3);
}



============================================================
File: ./src/lib/utils/clickOutside.ts
Type: .ts
============================================================

// src/lib/utils/clickOutside.ts
export function clickOutside(node: HTMLElement, callback: () => void) {
	const handleClick = (event: MouseEvent) => {
		if (node && !node.contains(event.target as Node)) {
			callback();
		}
	};

	document.addEventListener('click', handleClick, true);

	return {
		destroy() {
			document.removeEventListener('click', handleClick, true);
		},
		update(newCallback: () => void) {
			callback = newCallback;
		}
	};
}



============================================================
File: ./src/routes/+layout.server.ts
Type: .ts
============================================================

import type { LayoutServerLoad } from './$types';

export const load: LayoutServerLoad = async ({ locals }) => {
	return {
		session: locals.session ?? null, // Ensures a value is always returned
		user: locals.user ?? null
	} satisfies LayoutServerLoad;
};



============================================================
File: ./src/routes/+layout.svelte
Type: .svelte
============================================================

<!-- src/routes/+layout.svelte -->
<script lang="ts">
	import '../app.css';
	import Navbar from '../components/Navbar/Navbar.svelte';
	import Footer from '../components/Footer/Footer.svelte';
	import { theme } from '$lib/stores/theme';

	export let data;
</script>

<div data-theme={$theme}>
	<Navbar />
	<main class="pt-20">
		<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
			<slot />
		</div>
	</main>
	<Footer />
</div>



============================================================
File: ./src/routes/+layout.ts
Type: .ts
============================================================

export const load = () => {
	return {
		title: 'Own Chef - Share Your Recipes',
		description: 'A community for sharing and discovering amazing recipes'
	};
};



============================================================
File: ./src/routes/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import Featured from '../components/Featured/Featured.svelte';
	import CardList from '../components/CardList/CardList.svelte';
	import CategoryList from '../components/CategoryList/CategoryList.svelte';
	import Menu from '../components/Menu/Menu.svelte';
	import QuickCategories from '../components/QuickCategories/QuickCategories.svelte';
</script>

<!-- This should be the first section -->
<Featured />
<QuickCategories />

<div class="home-content">
	<!-- Popular Categories -->
	<CategoryList />

	<!-- Main Grid Layout -->
	<div class="content-grid">
		<!-- Card List Section -->
		<div class="main-content">
			<CardList />
		</div>

		<!-- Sidebar/Menu Section -->
		<aside class="sidebar">
			<Menu />
		</aside>
	</div>
</div>

<style lang="postcss">
	.home-content {
		@apply mx-auto max-w-7xl px-4 py-8;
	}

	.content-grid {
		@apply mt-8 grid gap-8;
		@apply lg:grid-cols-[1fr_300px];
	}

	.main-content {
		@apply w-full;
	}

	.sidebar {
		@apply w-full lg:w-[300px];
	}
</style>



============================================================
File: ./src/routes/about/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/about/+page.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Users, Heart, Share2, Book, Award, Coffee } from 'lucide-svelte';

	const stats = [
		{ label: 'Active Users', value: '50K+' },
		{ label: 'Recipes Shared', value: '10K+' },
		{ label: 'Professional Chefs', value: '500+' },
		{ label: 'Countries', value: '120+' }
	];

	const features = [
		{
			icon: Users,
			title: 'Community Driven',
			description: 'Join a vibrant community of food lovers sharing their culinary experiences.'
		},
		{
			icon: Heart,
			title: 'Curated Content',
			description: 'Every recipe is tested and verified by our expert team of chefs.'
		},
		{
			icon: Share2,
			title: 'Easy Sharing',
			description: 'Share your favorite recipes with friends and family effortlessly.'
		}
	];

	const teamMembers = [
		{
			name: 'Sarah Chen',
			role: 'Head Chef',
			image: '/images/team/lisa.jpeg',
			bio: 'Former Michelin-star restaurant chef with 15 years of experience.'
		},
		{
			name: 'Mike Rodriguez',
			role: 'Food Photographer',
			image: '/images/team/mike.jpeg',
			bio: 'Award-winning food photographer and styling expert.'
		},
		{
			name: 'Emma Williams',
			role: 'Recipe Curator',
			image: '/images/team/emma.jpg',
			bio: 'Culinary school instructor and cookbook author.'
		}
	];
</script>

<div class="about-container" class:dark={$theme === 'dark'}>
	<!-- Hero Section -->
	<section class="hero-section">
		<div class="hero-content">
			<h1 class="hero-title">
				Empowering Home Chefs with
				<span class="highlight">Authentic Recipes</span>
			</h1>
			<p class="hero-text">
				Own Chef is a community-driven platform where passionate home cooks and professional chefs
				come together to share, learn, and celebrate the art of cooking.
			</p>
		</div>
		<div class="stats-grid">
			{#each stats as stat}
				<div class="stat-card">
					<span class="stat-value">{stat.value}</span>
					<span class="stat-label">{stat.label}</span>
				</div>
			{/each}
		</div>
	</section>

	<!-- Mission Section -->
	<section class="mission-section">
		<div class="section-content">
			<h2 class="section-title">Our Mission</h2>
			<p class="section-text">
				We believe that great cooking should be accessible to everyone. Our mission is to preserve
				and share authentic recipes from around the world, making it easy for anyone to create
				delicious meals at home.
			</p>
			<div class="features-grid">
				{#each features as feature}
					<div class="feature-card">
						<div class="icon-wrapper">
							<svelte:component this={feature.icon} size={24} />
						</div>
						<h3 class="feature-title">{feature.title}</h3>
						<p class="feature-text">{feature.description}</p>
					</div>
				{/each}
			</div>
		</div>
	</section>

	<!-- Team Section -->
	<section class="team-section">
		<h2 class="section-title">Meet Our Team</h2>
		<p class="section-text">
			We're a diverse team of chefs, food photographers, and culinary enthusiasts dedicated to
			making your cooking journey enjoyable and successful.
		</p>
		<div class="team-grid">
			{#each teamMembers as member}
				<div class="team-card">
					<div class="member-image-wrapper">
						<img src={member.image} alt={member.name} class="member-image" />
					</div>
					<div class="member-info">
						<h3 class="member-name">{member.name}</h3>
						<span class="member-role">{member.role}</span>
						<p class="member-bio">{member.bio}</p>
					</div>
				</div>
			{/each}
		</div>
	</section>

	<!-- Join Section -->
	<section class="join-section">
		<div class="join-content">
			<h2 class="join-title">Join Our Culinary Community</h2>
			<p class="join-text">
				Whether you're a home cook or a professional chef, there's a place for you in our community.
				Start sharing your recipes and culinary journey today.
			</p>
			<div class="button-group">
				<a href="/signup" class="primary-button"> Get Started </a>
				<a href="/contact" class="secondary-button"> Contact Us </a>
			</div>
		</div>
	</section>
</div>

<style lang="postcss">
	.about-container {
		@apply mx-auto max-w-7xl px-4 py-12;
	}

	.hero-section {
		@apply mb-24 text-center;
	}

	.hero-content {
		@apply mx-auto max-w-3xl;
	}

	.hero-title {
		@apply mb-6 text-4xl font-bold leading-tight sm:text-5xl;
		@apply text-gray-900 dark:text-white;
	}

	.highlight {
		@apply bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent;
	}

	.hero-text {
		@apply mx-auto mb-12 max-w-2xl text-lg text-gray-600 dark:text-gray-400;
	}

	.stats-grid {
		@apply grid gap-6 sm:grid-cols-2 lg:grid-cols-4;
	}

	.stat-card {
		@apply flex flex-col items-center rounded-xl bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.stat-value {
		@apply mb-2 text-3xl font-bold text-orange-500;
	}

	.stat-label {
		@apply text-sm text-gray-600 dark:text-gray-400;
	}

	.mission-section {
		@apply mb-24 rounded-3xl bg-gradient-to-r from-orange-500 to-red-500 py-24 text-white;
	}

	.section-content {
		@apply mx-auto max-w-7xl px-4;
	}

	.section-title {
		@apply mb-6 text-center text-3xl font-bold sm:text-4xl;
	}

	.section-text {
		@apply mx-auto mb-12 max-w-2xl text-center text-lg;
	}

	.features-grid {
		@apply grid gap-8 sm:grid-cols-2 lg:grid-cols-3;
	}

	.feature-card {
		@apply rounded-xl bg-white/10 p-6 backdrop-blur-sm;
	}

	.icon-wrapper {
		@apply mb-4 inline-flex rounded-full bg-white/20 p-3;
	}

	.feature-title {
		@apply mb-2 text-xl font-semibold;
	}

	.feature-text {
		@apply text-white/90;
	}

	.team-section {
		@apply mb-24 py-12;
	}

	.team-grid {
		@apply grid gap-8 sm:grid-cols-2 lg:grid-cols-3;
	}

	.team-card {
		@apply overflow-hidden rounded-xl bg-white shadow-sm transition-all hover:shadow-lg dark:bg-gray-800;
	}

	.member-image-wrapper {
		@apply aspect-[4/3] w-full overflow-hidden;
	}

	.member-image {
		@apply h-full w-full object-cover;
	}

	.member-info {
		@apply p-6;
	}

	.member-name {
		@apply mb-1 text-xl font-semibold text-gray-900 dark:text-white;
	}

	.member-role {
		@apply mb-4 block text-sm text-orange-500;
	}

	.member-bio {
		@apply text-gray-600 dark:text-gray-400;
	}

	.join-section {
		@apply rounded-3xl bg-gray-50 py-16 text-center dark:bg-gray-900;
	}

	.join-content {
		@apply mx-auto max-w-2xl px-4;
	}

	.join-title {
		@apply mb-4 text-3xl font-bold text-gray-900 dark:text-white;
	}

	.join-text {
		@apply mb-8 text-gray-600 dark:text-gray-400;
	}

	.button-group {
		@apply flex flex-wrap justify-center gap-4;
	}

	.primary-button {
		@apply rounded-lg bg-gradient-to-r from-orange-500 to-red-500 px-6 py-3 font-semibold text-white transition-all hover:opacity-90;
	}

	.secondary-button {
		@apply rounded-lg bg-white px-6 py-3 font-semibold text-gray-900 transition-all hover:bg-gray-50 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-700;
	}
</style>



============================================================
File: ./src/routes/api/auth/+server.ts
Type: .ts
============================================================

// src/routes/api/auth/+server.ts - Complete Simple Version
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import * as auth from '$lib/server/auth';
import { eq } from 'drizzle-orm';

// POST = Register new user
export const POST: RequestHandler = async ({ request, cookies }) => {
	try {
		const { username, password } = await request.json();

		// Validate input
		if (!auth.validateUsername(username) || !auth.validatePassword(password)) {
			return json({ error: 'Invalid username or password format' }, { status: 400 });
		}

		// Check if username exists
		const [existing] = await db
			.select()
			.from(table.user)
			.where(eq(table.user.username, username))
			.limit(1);

		if (existing) {
			return json({ error: 'Username already exists' }, { status: 409 });
		}

		// Create user
		const userId = auth.generateUserId();
		const passwordHash = await auth.hashPassword(password);

		await db.insert(table.user).values({
			id: userId,
			username,
			passwordHash,
			age: null
		});

		// Create session
		const sessionToken = auth.generateSessionToken();
		const session = await auth.createSession(sessionToken, userId);
		auth.setSessionTokenCookie({ cookies } as any, sessionToken, session.expiresAt);

		console.log(`[AUTH] User registered and logged in: ${username}`);

		return json({
			success: true,
			message: 'User created and logged in',
			data: { id: userId, username }
		});

	} catch (error) {
		console.error('[AUTH] Registration error:', error);
		return json({ error: 'Registration failed' }, { status: 500 });
	}
};

// PUT = Login existing user
export const PUT: RequestHandler = async ({ request, cookies }) => {
	try {
		const { username, password } = await request.json();

		// Validate input
		if (!username || !password) {
			return json({ error: 'Username and password required' }, { status: 400 });
		}

		// Find user
		const [user] = await db
			.select()
			.from(table.user)
			.where(eq(table.user.username, username))
			.limit(1);

		if (!user) {
			return json({ error: 'Invalid credentials' }, { status: 401 });
		}

		// Verify password
		const validPassword = await auth.verifyPassword(user.passwordHash, password);
		if (!validPassword) {
			return json({ error: 'Invalid credentials' }, { status: 401 });
		}

		// Create session
		const sessionToken = auth.generateSessionToken();
		const session = await auth.createSession(sessionToken, user.id);
		auth.setSessionTokenCookie({ cookies } as any, sessionToken, session.expiresAt);

		console.log(`[AUTH] User logged in: ${username}`);

		return json({
			success: true,
			message: 'Login successful',
			data: { id: user.id, username: user.username }
		});

	} catch (error) {
		console.error('[AUTH] Login error:', error);
		return json({ error: 'Login failed' }, { status: 500 });
	}
};

// GET = Get current user info
export const GET: RequestHandler = async ({ locals }) => {
	try {
		if (!locals.user) {
			return json({ error: 'Not authenticated' }, { status: 401 });
		}

		// Return current user data (excluding password)
		const userData = {
			id: locals.user.id,
			username: locals.user.username,
			age: locals.user.age
		};

		return json({
			success: true,
			message: 'User data retrieved',
			data: userData
		});

	} catch (error) {
		console.error('[AUTH] Get user error:', error);
		return json({ error: 'Failed to get user data' }, { status: 500 });
	}
};

// DELETE = Logout
export const DELETE: RequestHandler = async ({ locals, cookies }) => {
	try {
		if (locals.session) {
			await auth.invalidateSession(locals.session.id);
			console.log(`[AUTH] Session invalidated: ${locals.session.id}`);
		}

		// Clear session cookie
		auth.deleteSessionTokenCookie({ cookies } as any);

		return json({
			success: true,
			message: 'Logout successful'
		});

	} catch (error) {
		console.error('[AUTH] Logout error:', error);
		return json({ error: 'Logout failed' }, { status: 500 });
	}
};


============================================================
File: ./src/routes/api/categories/+server.ts
Type: .ts
============================================================

// src/routes/api/categories/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import { eq, asc } from 'drizzle-orm';

// ========================================
// TYPES & INTERFACES
// ========================================

interface ApiResponse<T = any> {
    success: boolean;
    message?: string;
    data?: T;
    error?: string;
    timestamp: string;
}

interface CategoryResponse {
    id: number;
    name: string;
    slug: string;
    description: string | null;
    image: string | null;
    sortOrder: number;
    isActive: boolean;
    recipeCount: number;
    createdAt: Date;
}

// ========================================
// UTILITY FUNCTIONS
// ========================================

function createSuccessResponse<T>(data: T, message?: string): ApiResponse<T> {
    return {
        success: true,
        message,
        data,
        timestamp: new Date().toISOString()
    };
}

function createErrorResponse(error: string, statusCode: number = 500): Response {
    const response: ApiResponse = {
        success: false,
        error,
        timestamp: new Date().toISOString()
    };

    return json(response, { status: statusCode });
}

// ========================================
// API HANDLERS
// ========================================

/**
 * GET /api/categories
 * Returns all active categories with recipe counts, ordered by sortOrder
 */
export const GET: RequestHandler = async () => {
    try {
        console.log('[API] GET /api/categories - Fetching categories...');

        // Query active categories ordered by sortOrder, then name
        const categories = await db
            .select({
                id: table.category.id,
                name: table.category.name,
                slug: table.category.slug,
                description: table.category.description,
                image: table.category.image,
                sortOrder: table.category.sortOrder,
                isActive: table.category.isActive,
                createdAt: table.category.createdAt,
                // We'll add recipe count later with a more complex query if needed
                recipeCount: 0 // Placeholder for now
            })
            .from(table.category)
            .where(eq(table.category.isActive, true)) // Only active categories
            .orderBy(asc(table.category.sortOrder), asc(table.category.name));

        console.log(`[API] Found ${categories.length} active categories`);

        // Transform the data to match our response interface
        const categoryResponse: CategoryResponse[] = categories.map(category => ({
            id: category.id,
            name: category.name,
            slug: category.slug,
            description: category.description,
            image: category.image,
            sortOrder: category.sortOrder,
            isActive: category.isActive,
            recipeCount: category.recipeCount,
            createdAt: category.createdAt
        }));

        return json(createSuccessResponse(categoryResponse, 'Categories fetched successfully'));

    } catch (error) {
        console.error('[API] Error fetching categories:', error);

        return createErrorResponse(
            'Failed to fetch categories. Please try again later.',
            500
        );
    }
};

/**
 * POST /api/categories
 * Creates a new category (Admin only)
 */
export const POST: RequestHandler = async ({ request, locals }) => {
    try {
        // Check authentication
        if (!locals.user) {
            return createErrorResponse('Authentication required', 401);
        }

        // For now, we'll skip admin check - add later if needed
        // if (!locals.user.isAdmin) {
        //   return createErrorResponse('Admin access required', 403);
        // }

        console.log('[API] POST /api/categories - Creating new category...');

        // Parse request body
        const requestData = await request.json();

        // Basic validation
        if (!requestData.name || typeof requestData.name !== 'string') {
            return createErrorResponse('Category name is required', 400);
        }

        if (requestData.name.trim().length < 2) {
            return createErrorResponse('Category name must be at least 2 characters', 400);
        }

        if (requestData.name.trim().length > 100) {
            return createErrorResponse('Category name cannot exceed 100 characters', 400);
        }

        // Generate slug from name
        const slug = requestData.name
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '')
            .replace(/[\s_-]+/g, '-')
            .replace(/^-+|-+$/g, '');

        if (slug.length > 100) {
            return createErrorResponse('Generated slug is too long', 400);
        }

        // Check if category with this slug already exists
        const existingCategory = await db
            .select({ id: table.category.id })
            .from(table.category)
            .where(eq(table.category.slug, slug))
            .limit(1);

        if (existingCategory.length > 0) {
            return createErrorResponse('A category with this name already exists', 409);
        }

        // Prepare category data with all fields
        const categoryData = {
            name: requestData.name.trim(),
            slug: slug,
            description: requestData.description?.trim() || null,
            image: requestData.image?.trim() || null,
            sortOrder: requestData.sortOrder ? parseInt(requestData.sortOrder) : 0,
            isActive: requestData.isActive !== undefined ? requestData.isActive : true
        };

        // Validate sortOrder
        if (isNaN(categoryData.sortOrder)) {
            return createErrorResponse('Sort order must be a valid number', 400);
        }

        // Create the category
        const [newCategory] = await db
            .insert(table.category)
            .values(categoryData)
            .returning({
                id: table.category.id,
                name: table.category.name,
                slug: table.category.slug,
                description: table.category.description,
                image: table.category.image,
                sortOrder: table.category.sortOrder,
                isActive: table.category.isActive,
                createdAt: table.category.createdAt
            });

        console.log(`[API] Created category: ${newCategory.name} (ID: ${newCategory.id})`);

        const categoryResponse: CategoryResponse = {
            ...newCategory,
            recipeCount: 0
        };

        return json(
            createSuccessResponse(categoryResponse, 'Category created successfully'),
            { status: 201 }
        );

    } catch (error) {
        console.error('[API] Error creating category:', error);

        // Handle unique constraint violations
        if (error instanceof Error && error.message.includes('unique')) {
            return createErrorResponse('A category with this name already exists', 409);
        }

        return createErrorResponse(
            'Failed to create category. Please try again later.',
            500
        );
    }
};


============================================================
File: ./src/routes/api/cuisines/+server.ts
Type: .ts
============================================================

// src/routes/api/cuisines/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import { eq, asc } from 'drizzle-orm';

// ========================================
// TYPES & INTERFACES
// ========================================

interface ApiResponse<T = any> {
    success: boolean;
    message?: string;
    data?: T;
    error?: string;
    timestamp: string;
}

interface CuisineResponse {
    id: number;
    name: string;
    slug: string;
    description: string | null;
    image: string | null;
    sortOrder: number;
    isActive: boolean;
    recipeCount: number;
    createdAt: Date;
}

// ========================================
// UTILITY FUNCTIONS
// ========================================

function createSuccessResponse<T>(data: T, message?: string): ApiResponse<T> {
    return {
        success: true,
        message,
        data,
        timestamp: new Date().toISOString()
    };
}

function createErrorResponse(error: string, statusCode: number = 500): Response {
    const response: ApiResponse = {
        success: false,
        error,
        timestamp: new Date().toISOString()
    };

    return json(response, { status: statusCode });
}

// ========================================
// API HANDLERS
// ========================================

/**
 * GET /api/cuisines
 * Returns all active cuisines with recipe counts, ordered by sortOrder
 */
export const GET: RequestHandler = async () => {
    try {
        console.log('[API] GET /api/cuisines - Fetching cuisines...');

        // Query active cuisines ordered by sortOrder, then name
        const cuisines = await db
            .select({
                id: table.cuisine.id,
                name: table.cuisine.name,
                slug: table.cuisine.slug,
                description: table.cuisine.description,
                image: table.cuisine.image,
                sortOrder: table.cuisine.sortOrder,
                isActive: table.cuisine.isActive,
                createdAt: table.cuisine.createdAt,
                // We'll add recipe count later with a more complex query if needed
                recipeCount: 0 // Placeholder for now
            })
            .from(table.cuisine)
            .where(eq(table.cuisine.isActive, true)) // Only active cuisines
            .orderBy(asc(table.cuisine.sortOrder), asc(table.cuisine.name));

        console.log(`[API] Found ${cuisines.length} active cuisines`);

        // Transform the data to match our response interface
        const cuisineResponse: CuisineResponse[] = cuisines.map(cuisine => ({
            id: cuisine.id,
            name: cuisine.name,
            slug: cuisine.slug,
            description: cuisine.description,
            image: cuisine.image,
            sortOrder: cuisine.sortOrder,
            isActive: cuisine.isActive,
            recipeCount: cuisine.recipeCount,
            createdAt: cuisine.createdAt
        }));

        return json(createSuccessResponse(cuisineResponse, 'Cuisines fetched successfully'));

    } catch (error) {
        console.error('[API] Error fetching cuisines:', error);

        return createErrorResponse(
            'Failed to fetch cuisines. Please try again later.',
            500
        );
    }
};

/**
 * POST /api/cuisines
 * Creates a new cuisine (Admin only)
 */
export const POST: RequestHandler = async ({ request, locals }) => {
    try {
        // Check authentication
        if (!locals.user) {
            return createErrorResponse('Authentication required', 401);
        }

        // For now, we'll skip admin check - add later if needed
        // if (!locals.user.isAdmin) {
        //   return createErrorResponse('Admin access required', 403);
        // }

        console.log('[API] POST /api/cuisines - Creating new cuisine...');

        // Parse request body
        const requestData = await request.json();

        // Basic validation
        if (!requestData.name || typeof requestData.name !== 'string') {
            return createErrorResponse('Cuisine name is required', 400);
        }

        if (requestData.name.trim().length < 2) {
            return createErrorResponse('Cuisine name must be at least 2 characters', 400);
        }

        if (requestData.name.trim().length > 100) {
            return createErrorResponse('Cuisine name cannot exceed 100 characters', 400);
        }

        // Generate slug from name
        const slug = requestData.name
            .toLowerCase()
            .trim()
            .replace(/[^\w\s-]/g, '')
            .replace(/[\s_-]+/g, '-')
            .replace(/^-+|-+$/g, '');

        if (slug.length > 100) {
            return createErrorResponse('Generated slug is too long', 400);
        }

        // Check if cuisine with this slug already exists
        const existingCuisine = await db
            .select({ id: table.cuisine.id })
            .from(table.cuisine)
            .where(eq(table.cuisine.slug, slug))
            .limit(1);

        if (existingCuisine.length > 0) {
            return createErrorResponse('A cuisine with this name already exists', 409);
        }

        // Prepare cuisine data with all fields
        const cuisineData = {
            name: requestData.name.trim(),
            slug: slug,
            description: requestData.description?.trim() || null,
            image: requestData.image?.trim() || null,
            sortOrder: requestData.sortOrder ? parseInt(requestData.sortOrder) : 0,
            isActive: requestData.isActive !== undefined ? requestData.isActive : true
        };

        // Validate sortOrder
        if (isNaN(cuisineData.sortOrder)) {
            return createErrorResponse('Sort order must be a valid number', 400);
        }

        // Create the cuisine
        const [newCuisine] = await db
            .insert(table.cuisine)
            .values(cuisineData)
            .returning({
                id: table.cuisine.id,
                name: table.cuisine.name,
                slug: table.cuisine.slug,
                description: table.cuisine.description,
                image: table.cuisine.image,
                sortOrder: table.cuisine.sortOrder,
                isActive: table.cuisine.isActive,
                createdAt: table.cuisine.createdAt
            });

        console.log(`[API] Created cuisine: ${newCuisine.name} (ID: ${newCuisine.id})`);

        const cuisineResponse: CuisineResponse = {
            ...newCuisine,
            recipeCount: 0
        };

        return json(
            createSuccessResponse(cuisineResponse, 'Cuisine created successfully'),
            { status: 201 }
        );

    } catch (error) {
        console.error('[API] Error creating cuisine:', error);

        // Handle unique constraint violations
        if (error instanceof Error && error.message.includes('unique')) {
            return createErrorResponse('A cuisine with this name already exists', 409);
        }

        return createErrorResponse(
            'Failed to create cuisine. Please try again later.',
            500
        );
    }
};


============================================================
File: ./src/routes/api/recipes/+server.ts
Type: .ts
============================================================

// src/routes/api/recipes/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import { eq, and, desc, asc, ilike, sql, count, or, ne } from 'drizzle-orm';

// ========================================
// TYPES & INTERFACES
// ========================================

interface ApiResponse<T = any> {
    success: boolean;
    message?: string;
    data?: T;
    error?: string;
    timestamp: string;
    requestId?: string;
}

interface CreateRecipeRequest {
    title: string;
    description: string;
    content?: string;
    prepTime: number;
    cookTime: number;
    servings: number;
    difficulty: 'Easy' | 'Medium' | 'Hard';
    categoryId?: number;
    cuisineId?: number;
    featuredImage?: string;
    videoUrl?: string;
    images?: string[];
    ingredients: IngredientGroup[];
    steps: InstructionStep[];
    tips?: RecipeTip[];
    tags?: string[];
    isPublished?: boolean;
}

interface IngredientGroup {
    groupName?: string;
    items: IngredientItem[];
}

interface IngredientItem {
    name: string;
    amount?: string;
    unit?: string;
    preparation?: string;
    notes?: string;
}

interface InstructionStep {
    title?: string;
    content: string;
    image?: string;
    videoUrl?: string;
    estimatedTime?: number;
    temperature?: string;
    tips?: string;
}

interface RecipeTip {
    content: string;
    category?: 'chef_tip' | 'storage' | 'variation' | 'substitution' | 'timing';
}

interface RecipeResponse {
    id: number;
    title: string;
    slug: string;
    description: string;
    prepTime: number;
    cookTime: number;
    totalTime: number;
    servings: number;
    difficulty: string;
    featuredImage: string | null;
    isPublished: boolean;
    createdAt: Date;
    author: {
        id: string;
        username: string;
        firstName: string | null;
        lastName: string | null;
    };
    category: {
        id: number;
        name: string;
        slug: string;
    } | null;
    cuisine: {
        id: number;
        name: string;
        slug: string;
    } | null;
    stats: {
        views: number;
        likes: number;
        ratings: number;
        averageRating: number;
    };
    urls: {
        view: string;
        edit: string;
        api: string;
    };
}

// ========================================
// UTILITY FUNCTIONS
// ========================================

function createSuccessResponse<T>(data: T, message?: string, requestId?: string): ApiResponse<T> {
    return {
        success: true,
        message,
        data,
        timestamp: new Date().toISOString(),
        requestId
    };
}

function createErrorResponse(error: string, statusCode: number = 500, requestId?: string): Response {
    const response: ApiResponse = {
        success: false,
        error,
        timestamp: new Date().toISOString(),
        requestId
    };

    return json(response, { status: statusCode });
}

function generateRequestId(): string {
    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}

function generateSlug(title: string): string {
    return title
        .toLowerCase()
        .trim()
        .replace(/[^\w\s-]/g, '') // Remove special characters
        .replace(/[\s_-]+/g, '-') // Replace spaces and underscores with hyphens
        .replace(/^-+|-+$/g, '') // Remove leading/trailing hyphens
        .slice(0, 200); // Limit length
}

async function ensureUniqueSlug(baseSlug: string, excludeId?: number): Promise<string> {
    let slug = baseSlug;
    let counter = 1;

    while (true) {
        const whereClause = excludeId
            ? and(eq(table.recipe.slug, slug), ne(table.recipe.id, excludeId))
            : eq(table.recipe.slug, slug);

        const [existing] = await db
            .select({ id: table.recipe.id })
            .from(table.recipe)
            .where(whereClause)
            .limit(1);

        if (!existing) {
            return slug;
        }

        slug = `${baseSlug}-${counter}`;
        counter++;

        // Prevent infinite loops
        if (counter > 100) {
            throw new Error('Unable to generate unique slug');
        }
    }
}

async function validateReferences(categoryId?: number, cuisineId?: number): Promise<void> {
    if (categoryId) {
        const [category] = await db
            .select({ id: table.category.id })
            .from(table.category)
            .where(and(
                eq(table.category.id, categoryId),
                eq(table.category.isActive, true)
            ))
            .limit(1);

        if (!category) {
            throw new Error(`Category with ID ${categoryId} does not exist or is inactive`);
        }
    }

    if (cuisineId) {
        const [cuisine] = await db
            .select({ id: table.cuisine.id })
            .from(table.cuisine)
            .where(and(
                eq(table.cuisine.id, cuisineId),
                eq(table.cuisine.isActive, true)
            ))
            .limit(1);

        if (!cuisine) {
            throw new Error(`Cuisine with ID ${cuisineId} does not exist or is inactive`);
        }
    }
}

function validateRecipeData(data: CreateRecipeRequest): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // Title validation
    if (!data.title || typeof data.title !== 'string') {
        errors.push('Title is required');
    } else if (data.title.trim().length < 3) {
        errors.push('Title must be at least 3 characters');
    } else if (data.title.trim().length > 255) {
        errors.push('Title cannot exceed 255 characters');
    }

    // Description validation
    if (!data.description || typeof data.description !== 'string') {
        errors.push('Description is required');
    } else if (data.description.trim().length < 10) {
        errors.push('Description must be at least 10 characters');
    } else if (data.description.trim().length > 1000) {
        errors.push('Description cannot exceed 1000 characters');
    }

    // Time validation
    if (!Number.isInteger(data.prepTime) || data.prepTime < 0 || data.prepTime > 1440) {
        errors.push('Prep time must be between 0 and 1440 minutes');
    }

    if (!Number.isInteger(data.cookTime) || data.cookTime < 0 || data.cookTime > 1440) {
        errors.push('Cook time must be between 0 and 1440 minutes');
    }

    // Servings validation
    if (!Number.isInteger(data.servings) || data.servings < 1 || data.servings > 100) {
        errors.push('Servings must be between 1 and 100');
    }

    // Difficulty validation
    if (!['Easy', 'Medium', 'Hard'].includes(data.difficulty)) {
        errors.push('Difficulty must be Easy, Medium, or Hard');
    }

    // Ingredients validation
    if (!data.ingredients || !Array.isArray(data.ingredients) || data.ingredients.length === 0) {
        errors.push('At least one ingredient group is required');
    } else {
        let hasValidIngredient = false;
        data.ingredients.forEach((group, groupIndex) => {
            if (!group.items || !Array.isArray(group.items)) {
                errors.push(`Ingredient group ${groupIndex + 1} must have items array`);
                return;
            }

            group.items.forEach((item, itemIndex) => {
                if (!item.name || typeof item.name !== 'string' || item.name.trim().length === 0) {
                    errors.push(`Ingredient ${groupIndex + 1}.${itemIndex + 1} name is required`);
                } else {
                    hasValidIngredient = true;
                }
            });
        });

        if (!hasValidIngredient) {
            errors.push('At least one valid ingredient is required');
        }
    }

    // Steps validation
    if (!data.steps || !Array.isArray(data.steps) || data.steps.length === 0) {
        errors.push('At least one instruction step is required');
    } else {
        let hasValidStep = false;
        data.steps.forEach((step, index) => {
            if (!step.content || typeof step.content !== 'string' || step.content.trim().length < 5) {
                errors.push(`Step ${index + 1} content must be at least 5 characters`);
            } else {
                hasValidStep = true;
            }
        });

        if (!hasValidStep) {
            errors.push('At least one valid instruction step is required');
        }
    }

    return {
        valid: errors.length === 0,
        errors
    };
}

// ========================================
// COMPLEX TRANSACTION FUNCTION
// ========================================

async function createRecipeWithRelations(
    validatedData: CreateRecipeRequest,
    authorId: string,
    requestId: string
): Promise<RecipeResponse> {

    return await db.transaction(async (tx) => {
        console.log(`[${requestId}] Starting recipe creation transaction`);

        try {
            // Step 1: Validate foreign key references
            await validateReferences(validatedData.categoryId, validatedData.cuisineId);

            // Step 2: Generate unique slug
            const baseSlug = generateSlug(validatedData.title);
            const uniqueSlug = await ensureUniqueSlug(baseSlug);

            console.log(`[${requestId}] Generated unique slug: ${uniqueSlug}`);

            // Step 3: Create main recipe record
            const totalTime = validatedData.prepTime + validatedData.cookTime;

            const [newRecipe] = await tx
                .insert(table.recipe)
                .values({
                    title: validatedData.title.trim(),
                    slug: uniqueSlug,
                    description: validatedData.description.trim(),
                    content: validatedData.content?.trim() || null,
                    prepTime: validatedData.prepTime,
                    cookTime: validatedData.cookTime,
                    totalTime: totalTime,
                    servings: validatedData.servings,
                    difficulty: validatedData.difficulty,
                    featuredImage: validatedData.featuredImage?.trim() || null,
                    videoUrl: validatedData.videoUrl?.trim() || null,
                    authorId: authorId,
                    categoryId: validatedData.categoryId || null,
                    cuisineId: validatedData.cuisineId || null,
                    isPublished: validatedData.isPublished || false,
                    isDraft: !(validatedData.isPublished || false),
                    publishedAt: validatedData.isPublished ? new Date() : null,
                    views: 0,
                    likesCount: 0,
                    ratingsCount: 0,
                    averageRating: 0
                })
                .returning({
                    id: table.recipe.id,
                    slug: table.recipe.slug,
                    title: table.recipe.title,
                    createdAt: table.recipe.createdAt
                });

            const recipeId = newRecipe.id;
            console.log(`[${requestId}] Created recipe: ${newRecipe.title} (ID: ${recipeId})`);

            // Step 4: Insert ingredients with groups
            let ingredientCount = 0;
            for (let groupIndex = 0; groupIndex < validatedData.ingredients.length; groupIndex++) {
                const group = validatedData.ingredients[groupIndex];

                for (let itemIndex = 0; itemIndex < group.items.length; itemIndex++) {
                    const item = group.items[itemIndex];
                    if (item.name.trim()) {
                        await tx.insert(table.recipeIngredient).values({
                            recipeId,
                            groupName: group.groupName?.trim() || null,
                            groupOrder: groupIndex,
                            name: item.name.trim(),
                            amount: item.amount?.trim() || null,
                            unit: item.unit?.trim() || null,
                            preparation: item.preparation?.trim() || null,
                            notes: item.notes?.trim() || null,
                            itemOrder: itemIndex
                        });
                        ingredientCount++;
                    }
                }
            }

            console.log(`[${requestId}] Created ${ingredientCount} ingredients`);

            // Step 5: Insert instruction steps
            let stepCount = 0;
            for (let index = 0; index < validatedData.steps.length; index++) {
                const step = validatedData.steps[index];
                if (step.content.trim()) {
                    await tx.insert(table.recipeInstruction).values({
                        recipeId,
                        stepNumber: index + 1,
                        title: step.title?.trim() || null,
                        content: step.content.trim(),
                        image: step.image?.trim() || null,
                        videoUrl: step.videoUrl?.trim() || null,
                        estimatedTime: step.estimatedTime || null,
                        temperature: step.temperature?.trim() || null,
                        tips: step.tips?.trim() || null
                    });
                    stepCount++;
                }
            }

            console.log(`[${requestId}] Created ${stepCount} instruction steps`);

            // Step 6: Insert additional images
            if (validatedData.images && validatedData.images.length > 0) {
                const imageInserts = validatedData.images
                    .filter(url => url.trim())
                    .map((url, index) => ({
                        recipeId,
                        url: url.trim(),
                        sortOrder: index,
                        isFeatured: false
                    }));

                if (imageInserts.length > 0) {
                    await tx.insert(table.recipeImage).values(imageInserts);
                    console.log(`[${requestId}] Created ${imageInserts.length} recipe images`);
                }
            }

            // Step 7: Handle tags (create if needed, then link)
            let tagCount = 0;
            if (validatedData.tags && validatedData.tags.length > 0) {
                const uniqueTags = [...new Set(validatedData.tags.filter(tag => tag.trim()))];

                for (const tagName of uniqueTags) {
                    let tagId: number;

                    // Try to find existing tag
                    const [existingTag] = await tx
                        .select({ id: table.tag.id })
                        .from(table.tag)
                        .where(eq(table.tag.name, tagName.trim()))
                        .limit(1);

                    if (existingTag) {
                        tagId = existingTag.id;
                        // Update usage count
                        await tx
                            .update(table.tag)
                            .set({ usageCount: sql`${table.tag.usageCount} + 1` })
                            .where(eq(table.tag.id, tagId));
                    } else {
                        // Create new tag
                        const tagSlug = generateSlug(tagName);
                        const [newTag] = await tx
                            .insert(table.tag)
                            .values({
                                name: tagName.trim(),
                                slug: tagSlug,
                                usageCount: 1
                            })
                            .returning({ id: table.tag.id });
                        tagId = newTag.id;
                    }

                    // Link tag to recipe
                    await tx.insert(table.recipeTag).values({
                        recipeId,
                        tagId
                    });
                    tagCount++;
                }

                console.log(`[${requestId}] Created/linked ${tagCount} tags`);
            }

            // Step 8: Insert tips
            let tipCount = 0;
            if (validatedData.tips && validatedData.tips.length > 0) {
                const tipInserts = validatedData.tips
                    .filter(tip => tip.content.trim())
                    .map((tip, index) => ({
                        recipeId,
                        content: tip.content.trim(),
                        category: tip.category || null,
                        sortOrder: index
                    }));

                if (tipInserts.length > 0) {
                    await tx.insert(table.recipeTip).values(tipInserts);
                    tipCount = tipInserts.length;
                    console.log(`[${requestId}] Created ${tipCount} recipe tips`);
                }
            }

            // Step 9: Get created recipe with relations for response
            const [recipeWithRelations] = await tx
                .select({
                    id: table.recipe.id,
                    title: table.recipe.title,
                    slug: table.recipe.slug,
                    description: table.recipe.description,
                    prepTime: table.recipe.prepTime,
                    cookTime: table.recipe.cookTime,
                    totalTime: table.recipe.totalTime,
                    servings: table.recipe.servings,
                    difficulty: table.recipe.difficulty,
                    featuredImage: table.recipe.featuredImage,
                    isPublished: table.recipe.isPublished,
                    views: table.recipe.views,
                    likesCount: table.recipe.likesCount,
                    ratingsCount: table.recipe.ratingsCount,
                    averageRating: table.recipe.averageRating,
                    createdAt: table.recipe.createdAt,
                    // Author info
                    authorId: table.user.id,
                    authorUsername: table.user.username,
                    authorFirstName: table.user.firstName,
                    authorLastName: table.user.lastName,
                    // Category info
                    categoryId: table.category.id,
                    categoryName: table.category.name,
                    categorySlug: table.category.slug,
                    // Cuisine info
                    cuisineId: table.cuisine.id,
                    cuisineName: table.cuisine.name,
                    cuisineSlug: table.cuisine.slug
                })
                .from(table.recipe)
                .leftJoin(table.user, eq(table.recipe.authorId, table.user.id))
                .leftJoin(table.category, eq(table.recipe.categoryId, table.category.id))
                .leftJoin(table.cuisine, eq(table.recipe.cuisineId, table.cuisine.id))
                .where(eq(table.recipe.id, recipeId))
                .limit(1);

            console.log(`[${requestId}] Recipe creation completed successfully`);

            // Build response
            const response: RecipeResponse = {
                id: recipeWithRelations.id,
                title: recipeWithRelations.title,
                slug: recipeWithRelations.slug,
                description: recipeWithRelations.description,
                prepTime: recipeWithRelations.prepTime,
                cookTime: recipeWithRelations.cookTime,
                totalTime: recipeWithRelations.totalTime,
                servings: recipeWithRelations.servings,
                difficulty: recipeWithRelations.difficulty,
                featuredImage: recipeWithRelations.featuredImage,
                isPublished: recipeWithRelations.isPublished,
                createdAt: recipeWithRelations.createdAt,
                author: {
                    id: recipeWithRelations.authorId,
                    username: recipeWithRelations.authorUsername,
                    firstName: recipeWithRelations.authorFirstName,
                    lastName: recipeWithRelations.authorLastName
                },
                category: recipeWithRelations.categoryId ? {
                    id: recipeWithRelations.categoryId,
                    name: recipeWithRelations.categoryName!,
                    slug: recipeWithRelations.categorySlug!
                } : null,
                cuisine: recipeWithRelations.cuisineId ? {
                    id: recipeWithRelations.cuisineId,
                    name: recipeWithRelations.cuisineName!,
                    slug: recipeWithRelations.cuisineSlug!
                } : null,
                stats: {
                    views: recipeWithRelations.views,
                    likes: recipeWithRelations.likesCount,
                    ratings: recipeWithRelations.ratingsCount,
                    averageRating: recipeWithRelations.averageRating || 0
                },
                urls: {
                    view: `/recipes/${recipeWithRelations.slug}`,
                    edit: `/recipes/${recipeWithRelations.slug}/edit`,
                    api: `/api/recipes/${recipeWithRelations.id}`
                }
            };

            return response;

        } catch (error) {
            console.error(`[${requestId}] Transaction error:`, error);
            throw error;
        }
    });
}

// ========================================
// API HANDLERS
// ========================================

/**
 * POST /api/recipes
 * Creates a new recipe with all relations
 */
export const POST: RequestHandler = async ({ request, locals }) => {
    const requestId = generateRequestId();

    try {
        // Check authentication
        if (!locals.user || !locals.user.id || !locals.user.username) {
            return createErrorResponse('Authentication required', 401, requestId);
        }

        console.log(`[${requestId}] Recipe creation request started by: ${locals.user.username}`);

        // Parse request body
        let requestData;
        try {
            requestData = await request.json();
        } catch (e) {
            return createErrorResponse('Invalid JSON in request body', 400, requestId);
        }

        // Validate recipe data
        const validation = validateRecipeData(requestData);
        if (!validation.valid) {
            console.log(`[${requestId}] Validation failed:`, validation.errors);
            return createErrorResponse(
                `Validation failed: ${validation.errors.join(', ')}`,
                400,
                requestId
            );
        }

        // Create recipe with all relations
        const createdRecipe = await createRecipeWithRelations(
            requestData,
            locals.user.id,
            requestId
        );

        const message = requestData.isPublished
            ? 'Recipe published successfully!'
            : 'Recipe saved as draft!';

        console.log(`[${requestId}] Recipe creation completed: ${createdRecipe.slug}`);

        return json(
            createSuccessResponse(createdRecipe, message, requestId),
            { status: 201 }
        );

    } catch (error) {
        console.error(`[${requestId}] Recipe creation failed:`, error);

        if (error instanceof Error) {
            if (error.message.includes('does not exist')) {
                return createErrorResponse(error.message, 400, requestId);
            }
            if (error.message.includes('unique')) {
                return createErrorResponse('A recipe with this title already exists', 409, requestId);
            }
        }

        return createErrorResponse(
            'Failed to create recipe. Please try again later.',
            500,
            requestId
        );
    }
};

/**
 * GET /api/recipes
 * Get recipes with filtering, pagination, and search
 */
export const GET: RequestHandler = async ({ url }) => {
    const requestId = generateRequestId();

    try {
        console.log(`[${requestId}] Recipe list request started`);

        // Parse query parameters
        const page = parseInt(url.searchParams.get('page') || '1');
        const limit = Math.min(parseInt(url.searchParams.get('limit') || '20'), 50);
        const search = url.searchParams.get('search')?.trim();
        const category = url.searchParams.get('category')?.trim();
        const cuisine = url.searchParams.get('cuisine')?.trim();
        const difficulty = url.searchParams.get('difficulty')?.trim();
        const author = url.searchParams.get('author')?.trim();
        const published = url.searchParams.get('published') !== 'false'; // Default to published only

        const offset = (page - 1) * limit;

        // Build where conditions
        const conditions = [eq(table.recipe.isPublished, published)];

        if (search) {
            conditions.push(
                or(
                    ilike(table.recipe.title, `%${search}%`),
                    ilike(table.recipe.description, `%${search}%`)
                )
            );
        }

        if (category) {
            conditions.push(eq(table.category.slug, category));
        }

        if (cuisine) {
            conditions.push(eq(table.cuisine.slug, cuisine));
        }

        if (difficulty && ['Easy', 'Medium', 'Hard'].includes(difficulty)) {
            conditions.push(eq(table.recipe.difficulty, difficulty));
        }

        if (author) {
            conditions.push(eq(table.user.username, author));
        }

        // Get total count for pagination
        const [{ totalCount }] = await db
            .select({ totalCount: count() })
            .from(table.recipe)
            .leftJoin(table.user, eq(table.recipe.authorId, table.user.id))
            .leftJoin(table.category, eq(table.recipe.categoryId, table.category.id))
            .leftJoin(table.cuisine, eq(table.recipe.cuisineId, table.cuisine.id))
            .where(and(...conditions));

        // Get recipes
        const recipes = await db
            .select({
                id: table.recipe.id,
                title: table.recipe.title,
                slug: table.recipe.slug,
                description: table.recipe.description,
                prepTime: table.recipe.prepTime,
                cookTime: table.recipe.cookTime,
                totalTime: table.recipe.totalTime,
                servings: table.recipe.servings,
                difficulty: table.recipe.difficulty,
                featuredImage: table.recipe.featuredImage,
                isPublished: table.recipe.isPublished,
                views: table.recipe.views,
                likesCount: table.recipe.likesCount,
                ratingsCount: table.recipe.ratingsCount,
                averageRating: table.recipe.averageRating,
                createdAt: table.recipe.createdAt,
                // Author info
                authorId: table.user.id,
                authorUsername: table.user.username,
                authorFirstName: table.user.firstName,
                authorLastName: table.user.lastName,
                // Category info
                categoryId: table.category.id,
                categoryName: table.category.name,
                categorySlug: table.category.slug,
                // Cuisine info
                cuisineId: table.cuisine.id,
                cuisineName: table.cuisine.name,
                cuisineSlug: table.cuisine.slug
            })
            .from(table.recipe)
            .leftJoin(table.user, eq(table.recipe.authorId, table.user.id))
            .leftJoin(table.category, eq(table.recipe.categoryId, table.category.id))
            .leftJoin(table.cuisine, eq(table.recipe.cuisineId, table.cuisine.id))
            .where(and(...conditions))
            .orderBy(desc(table.recipe.createdAt))
            .limit(limit)
            .offset(offset);

        // Transform to response format
        const recipeResponses: RecipeResponse[] = recipes.map(recipe => ({
            id: recipe.id,
            title: recipe.title,
            slug: recipe.slug,
            description: recipe.description,
            prepTime: recipe.prepTime,
            cookTime: recipe.cookTime,
            totalTime: recipe.totalTime,
            servings: recipe.servings,
            difficulty: recipe.difficulty,
            featuredImage: recipe.featuredImage,
            isPublished: recipe.isPublished,
            createdAt: recipe.createdAt,
            author: {
                id: recipe.authorId,
                username: recipe.authorUsername,
                firstName: recipe.authorFirstName,
                lastName: recipe.authorLastName
            },
            category: recipe.categoryId ? {
                id: recipe.categoryId,
                name: recipe.categoryName!,
                slug: recipe.categorySlug!
            } : null,
            cuisine: recipe.cuisineId ? {
                id: recipe.cuisineId,
                name: recipe.cuisineName!,
                slug: recipe.cuisineSlug!
            } : null,
            stats: {
                views: recipe.views,
                likes: recipe.likesCount,
                ratings: recipe.ratingsCount,
                averageRating: recipe.averageRating || 0
            },
            urls: {
                view: `/recipes/${recipe.slug}`,
                edit: `/recipes/${recipe.slug}/edit`,
                api: `/api/recipes/${recipe.id}`
            }
        }));

        const totalPages = Math.ceil(totalCount / limit);

        const responseData = {
            recipes: recipeResponses,
            pagination: {
                page,
                limit,
                total: totalCount,
                totalPages,
                hasNext: page < totalPages,
                hasPrev: page > 1
            },
            filters: {
                search,
                category,
                cuisine,
                difficulty,
                author,
                published
            }
        };

        console.log(`[${requestId}] Recipe list completed: ${recipes.length} recipes`);

        return json(createSuccessResponse(responseData, 'Recipes retrieved successfully', requestId));

    } catch (error) {
        console.error(`[${requestId}] Recipe list failed:`, error);
        return createErrorResponse('Failed to fetch recipes', 500, requestId);
    }
};


============================================================
File: ./src/routes/api/upload/+server.ts
Type: .ts
============================================================

// src/routes/api/upload/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { writeFile, mkdir } from 'fs/promises';
import { existsSync } from 'fs';
import path from 'path';

// ========================================
// TYPES & INTERFACES
// ========================================

interface ApiResponse<T = any> {
    success: boolean;
    message?: string;
    data?: T;
    error?: string;
    timestamp: string;
}

interface UploadResponse {
    url: string;
    filename: string;
    originalName: string;
    size: number;
    mimeType: string;
    uploadedAt: string;
}

// ========================================
// CONFIGURATION
// ========================================

const UPLOAD_CONFIG = {
    // File size limits (in bytes)
    maxFileSize: 5 * 1024 * 1024, // 5MB

    // Allowed file types
    allowedMimeTypes: [
        'image/jpeg',
        'image/jpg',
        'image/png',
        'image/webp',
        'image/gif'
    ],

    // Allowed file extensions
    allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp', '.gif'],

    // Upload directory (relative to static/)
    uploadDir: 'uploads',

    // Subdirectories for organization
    subDirs: {
        recipes: 'recipes',
        profiles: 'profiles',
        categories: 'categories',
        temp: 'temp'
    }
};

// ========================================
// UTILITY FUNCTIONS
// ========================================

function createSuccessResponse<T>(data: T, message?: string): ApiResponse<T> {
    return {
        success: true,
        message,
        data,
        timestamp: new Date().toISOString()
    };
}

function createErrorResponse(error: string, statusCode: number = 500): Response {
    const response: ApiResponse = {
        success: false,
        error,
        timestamp: new Date().toISOString()
    };

    return json(response, { status: statusCode });
}

function generateUniqueFilename(originalName: string): string {
    const timestamp = Date.now();
    const randomSuffix = Math.random().toString(36).substring(2, 8);
    const ext = path.extname(originalName).toLowerCase();
    const nameWithoutExt = path.basename(originalName, ext).replace(/[^a-zA-Z0-9]/g, '_');

    return `${nameWithoutExt}_${timestamp}_${randomSuffix}${ext}`;
}

function validateFile(file: File): { valid: boolean; error?: string } {
    // Check file size
    if (file.size > UPLOAD_CONFIG.maxFileSize) {
        return {
            valid: false,
            error: `File size too large. Maximum allowed: ${UPLOAD_CONFIG.maxFileSize / (1024 * 1024)}MB`
        };
    }

    // Check file type
    if (!UPLOAD_CONFIG.allowedMimeTypes.includes(file.type)) {
        return {
            valid: false,
            error: `Invalid file type. Allowed types: ${UPLOAD_CONFIG.allowedMimeTypes.join(', ')}`
        };
    }

    // Check file extension
    const ext = path.extname(file.name).toLowerCase();
    if (!UPLOAD_CONFIG.allowedExtensions.includes(ext)) {
        return {
            valid: false,
            error: `Invalid file extension. Allowed extensions: ${UPLOAD_CONFIG.allowedExtensions.join(', ')}`
        };
    }

    // Check if file name is provided
    if (!file.name || file.name.trim() === '') {
        return {
            valid: false,
            error: 'File name is required'
        };
    }

    return { valid: true };
}

async function ensureUploadDirectory(uploadPath: string): Promise<void> {
    try {
        if (!existsSync(uploadPath)) {
            await mkdir(uploadPath, { recursive: true });
            console.log(`[UPLOAD] Created directory: ${uploadPath}`);
        }
    } catch (error) {
        console.error('[UPLOAD] Error creating directory:', error);
        throw new Error('Failed to create upload directory');
    }
}

// ========================================
// API HANDLERS
// ========================================

/**
 * POST /api/upload
 * Handles file uploads with validation and storage
 * 
 * Body: FormData with:
 * - file: File (required)
 * - type: string (optional) - 'recipes', 'profiles', 'categories' 
 * - alt: string (optional) - alt text for accessibility
 */
export const POST: RequestHandler = async ({ request, locals }) => {
    try {
        // Check authentication
        if (!locals.user) {
            return createErrorResponse('Authentication required', 401);
        }

        console.log('[API] POST /api/upload - Processing file upload...');

        // Parse form data
        const formData = await request.formData();
        const file = formData.get('file') as File;
        const type = formData.get('type') as string || 'temp';
        const alt = formData.get('alt') as string || '';

        // Validate file exists
        if (!file) {
            return createErrorResponse('No file provided', 400);
        }

        console.log(`[UPLOAD] Processing file: ${file.name} (${file.size} bytes, ${file.type})`);

        // Validate file
        const validation = validateFile(file);
        if (!validation.valid) {
            return createErrorResponse(validation.error!, 400);
        }

        // Determine upload subdirectory
        const subDir = UPLOAD_CONFIG.subDirs[type as keyof typeof UPLOAD_CONFIG.subDirs] || UPLOAD_CONFIG.subDirs.temp;

        // Generate unique filename
        const uniqueFilename = generateUniqueFilename(file.name);

        // Construct file paths
        const uploadDir = path.join('static', UPLOAD_CONFIG.uploadDir, subDir);
        const filePath = path.join(uploadDir, uniqueFilename);
        const publicUrl = `/${UPLOAD_CONFIG.uploadDir}/${subDir}/${uniqueFilename}`;

        // Ensure upload directory exists
        await ensureUploadDirectory(uploadDir);

        // Convert file to buffer and save
        const bytes = await file.arrayBuffer();
        const buffer = Buffer.from(bytes);

        await writeFile(filePath, buffer);

        console.log(`[UPLOAD] File saved successfully: ${filePath}`);

        // Prepare response data
        const uploadResponse: UploadResponse = {
            url: publicUrl,
            filename: uniqueFilename,
            originalName: file.name,
            size: file.size,
            mimeType: file.type,
            uploadedAt: new Date().toISOString()
        };

        return json(
            createSuccessResponse(uploadResponse, 'File uploaded successfully'),
            { status: 201 }
        );

    } catch (error) {
        console.error('[API] Error uploading file:', error);

        // Handle specific errors
        if (error instanceof Error) {
            if (error.message.includes('ENOSPC')) {
                return createErrorResponse('Server storage full. Please try again later.', 507);
            }
            if (error.message.includes('EACCES')) {
                return createErrorResponse('Server permission error. Please contact support.', 500);
            }
        }

        return createErrorResponse(
            'Failed to upload file. Please try again later.',
            500
        );
    }
};

/**
 * GET /api/upload
 * Returns upload configuration and limits (for frontend)
 */
export const GET: RequestHandler = async () => {
    try {
        const config = {
            maxFileSize: UPLOAD_CONFIG.maxFileSize,
            maxFileSizeMB: UPLOAD_CONFIG.maxFileSize / (1024 * 1024),
            allowedMimeTypes: UPLOAD_CONFIG.allowedMimeTypes,
            allowedExtensions: UPLOAD_CONFIG.allowedExtensions,
            supportedTypes: Object.keys(UPLOAD_CONFIG.subDirs)
        };

        return json(createSuccessResponse(config, 'Upload configuration retrieved'));

    } catch (error) {
        console.error('[API] Error getting upload config:', error);
        return createErrorResponse('Failed to get upload configuration', 500);
    }
};

/**
 * DELETE /api/upload
 * Deletes an uploaded file (Admin or file owner only)
 * 
 * Body: { url: string }
 */
export const DELETE: RequestHandler = async ({ request, locals }) => {
    try {
        // Check authentication
        if (!locals.user) {
            return createErrorResponse('Authentication required', 401);
        }

        const { url } = await request.json();

        if (!url || typeof url !== 'string') {
            return createErrorResponse('File URL is required', 400);
        }

        // TODO: Add file ownership validation
        // TODO: Add admin check
        // TODO: Implement file deletion logic

        // For now, just return success (implement later when needed)
        return json(createSuccessResponse({ deleted: true }, 'File deletion not implemented yet'));

    } catch (error) {
        console.error('[API] Error deleting file:', error);
        return createErrorResponse('Failed to delete file', 500);
    }
};


============================================================
File: ./src/routes/api/users/+server.ts
Type: .ts
============================================================

// src/routes/api/users/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import { eq, and, desc, count, ne } from 'drizzle-orm';

// ========================================
// TYPES & INTERFACES
// ========================================

interface ApiResponse<T = any> {
    success: boolean;
    message?: string;
    data?: T;
    error?: string;
    timestamp: string;
}

interface PublicUserProfile {
    id: string;
    username: string;
    firstName: string | null;
    lastName: string | null;
    bio: string | null;
    profileImage: string | null;
    createdAt: Date;
    stats: {
        recipesCount: number;
        likesReceived: number;
        averageRating: number;
    };
}

interface PrivateUserProfile extends PublicUserProfile {
    email: string | null;
    age: number | null;
    updatedAt: Date;
}

interface UpdateUserRequest {
    firstName?: string;
    lastName?: string;
    bio?: string;
    email?: string;
    age?: number;
    profileImage?: string;
}

// ========================================
// UTILITY FUNCTIONS
// ========================================

function createSuccessResponse<T>(data: T, message?: string): ApiResponse<T> {
    return {
        success: true,
        message,
        data,
        timestamp: new Date().toISOString()
    };
}

function createErrorResponse(error: string, statusCode: number = 500): Response {
    const response: ApiResponse = {
        success: false,
        error,
        timestamp: new Date().toISOString()
    };

    return json(response, { status: statusCode });
}

async function getUserStats(userId: string) {
    try {
        // Count user's published recipes
        const [recipeCount] = await db
            .select({ count: count() })
            .from(table.recipe)
            .where(and(
                eq(table.recipe.authorId, userId),
                eq(table.recipe.isPublished, true)
            ));

        // Count likes on user's recipes
        const [likesCount] = await db
            .select({ count: count() })
            .from(table.recipeLike)
            .innerJoin(table.recipe, eq(table.recipeLike.recipeId, table.recipe.id))
            .where(eq(table.recipe.authorId, userId));

        // Calculate average rating of user's recipes
        const userRecipes = await db
            .select({ averageRating: table.recipe.averageRating })
            .from(table.recipe)
            .where(and(
                eq(table.recipe.authorId, userId),
                eq(table.recipe.isPublished, true)
            ));

        const totalRating = userRecipes.reduce((sum, recipe) =>
            sum + (recipe.averageRating || 0), 0
        );
        const averageRating = userRecipes.length > 0 ? totalRating / userRecipes.length : 0;

        return {
            recipesCount: recipeCount.count,
            likesReceived: likesCount.count,
            averageRating: Math.round(averageRating)
        };
    } catch (error) {
        console.error('[USERS] Error calculating user stats:', error);
        return {
            recipesCount: 0,
            likesReceived: 0,
            averageRating: 0
        };
    }
}

function validateEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

function validateAge(age: number): boolean {
    return age >= 13 && age <= 120;
}

function sanitizeUserInput(input: UpdateUserRequest): UpdateUserRequest {
    const sanitized: UpdateUserRequest = {};

    if (input.firstName !== undefined) {
        sanitized.firstName = input.firstName?.trim().slice(0, 50) || null;
    }

    if (input.lastName !== undefined) {
        sanitized.lastName = input.lastName?.trim().slice(0, 50) || null;
    }

    if (input.bio !== undefined) {
        sanitized.bio = input.bio?.trim().slice(0, 500) || null;
    }

    if (input.email !== undefined) {
        sanitized.email = input.email?.trim().toLowerCase() || null;
    }

    if (input.age !== undefined) {
        sanitized.age = typeof input.age === 'number' ? input.age : null;
    }

    if (input.profileImage !== undefined) {
        sanitized.profileImage = input.profileImage?.trim() || null;
    }

    return sanitized;
}

// ========================================
// API HANDLERS
// ========================================

/**
 * GET /api/users?username=john - Get public profile by username
 * GET /api/users?me=true - Get current user's private profile
 */
export const GET: RequestHandler = async ({ url, locals }) => {
    try {
        const username = url.searchParams.get('username');
        const isMe = url.searchParams.get('me') === 'true';

        // Handle current user's private profile request
        if (isMe) {
            if (!locals.user) {
                return createErrorResponse('Authentication required', 401);
            }

            console.log(`[API] GET /api/users?me=true - Fetching private profile for: ${locals.user.username}`);

            // Get user's complete profile (including private fields)
            const [user] = await db
                .select({
                    id: table.user.id,
                    username: table.user.username,
                    firstName: table.user.firstName,
                    lastName: table.user.lastName,
                    bio: table.user.bio,
                    email: table.user.email,
                    age: table.user.age,
                    profileImage: table.user.profileImage,
                    createdAt: table.user.createdAt,
                    updatedAt: table.user.updatedAt
                    // Note: Still excluding passwordHash for security
                })
                .from(table.user)
                .where(eq(table.user.id, locals.user.id))
                .limit(1);

            if (!user) {
                return createErrorResponse('User not found', 404);
            }

            // Get user statistics
            const stats = await getUserStats(user.id);

            const privateProfile: PrivateUserProfile = {
                ...user,
                stats
            };

            return json(createSuccessResponse(privateProfile, 'Private profile retrieved successfully'));
        }

        // Handle public profile request
        if (!username) {
            return createErrorResponse('Username parameter is required', 400);
        }

        console.log(`[API] GET /api/users - Fetching public profile for: ${username}`);

        // Get user basic info (excluding sensitive data)
        const [user] = await db
            .select({
                id: table.user.id,
                username: table.user.username,
                firstName: table.user.firstName,
                lastName: table.user.lastName,
                bio: table.user.bio,
                profileImage: table.user.profileImage,
                createdAt: table.user.createdAt,
                // Note: Explicitly excluding passwordHash, email, age for public profile
            })
            .from(table.user)
            .where(eq(table.user.username, username))
            .limit(1);

        if (!user) {
            return createErrorResponse('User not found', 404);
        }

        // Get user statistics
        const stats = await getUserStats(user.id);

        const publicProfile: PublicUserProfile = {
            ...user,
            stats
        };

        return json(createSuccessResponse(publicProfile, 'User profile retrieved successfully'));

    } catch (error) {
        console.error('[API] Error fetching user profile:', error);
        return createErrorResponse('Failed to fetch user profile', 500);
    }
};

/**
 * PUT /api/users
 * Update current user's profile
 */
export const PUT: RequestHandler = async ({ request, locals }) => {
    try {
        // Check authentication
        if (!locals.user) {
            return createErrorResponse('Authentication required', 401);
        }

        console.log(`[API] PUT /api/users - Updating profile for: ${locals.user.username}`);

        // Parse and validate request body
        const requestData = await request.json();
        const sanitizedData = sanitizeUserInput(requestData);

        // Validate email if provided
        if (sanitizedData.email && !validateEmail(sanitizedData.email)) {
            return createErrorResponse('Invalid email format', 400);
        }

        // Validate age if provided
        if (sanitizedData.age !== undefined && sanitizedData.age !== null && !validateAge(sanitizedData.age)) {
            return createErrorResponse('Age must be between 13 and 120', 400);
        }

        // Check if email is already taken (if email is being updated)
        if (sanitizedData.email) {
            const [existingUser] = await db
                .select({ id: table.user.id })
                .from(table.user)
                .where(and(
                    eq(table.user.email, sanitizedData.email),
                    ne(table.user.id, locals.user.id)
                ))
                .limit(1);

            if (existingUser) {
                return createErrorResponse('Email is already in use', 409);
            }
        }

        // Build update data (only include fields that were provided)
        const updateData: any = {
            updatedAt: new Date()
        };

        Object.entries(sanitizedData).forEach(([key, value]) => {
            if (value !== undefined) {
                updateData[key] = value;
            }
        });

        // Update user profile
        const [updatedUser] = await db
            .update(table.user)
            .set(updateData)
            .where(eq(table.user.id, locals.user.id))
            .returning({
                id: table.user.id,
                username: table.user.username,
                firstName: table.user.firstName,
                lastName: table.user.lastName,
                bio: table.user.bio,
                email: table.user.email,
                age: table.user.age,
                profileImage: table.user.profileImage,
                createdAt: table.user.createdAt,
                updatedAt: table.user.updatedAt
            });

        // Get updated stats
        const stats = await getUserStats(updatedUser.id);

        const privateProfile: PrivateUserProfile = {
            ...updatedUser,
            stats
        };

        console.log(`[API] Profile updated successfully for: ${updatedUser.username}`);

        return json(createSuccessResponse(privateProfile, 'Profile updated successfully'));

    } catch (error) {
        console.error('[API] Error updating user profile:', error);

        // Handle unique constraint violations
        if (error instanceof Error && error.message.includes('unique')) {
            return createErrorResponse('Email is already in use', 409);
        }

        return createErrorResponse('Failed to update profile', 500);
    }
};


============================================================
File: ./src/routes/blog/+layout.svelte
Type: .svelte
============================================================

<script lang="ts">
	import CategoryList from '$components/CategoryList/CategoryList.svelte';
</script>

<div class="container mx-auto px-4 py-8">
	<CategoryList />
	<slot />
</div>



============================================================
File: ./src/routes/blog/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/blog/+page.svelte -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { Search, Filter, ArrowRight } from 'lucide-svelte';

	// Sample blog data - replace with actual data from your backend
	const blogPosts = [
		{
			id: 1,
			title: 'The Art of Making Perfect Sourdough Bread',
			excerpt:
				'Master the ancient technique of sourdough bread making with our comprehensive guide...',
			category: 'Baking',
			image: '/images/recipes/sourdough.jpg',
			author: {
				name: 'Chef Maria',
				avatar: '/images/users/chef-maria.jpg'
			},
			readTime: '8 min read',
			date: '2024-01-25',
			tags: ['bread', 'baking', 'sourdough']
		},
		{
			id: 2,
			title: 'Essential Kitchen Tools Every Home Chef Needs',
			excerpt:
				'Discover the must-have kitchen tools that will elevate your cooking game to the next level...',
			category: 'Kitchen Tips',
			image: '/images/blog/kitchen-tools.jpeg',
			author: {
				name: 'Chef John',
				avatar: '/images/users/chef-giovanni.jpeg'
			},
			readTime: '6 min read',
			date: '2024-01-23',
			tags: ['tools', 'kitchen', 'equipment']
		}
		// Add more blog posts...
	];

	const categories = [
		'All',
		'Recipes',
		'Kitchen Tips',
		'Cooking Techniques',
		'Food Stories',
		'Health & Nutrition'
	];

	let selectedCategory = 'All';
	let searchQuery = '';
	let activeSort = 'latest'; // latest, popular, trending

	function formatDate(dateStr: string) {
		return new Date(dateStr).toLocaleDateString('en-US', {
			month: 'long',
			day: 'numeric',
			year: 'numeric'
		});
	}
</script>

<div class="blog-container" class:dark={$theme === 'dark'}>
	<!-- Hero Section -->
	<section class="hero">
		<h1 class="hero-title">Culinary Stories & Insights</h1>
		<p class="hero-subtitle">
			Discover recipes, tips, and stories from our community of passionate chefs
		</p>
	</section>

	<!-- Filters and Search -->
	<section class="filters-section">
		<div class="search-bar">
			<Search size={20} class="search-icon" />
			<input
				type="text"
				bind:value={searchQuery}
				placeholder="Search articles..."
				class="search-input"
			/>
		</div>

		<div class="categories-filter">
			{#each categories as category}
				<button
					class="category-btn"
					class:active={selectedCategory === category}
					on:click={() => (selectedCategory = category)}
				>
					{category}
				</button>
			{/each}
		</div>

		<div class="sort-options">
			<button
				class="sort-btn"
				class:active={activeSort === 'latest'}
				on:click={() => (activeSort = 'latest')}
			>
				Latest
			</button>
			<button
				class="sort-btn"
				class:active={activeSort === 'popular'}
				on:click={() => (activeSort = 'popular')}
			>
				Popular
			</button>
			<button
				class="sort-btn"
				class:active={activeSort === 'trending'}
				on:click={() => (activeSort = 'trending')}
			>
				Trending
			</button>
		</div>
	</section>

	<!-- Blog Posts Grid -->
	<section class="posts-grid">
		{#each blogPosts as post}
			<article class="blog-card">
				<div class="card-image-wrapper">
					<img src={post.image} alt={post.title} class="card-image" />
					<span class="category-tag">{post.category}</span>
				</div>

				<div class="card-content">
					<div class="card-meta">
						<div class="author-info">
							<img src={post.author.avatar} alt={post.author.name} class="author-avatar" />
							<span class="author-name">{post.author.name}</span>
						</div>
						<span class="read-time">{post.readTime}</span>
					</div>

					<h2 class="card-title">{post.title}</h2>
					<p class="card-excerpt">{post.excerpt}</p>

					<div class="card-footer">
						<span class="post-date">{formatDate(post.date)}</span>
						<a href="/blog/{post.id}" class="read-more">
							Read More
							<ArrowRight size={16} class="arrow-icon" />
						</a>
					</div>
				</div>
			</article>
		{/each}
	</section>

	<!-- Newsletter Section -->
	<section class="newsletter">
		<div class="newsletter-content">
			<h2 class="newsletter-title">Subscribe to Our Newsletter</h2>
			<p class="newsletter-description">
				Get weekly recipes, cooking tips, and food stories delivered to your inbox
			</p>
			<form class="newsletter-form">
				<input type="email" placeholder="Enter your email" class="newsletter-input" />
				<button type="submit" class="newsletter-button">Subscribe</button>
			</form>
		</div>
	</section>
</div>

<style lang="postcss">
	.blog-container {
		@apply mx-auto max-w-7xl px-4 py-8;
	}

	.hero {
		@apply mb-12 text-center;
	}

	.hero-title {
		@apply mb-4 text-5xl font-bold text-gray-900 dark:text-white;
		@apply bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent;
	}

	.hero-subtitle {
		@apply text-xl text-gray-600 dark:text-gray-400;
	}

	.filters-section {
		@apply mb-12 flex flex-col items-center gap-8;
	}

	.search-bar {
		@apply relative mx-auto w-full max-w-2xl px-4;
	}

	.search-icon {
		@apply pointer-events-none absolute left-6 top-1/2 -translate-y-1/2 text-gray-400;
	}

	.search-input {
		@apply w-full rounded-full border border-gray-200 bg-white px-12 py-3 text-gray-900 outline-none transition-all;
		@apply focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20;
		@apply dark:border-gray-700 dark:bg-gray-800 dark:text-white;
	}

	.categories-filter {
		@apply flex flex-wrap items-center justify-center gap-3;
		@apply w-full max-w-4xl px-4;
	}

	.category-btn {
		@apply rounded-full px-4 py-2 text-sm font-medium transition-all;
		@apply text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800;
	}

	.category-btn.active {
		@apply bg-orange-500 text-white hover:bg-orange-600;
	}

	.sort-options {
		@apply flex items-center justify-center gap-2;
		@apply border-t border-gray-200 pt-6 dark:border-gray-700;
		@apply w-full max-w-4xl;
	}

	.sort-btn {
		@apply rounded-md px-4 py-2 text-sm font-medium transition-all;
		@apply text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800;
	}

	.sort-btn.active {
		@apply bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-white;
	}

	.posts-grid {
		@apply grid gap-8;
		@apply grid-cols-1 md:grid-cols-2 lg:grid-cols-3;
	}

	.blog-card {
		@apply overflow-hidden rounded-2xl bg-white shadow-sm transition-all;
		@apply hover:shadow-xl hover:shadow-black/5;
		@apply dark:bg-gray-800 dark:hover:shadow-white/5;
	}

	.card-image-wrapper {
		@apply relative aspect-[16/9] w-full overflow-hidden;
	}

	.card-image {
		@apply h-full w-full object-cover transition-transform duration-500;
	}

	.blog-card:hover .card-image {
		@apply scale-110;
	}

	.category-tag {
		@apply absolute left-4 top-4 rounded-full bg-white/90 px-3 py-1 text-sm font-medium backdrop-blur-sm;
		@apply dark:bg-black/50;
	}

	.card-content {
		@apply p-6;
	}

	.card-meta {
		@apply mb-4 flex items-center justify-between;
	}

	.author-info {
		@apply flex items-center gap-2;
	}

	.author-avatar {
		@apply h-8 w-8 rounded-full;
	}

	.author-name {
		@apply text-sm font-medium text-gray-900 dark:text-white;
	}

	.read-time {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.card-title {
		@apply mb-2 text-xl font-bold text-gray-900 dark:text-white;
	}

	.card-excerpt {
		@apply mb-4 line-clamp-2 text-gray-600 dark:text-gray-400;
	}

	.card-footer {
		@apply flex items-center justify-between border-t border-gray-100 pt-4 dark:border-gray-700;
	}

	.post-date {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.read-more {
		@apply flex items-center gap-1 text-sm font-medium text-orange-500 transition-colors;
		@apply hover:text-orange-600;
	}

	.newsletter {
		@apply mt-24 rounded-3xl bg-gradient-to-r from-orange-500 to-red-500 px-6 py-16 text-center text-white;
	}

	.newsletter-content {
		@apply mx-auto max-w-2xl;
	}

	.newsletter-title {
		@apply mb-4 text-3xl font-bold;
	}

	.newsletter-description {
		@apply mb-8 text-lg text-white/90;
	}

	.newsletter-form {
		@apply flex gap-4;
	}

	.newsletter-input {
		@apply flex-1 rounded-lg border-2 border-white/20 bg-white/10 px-4 py-3 text-white placeholder-white/60 backdrop-blur-sm;
		@apply focus:border-white/40 focus:outline-none;
	}

	.newsletter-button {
		@apply rounded-lg bg-white px-6 py-3 font-medium text-orange-500 transition-all;
		@apply hover:bg-orange-50;
	}
</style>



============================================================
File: ./src/routes/blog/[slug]/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import Comments from '$components/Comments/Comments.svelte';
	export let data;
</script>

<div class="mx-auto max-w-4xl">
	<h1 class="mb-4 text-4xl font-bold">{data.post.title}</h1>
	<div class="prose max-w-none">
		{@html data.post.content}
	</div>
	<Comments />
</div>



============================================================
File: ./src/routes/category/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import CategoryList from '../../components/CategoryList/CategoryList.svelte';
</script>

<div class="container mx-auto px-4 py-8">
	<h1 class="mb-8 text-4xl font-bold">Browse By Category</h1>
	<CategoryList />
</div>



============================================================
File: ./src/routes/category/[slug]/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import CardList from '$components/CardList/CardList.svelte';
	export let data;
</script>

<div class="container mx-auto px-4 py-8">
	<h1 class="mb-6 text-4xl font-bold">
		{data.category.name} Recipes
	</h1>
	<CardList posts={data.posts} />
</div>



============================================================
File: ./src/routes/demo/+page.svelte
Type: .svelte
============================================================

<a href="/demo/lucia">lucia</a>



============================================================
File: ./src/routes/demo/lucia/+page.server.ts
Type: .ts
============================================================

import * as auth from '$lib/server/auth';
import { fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';

export const load: PageServerLoad = async (event) => {
	if (!event.locals.user) {
		return redirect(302, '/demo/lucia/login');
	}
	return { user: event.locals.user };
};

export const actions: Actions = {
	logout: async (event) => {
		if (!event.locals.session) {
			return fail(401);
		}
		await auth.invalidateSession(event.locals.session.id);
		auth.deleteSessionTokenCookie(event);

		return redirect(302, '/demo/lucia/login');
	}
};



============================================================
File: ./src/routes/demo/lucia/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import { enhance } from '$app/forms';
	import type { PageServerData } from './$types';

	let { data }: { data: PageServerData } = $props();
</script>

<h1>Hi, {data.user.username}!</h1>
<p>Your user ID is {data.user.id}.</p>
<form method="post" action="?/logout" use:enhance>
	<button>Sign out</button>
</form>



============================================================
File: ./src/routes/demo/lucia/login/+page.server.ts
Type: .ts
============================================================

import { hash, verify } from '@node-rs/argon2';
import { encodeBase32LowerCase } from '@oslojs/encoding';
import { fail, redirect } from '@sveltejs/kit';
import { eq } from 'drizzle-orm';
import * as auth from '$lib/server/auth';
import { db } from '$lib/server/db';
import * as table from '$lib/server/db/schema';
import type { Actions, PageServerLoad } from './$types';

export const load: PageServerLoad = async (event) => {
	if (event.locals.user) {
		return redirect(302, '/demo/lucia');
	}
	return {};
};

export const actions: Actions = {
	login: async (event) => {
		const formData = await event.request.formData();
		const username = formData.get('username');
		const password = formData.get('password');

		if (!validateUsername(username)) {
			return fail(400, {
				message: 'Invalid username (min 3, max 31 characters, alphanumeric only)'
			});
		}
		if (!validatePassword(password)) {
			return fail(400, { message: 'Invalid password (min 6, max 255 characters)' });
		}

		const results = await db.select().from(table.user).where(eq(table.user.username, username));

		const existingUser = results.at(0);
		if (!existingUser) {
			return fail(400, { message: 'Incorrect username or password' });
		}

		const validPassword = await verify(existingUser.passwordHash, password, {
			memoryCost: 19456,
			timeCost: 2,
			outputLen: 32,
			parallelism: 1
		});
		if (!validPassword) {
			return fail(400, { message: 'Incorrect username or password' });
		}

		const sessionToken = auth.generateSessionToken();
		const session = await auth.createSession(sessionToken, existingUser.id);
		auth.setSessionTokenCookie(event, sessionToken, session.expiresAt);

		return redirect(302, '/demo/lucia');
	},
	register: async (event) => {
		const formData = await event.request.formData();
		const username = formData.get('username');
		const password = formData.get('password');

		if (!validateUsername(username)) {
			return fail(400, { message: 'Invalid username' });
		}
		if (!validatePassword(password)) {
			return fail(400, { message: 'Invalid password' });
		}

		const userId = generateUserId();
		const passwordHash = await hash(password, {
			// recommended minimum parameters
			memoryCost: 19456,
			timeCost: 2,
			outputLen: 32,
			parallelism: 1
		});

		try {
			await db.insert(table.user).values({ id: userId, username, passwordHash });

			const sessionToken = auth.generateSessionToken();
			const session = await auth.createSession(sessionToken, userId);
			auth.setSessionTokenCookie(event, sessionToken, session.expiresAt);
		} catch (e) {
			return fail(500, { message: 'An error has occurred' });
		}
		return redirect(302, '/demo/lucia');
	}
};

function generateUserId() {
	// ID with 120 bits of entropy, or about the same as UUID v4.
	const bytes = crypto.getRandomValues(new Uint8Array(15));
	const id = encodeBase32LowerCase(bytes);
	return id;
}

function validateUsername(username: unknown): username is string {
	return (
		typeof username === 'string' &&
		username.length >= 3 &&
		username.length <= 31 &&
		/^[a-z0-9_-]+$/.test(username)
	);
}

function validatePassword(password: unknown): password is string {
	return typeof password === 'string' && password.length >= 6 && password.length <= 255;
}



============================================================
File: ./src/routes/demo/lucia/login/+page.svelte
Type: .svelte
============================================================

<script lang="ts">
	import { enhance } from '$app/forms';
	import type { ActionData } from './$types';

	let { form }: { form: ActionData } = $props();
</script>

<h1>Login/Register</h1>
<form method="post" action="?/login" use:enhance>
	<label>
		Username
		<input name="username" />
	</label>
	<label>
		Password
		<input type="password" name="password" />
	</label>
	<button>Login</button>
	<button formaction="?/register">Register</button>
</form>
<p style="color: red">{form?.message ?? ''}</p>



============================================================
File: ./src/routes/login/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/login/+page.svelte - Premium Instagram-Style Login -->
<script lang="ts">
	import { theme } from '$lib/stores/theme';
	import { enhance } from '$app/forms';
	import { signIn } from '$lib/auth';
	import {
		Mail,
		Lock,
		Eye,
		EyeOff,
		ArrowRight,
		AlertCircle,
		Loader2,
		CheckCircle,
		User,
		Sparkles,
		Coffee,
		Heart
	} from 'lucide-svelte';
	import { fade, fly, scale, blur } from 'svelte/transition';
	import { quintOut, backOut, elasticOut } from 'svelte/easing';

	// State management
	let loginData = {
		emailOrUsername: '',
		password: '',
		rememberMe: false
	};

	let showPassword = false;
	let loading = false;
	let error = '';
	let success = false;
	let inputFocused = {
		emailOrUsername: false,
		password: false
	};

	// Validation states
	$: isValidEmailOrUsername = loginData.emailOrUsername.length >= 3;
	$: isValidPassword = loginData.password.length >= 6;
	$: canSubmit = isValidEmailOrUsername && isValidPassword && !loading;

	// Determine if input is email or username
	$: isEmail = loginData.emailOrUsername.includes('@');
	$: inputLabel = isEmail ? 'Email' : 'Username';

	// Animations
	let formContainer;
	let logoContainer;

	// Handle form submission
	async function handleSubmit() {
		if (!canSubmit) return;

		loading = true;
		error = '';

		try {
			// Simulate API call delay for better UX
			await new Promise((resolve) => setTimeout(resolve, 800));

			const result = await signIn(loginData.emailOrUsername, loginData.password);

			if (result.success) {
				success = true;
				// Redirect after success animation
				setTimeout(() => {
					window.location.href = '/';
				}, 1500);
			} else {
				error = result.error || 'Invalid credentials';
			}
		} catch (err) {
			error = 'Login failed. Please try again.';
		} finally {
			loading = false;
		}
	}

	// Social login handlers
	async function handleGoogleLogin() {
		window.location.href = '/api/auth/google';
	}

	async function handleFacebookLogin() {
		window.location.href = '/api/auth/facebook';
	}

	// Input handlers
	function handleFocus(field) {
		inputFocused[field] = true;
	}

	function handleBlur(field) {
		inputFocused[field] = false;
	}

	// Clear error when user starts typing
	$: if (loginData.emailOrUsername || loginData.password) {
		error = '';
	}
</script>

<svelte:head>
	<title>Sign In | OwnChef</title>
	<meta
		name="description"
		content="Sign in to your OwnChef account to discover and share amazing recipes"
	/>
</svelte:head>

<div class="login-page" class:dark={$theme === 'dark'}>
	<!-- Animated Background -->
	<div class="bg-animation">
		<div class="floating-shapes">
			{#each Array(6) as _, i}
				<div class="shape shape-{i + 1}" style="animation-delay: {i * 0.5}s"></div>
			{/each}
		</div>
	</div>

	<!-- Main Content -->
	<div class="login-container">
		<!-- Left Side - Branding -->
		<div class="branding-section" in:fly={{ x: -50, duration: 800, easing: quintOut }}>
			<div class="brand-content">
				<div
					class="logo-container"
					bind:this={logoContainer}
					in:scale={{ duration: 600, easing: backOut }}
				>
					<div class="logo-icon">
						<Coffee class="logo-coffee" />
						<Sparkles class="logo-sparkle" />
					</div>
					<div class="logo-text">
						<span class="logo-own">Own</span>
						<span class="logo-chef">CHEF</span>
					</div>
				</div>

				<h1 class="brand-title" in:fly={{ y: 30, duration: 600, delay: 200 }}>
					Welcome back to your culinary journey
				</h1>

				<p class="brand-subtitle" in:fly={{ y: 30, duration: 600, delay: 300 }}>
					Discover thousands of recipes, share your creations, and connect with food lovers
					worldwide.
				</p>

				<div class="brand-stats" in:fly={{ y: 30, duration: 600, delay: 400 }}>
					<div class="stat">
						<Heart class="stat-icon" />
						<span class="stat-text">10K+ Recipes</span>
					</div>
					<div class="stat">
						<User class="stat-icon" />
						<span class="stat-text">5K+ Chefs</span>
					</div>
				</div>
			</div>
		</div>

		<!-- Right Side - Login Form -->
		<div class="form-section" in:fly={{ x: 50, duration: 800, easing: quintOut }}>
			<div
				class="form-container"
				bind:this={formContainer}
				in:scale={{ duration: 600, delay: 200, easing: quintOut }}
			>
				<!-- Form Header -->
				<div class="form-header">
					<h2 class="form-title">Sign In</h2>
					<p class="form-subtitle">Choose your preferred sign in method</p>
				</div>

				<!-- Success State -->
				{#if success}
					<div class="success-state" in:scale={{ duration: 400, easing: elasticOut }}>
						<CheckCircle class="success-icon" />
						<h3 class="success-title">Welcome back!</h3>
						<p class="success-message">Redirecting you to your dashboard...</p>
					</div>
				{:else}
					<!-- Social Login -->
					<div class="social-section">
						<button
							class="social-btn google"
							on:click={handleGoogleLogin}
							in:fly={{ y: 20, duration: 400, delay: 300 }}
						>
							<svg class="social-icon" viewBox="0 0 24 24">
								<path
									fill="#4285F4"
									d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
								/>
								<path
									fill="#34A853"
									d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
								/>
								<path
									fill="#FBBC05"
									d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
								/>
								<path
									fill="#EA4335"
									d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
								/>
							</svg>
							<span>Continue with Google</span>
						</button>

						<button
							class="social-btn facebook"
							on:click={handleFacebookLogin}
							in:fly={{ y: 20, duration: 400, delay: 400 }}
						>
							<svg class="social-icon" viewBox="0 0 24 24">
								<path
									fill="#1877F2"
									d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"
								/>
							</svg>
							<span>Continue with Facebook</span>
						</button>
					</div>

					<!-- Divider -->
					<div class="divider" in:fade={{ duration: 400, delay: 500 }}>
						<span class="divider-text">or sign in with {inputLabel}</span>
					</div>

					<!-- Error Message -->
					{#if error}
						<div
							class="error-message"
							in:fly={{ y: -10, duration: 300 }}
							out:fly={{ y: -10, duration: 300 }}
						>
							<AlertCircle class="error-icon" />
							<span class="error-text">{error}</span>
						</div>
					{/if}

					<!-- Login Form -->
					<form class="login-form" on:submit|preventDefault={handleSubmit}>
						<!-- Email/Username Input -->
						<div class="input-group" in:fly={{ y: 20, duration: 400, delay: 600 }}>
							<div
								class="input-wrapper"
								class:focused={inputFocused.emailOrUsername}
								class:filled={loginData.emailOrUsername}
							>
								<label class="input-label" for="emailOrUsername">
									{inputLabel}
									{isEmail ? '' : 'or Email'}
								</label>
								<div class="input-container">
									{#if isEmail}
										<Mail class="input-icon" />
									{:else}
										<User class="input-icon" />
									{/if}
									<input
										id="emailOrUsername"
										type="text"
										class="form-input"
										bind:value={loginData.emailOrUsername}
										on:focus={() => handleFocus('emailOrUsername')}
										on:blur={() => handleBlur('emailOrUsername')}
										autocomplete="username"
										spellcheck="false"
									/>
								</div>
								{#if loginData.emailOrUsername && isValidEmailOrUsername}
									<CheckCircle class="validation-icon valid" in:scale={{ duration: 200 }} />
								{/if}
							</div>
						</div>

						<!-- Password Input -->
						<div class="input-group" in:fly={{ y: 20, duration: 400, delay: 700 }}>
							<div
								class="input-wrapper"
								class:focused={inputFocused.password}
								class:filled={loginData.password}
							>
								<label class="input-label" for="password">Password</label>
								<div class="input-container">
									<Lock class="input-icon" />
									<input
										id="password"
										type={showPassword ? 'text' : 'password'}
										class="form-input"
										bind:value={loginData.password}
										on:focus={() => handleFocus('password')}
										on:blur={() => handleBlur('password')}
										autocomplete="current-password"
									/>
									<button
										type="button"
										class="password-toggle"
										on:click={() => (showPassword = !showPassword)}
										tabindex="-1"
									>
										{#if showPassword}
											<EyeOff class="toggle-icon" />
										{:else}
											<Eye class="toggle-icon" />
										{/if}
									</button>
								</div>
								{#if loginData.password && isValidPassword}
									<CheckCircle class="validation-icon valid" in:scale={{ duration: 200 }} />
								{/if}
							</div>
						</div>

						<!-- Form Options -->
						<div class="form-options" in:fly={{ y: 20, duration: 400, delay: 800 }}>
							<label class="checkbox-wrapper">
								<input type="checkbox" bind:checked={loginData.rememberMe} class="checkbox-input" />
								<span class="checkbox-custom"></span>
								<span class="checkbox-label">Remember me for 30 days</span>
							</label>

							<a href="/forgot-password" class="forgot-link"> Forgot password? </a>
						</div>

						<!-- Submit Button -->
						<button
							type="submit"
							class="submit-btn"
							class:loading
							disabled={!canSubmit}
							in:fly={{ y: 20, duration: 400, delay: 900 }}
						>
							{#if loading}
								<Loader2 class="btn-icon spinning" />
								<span>Signing in...</span>
							{:else}
								<span>Sign In</span>
								<ArrowRight class="btn-icon" />
							{/if}
						</button>
					</form>

					<!-- Sign Up Link -->
					<div class="signup-prompt" in:fly={{ y: 20, duration: 400, delay: 1000 }}>
						<p class="signup-text">
							Don't have an account?
							<a href="/signup" class="signup-link">Sign up for free</a>
						</p>
					</div>
				{/if}
			</div>
		</div>
	</div>
</div>

<style lang="postcss">
	/* Global Styles */
	.login-page {
		@apply relative min-h-screen overflow-hidden;
		background: linear-gradient(135deg, #fef7ed 0%, #fff7ed 50%, #fef3c7 100%);
	}

	.login-page.dark {
		background: linear-gradient(135deg, #0c0a09 0%, #1c1917 50%, #292524 100%);
	}

	/* Animated Background */
	.bg-animation {
		@apply pointer-events-none absolute inset-0 overflow-hidden;
	}

	.floating-shapes {
		@apply relative h-full w-full;
	}

	.shape {
		@apply absolute rounded-full opacity-10;
		animation: float 20s infinite linear;
	}

	.shape-1 {
		@apply h-32 w-32 bg-orange-400;
		top: 10%;
		left: 10%;
		animation-duration: 25s;
	}

	.shape-2 {
		@apply h-24 w-24 bg-red-400;
		top: 20%;
		right: 15%;
		animation-duration: 30s;
		animation-direction: reverse;
	}

	.shape-3 {
		@apply h-40 w-40 bg-yellow-400;
		bottom: 20%;
		left: 20%;
		animation-duration: 35s;
	}

	.shape-4 {
		@apply h-20 w-20 bg-pink-400;
		top: 60%;
		right: 25%;
		animation-duration: 20s;
		animation-direction: reverse;
	}

	.shape-5 {
		@apply h-36 w-36 bg-purple-400;
		bottom: 10%;
		right: 10%;
		animation-duration: 40s;
	}

	.shape-6 {
		@apply h-28 w-28 bg-blue-400;
		top: 40%;
		left: 5%;
		animation-duration: 28s;
		animation-direction: reverse;
	}

	@keyframes float {
		0%,
		100% {
			transform: translateY(0px) rotate(0deg);
		}
		25% {
			transform: translateY(-20px) rotate(90deg);
		}
		50% {
			transform: translateY(0px) rotate(180deg);
		}
		75% {
			transform: translateY(20px) rotate(270deg);
		}
	}

	/* Main Container */
	.login-container {
		@apply relative z-10 flex min-h-screen;
	}

	/* Branding Section */
	.branding-section {
		@apply hidden items-center justify-center p-12 lg:flex lg:w-1/2;
	}

	.brand-content {
		@apply max-w-lg space-y-8;
	}

	.logo-container {
		@apply mb-8 flex items-center gap-4;
	}

	.logo-icon {
		@apply relative;
	}

	.logo-coffee {
		@apply h-12 w-12 text-orange-500;
		animation: bounce 2s infinite;
	}

	.logo-sparkle {
		@apply absolute -right-1 -top-1 h-6 w-6 text-yellow-400;
		animation: sparkle 3s infinite;
	}

	@keyframes bounce {
		0%,
		20%,
		50%,
		80%,
		100% {
			transform: translateY(0);
		}
		40% {
			transform: translateY(-10px);
		}
		60% {
			transform: translateY(-5px);
		}
	}

	@keyframes sparkle {
		0%,
		100% {
			transform: rotate(0deg) scale(1);
			opacity: 1;
		}
		50% {
			transform: rotate(180deg) scale(1.2);
			opacity: 0.8;
		}
	}

	.logo-text {
		@apply flex flex-col;
	}

	.logo-own {
		@apply bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-4xl font-black text-transparent;
	}

	.logo-chef {
		@apply -mt-2 text-2xl font-bold text-gray-800 dark:text-gray-200;
		letter-spacing: 0.1em;
	}

	.brand-title {
		@apply text-4xl font-bold leading-tight text-gray-900 dark:text-white;
	}

	.brand-subtitle {
		@apply text-lg leading-relaxed text-gray-600 dark:text-gray-400;
	}

	.brand-stats {
		@apply flex gap-6;
	}

	.stat {
		@apply flex items-center gap-2 text-gray-500 dark:text-gray-400;
	}

	.stat-icon {
		@apply h-5 w-5 text-orange-500;
	}

	.stat-text {
		@apply text-sm font-medium;
	}

	/* Form Section */
	.form-section {
		@apply flex w-full items-center justify-center p-6 lg:w-1/2 lg:p-12;
	}

	.form-container {
		@apply w-full max-w-md space-y-6;
		@apply bg-white/80 backdrop-blur-xl dark:bg-gray-900/80;
		@apply rounded-3xl border border-white/20 p-8 shadow-2xl dark:border-gray-700/20;
	}

	/* Form Header */
	.form-header {
		@apply mb-8 space-y-2 text-center;
	}

	.form-title {
		@apply text-3xl font-bold text-gray-900 dark:text-white;
	}

	.form-subtitle {
		@apply text-gray-600 dark:text-gray-400;
	}

	/* Success State */
	.success-state {
		@apply space-y-4 py-8 text-center;
	}

	.success-icon {
		@apply mx-auto h-16 w-16 text-green-500;
		animation: successPulse 2s infinite;
	}

	@keyframes successPulse {
		0%,
		100% {
			transform: scale(1);
		}
		50% {
			transform: scale(1.1);
		}
	}

	.success-title {
		@apply text-2xl font-bold text-gray-900 dark:text-white;
	}

	.success-message {
		@apply text-gray-600 dark:text-gray-400;
	}

	/* Social Login */
	.social-section {
		@apply mb-6 space-y-3;
	}

	.social-btn {
		@apply flex w-full items-center justify-center gap-3 p-4;
		@apply bg-white hover:bg-gray-50 dark:bg-gray-800 dark:hover:bg-gray-700;
		@apply rounded-xl border border-gray-200 dark:border-gray-600;
		@apply font-medium text-gray-700 dark:text-gray-300;
		@apply transform transition-all duration-300;
		@apply hover:scale-[1.02] hover:shadow-lg;
	}

	.social-btn.google {
		@apply hover:border-blue-300 hover:shadow-blue-100 dark:hover:shadow-blue-900/20;
	}

	.social-btn.facebook {
		@apply hover:border-blue-600 hover:shadow-blue-100 dark:hover:shadow-blue-900/20;
	}

	.social-icon {
		@apply h-5 w-5;
	}

	/* Divider */
	.divider {
		@apply relative my-6;
	}

	.divider::before {
		@apply absolute inset-0 flex items-center;
		content: '';
	}

	.divider::before {
		@apply border-t border-gray-200 dark:border-gray-700;
	}

	.divider-text {
		@apply relative flex justify-center text-sm text-gray-500 dark:text-gray-400;
		@apply bg-white px-4 dark:bg-gray-900;
	}

	/* Error Message */
	.error-message {
		@apply mb-4 flex items-center gap-2 p-3;
		@apply border border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20;
		@apply rounded-lg text-sm text-red-600 dark:text-red-400;
	}

	.error-icon {
		@apply h-4 w-4 flex-shrink-0;
	}

	/* Form Inputs */
	.login-form {
		@apply space-y-4;
	}

	.input-group {
		@apply relative;
	}

	.input-wrapper {
		@apply relative;
		@apply rounded-xl border border-gray-200 dark:border-gray-600;
		@apply transition-all duration-300;
		@apply hover:border-gray-300 dark:hover:border-gray-500;
	}

	.input-wrapper.focused {
		@apply border-orange-500 ring-2 ring-orange-500/20 dark:border-orange-400;
		@apply shadow-lg shadow-orange-500/10;
	}

	.input-label {
		@apply absolute -top-2 left-3 px-2 text-xs font-medium;
		@apply bg-white text-gray-600 dark:bg-gray-900 dark:text-gray-400;
		@apply transition-all duration-300;
		opacity: 0;
		transform: translateY(10px);
	}

	.input-wrapper.focused .input-label,
	.input-wrapper.filled .input-label {
		opacity: 1;
		transform: translateY(0);
		@apply text-orange-500 dark:text-orange-400;
	}

	.input-container {
		@apply relative flex items-center;
	}

	.input-icon {
		@apply absolute left-4 h-5 w-5 text-gray-400;
		@apply transition-colors duration-300;
	}

	.input-wrapper.focused .input-icon {
		@apply text-orange-500 dark:text-orange-400;
	}

	.form-input {
		@apply w-full bg-transparent py-4 pl-12 pr-12;
		@apply text-gray-900 placeholder-gray-400 dark:text-white;
		@apply focus:outline-none;
		@apply font-medium;
	}

	.password-toggle {
		@apply absolute right-4 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300;
		@apply transition-colors duration-200;
	}

	.toggle-icon {
		@apply h-4 w-4;
	}

	.validation-icon {
		@apply absolute right-4 h-4 w-4;
	}

	.validation-icon.valid {
		@apply text-green-500;
	}

	/* Form Options */
	.form-options {
		@apply flex items-center justify-between;
	}

	.checkbox-wrapper {
		@apply flex cursor-pointer items-center gap-2;
	}

	.checkbox-input {
		@apply sr-only;
	}

	.checkbox-custom {
		@apply h-4 w-4 rounded border-2 border-gray-300 dark:border-gray-600;
		@apply transition-all duration-200;
		@apply flex items-center justify-center;
	}

	.checkbox-input:checked + .checkbox-custom {
		@apply border-orange-500 bg-orange-500;
	}

	.checkbox-input:checked + .checkbox-custom::after {
		content: '‚úì';
		@apply text-xs font-bold text-white;
	}

	.checkbox-label {
		@apply text-sm text-gray-600 dark:text-gray-400;
	}

	.forgot-link {
		@apply text-sm font-medium text-orange-500 hover:text-orange-600;
		@apply transition-colors duration-200;
	}

	/* Submit Button */
	.submit-btn {
		@apply flex w-full items-center justify-center gap-2 p-4;
		@apply bg-gradient-to-r from-orange-500 to-red-500;
		@apply hover:from-orange-600 hover:to-red-600;
		@apply rounded-xl font-semibold text-white;
		@apply transform transition-all duration-300;
		@apply hover:scale-[1.02] hover:shadow-lg hover:shadow-orange-500/25;
		@apply disabled:transform-none disabled:cursor-not-allowed disabled:opacity-50;
	}

	.submit-btn.loading {
		@apply cursor-wait;
	}

	.btn-icon {
		@apply h-5 w-5;
	}

	.spinning {
		animation: spin 1s linear infinite;
	}

	@keyframes spin {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}

	/* Sign Up Prompt */
	.signup-prompt {
		@apply border-t border-gray-200 pt-6 text-center dark:border-gray-700;
	}

	.signup-text {
		@apply text-gray-600 dark:text-gray-400;
	}

	.signup-link {
		@apply font-semibold text-orange-500 hover:text-orange-600;
		@apply transition-colors duration-200;
	}

	/* Responsive Design */
	@media (max-width: 1024px) {
		.login-container {
			@apply justify-center;
		}

		.form-container {
			@apply mx-4;
		}
	}

	@media (max-width: 640px) {
		.form-container {
			@apply rounded-2xl p-6;
		}

		.form-title {
			@apply text-2xl;
		}

		.social-btn {
			@apply p-3;
		}

		.form-input {
			@apply py-3;
		}
	}
</style>



============================================================
File: ./src/routes/profile/[username]/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/profile/[username]/+page.svelte -->
<script lang="ts">
	import { page } from '$app/stores';
	import { theme } from '$lib/stores/theme';
	import { onMount } from 'svelte';
	import {
		ChefHat,
		Heart,
		Users,
		Settings,
		ExternalLink,
		MapPin,
		Calendar,
		Star,
		UtensilsCrossed,
		BookOpen,
		Clock,
		Grid,
		List
	} from 'lucide-svelte';
	import Card from '../../../components/Card/Card.svelte';

	// This would be fetched from your API in a real implementation
	const profile = {
		id: 'chef-Yuki',
		username: 'chef_Yuki',
		name: 'Chef Yuki Sakai',
		avatar: '/images/users/chef-yuki.jpg',
		bio: 'Professional chef with over 10 years of experience in japanese and fusion cuisine. Passionate about sharing authentic family recipes and teaching cooking techniques.',
		location: 'Tokyo, Japan',
		joined: '2022-03-15',
		website: 'https://yukiskitchen.com',
		social: {
			instagram: 'chef_yuki',
			youtube: 'YukisKitchenTV',
			tiktok: 'chefyuki_official'
		},
		stats: {
			followers: 12400,
			following: 345,
			recipes: 87,
			likes: 4523
		},
		isFollowing: false,
		isOwnProfile: false,
		verified: true
	};

	const recipes = [
		{
			id: 'butter-chicken',
			title: 'Classic Butter Chicken',
			description:
				'A rich and creamy tomato-based curry with tender chicken pieces marinated in yogurt and spices.',
			image: '/images/recipes/butter-chicken.jpg',
			cookTime: 45,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.8
		},
		{
			id: 'palak-paneer',
			title: 'Palak Paneer',
			description:
				'Creamy spinach curry with soft paneer cheese cubes, flavored with garlic, ginger, and aromatic spices.',
			image: '/images/recipes/palak-paneer.jpg',
			cookTime: 35,
			category: 'Indian',
			difficulty: 'Easy',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.7
		},
		{
			id: 'chicken-biryani',
			title: 'Chicken Biryani',
			description:
				'Fragrant basmati rice cooked with tender chicken pieces, saffron, and a blend of traditional spices.',
			image: '/images/recipes/biriyani.jpg',
			cookTime: 60,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.9
		},
		{
			id: 'masala-dosa',
			title: 'Masala Dosa',
			description:
				'Crispy rice and lentil crepes filled with spiced potato filling, served with coconut chutney and sambar.',
			image: '/images/recipes/masala-dosa.jpg',
			cookTime: 50,
			category: 'Indian',
			difficulty: 'Hard',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.6
		},
		{
			id: 'gulab-jamun',
			title: 'Gulab Jamun',
			description:
				'Soft, spongy milk solids dumplings soaked in rose and cardamom flavored sugar syrup.',
			image: '/images/recipes/gulab-jamun.jpg',
			cookTime: 40,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.7
		},
		{
			id: 'vegetable-samosas',
			title: 'Vegetable Samosas',
			description:
				'Crispy pastry triangles filled with spiced potatoes and peas, deep-fried to golden perfection.',
			image: '/images/recipes/samosa.jpg',
			cookTime: 55,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: profile.name,
				avatar: profile.avatar
			},
			rating: 4.5
		}
	];

	const savedRecipes = recipes.slice(0, 2);
	const likedRecipes = recipes.slice(2, 4);

	let activeTab = 'recipes';
	let viewMode = 'grid';

	function formatDate(dateString: string): string {
		const date = new Date(dateString);
		return new Intl.DateTimeFormat('en-US', {
			year: 'numeric',
			month: 'long'
		}).format(date);
	}

	function toggleFollow() {
		profile.isFollowing = !profile.isFollowing;
		profile.stats.followers += profile.isFollowing ? 1 : -1;
	}

	let hasScrolled = false;

	onMount(() => {
		// You would fetch the profile data here in a real implementation
		console.log('Profile page mounted');

		const handleScroll = () => {
			hasScrolled = window.scrollY > 250;
		};

		window.addEventListener('scroll', handleScroll);

		return () => {
			window.removeEventListener('scroll', handleScroll);
		};
	});
</script>

<svelte:head>
	<title>{profile.name} | OwnChef</title>
	<meta name="description" content={profile.bio} />
</svelte:head>

<div class="profile-page" class:dark={$theme === 'dark'}>
	<!-- Profile Header Section -->
	<div class="profile-header">
		<div class="profile-cover">
			<div class="cover-overlay"></div>
		</div>

		<div class="profile-info-container">
			<div class="profile-info">
				<div class="profile-avatar-container">
					<img src={profile.avatar} alt={profile.name} class="profile-avatar" />
					{#if profile.verified}
						<span class="verified-badge" title="Verified Chef">
							<ChefHat size={16} class="badge-icon" />
						</span>
					{/if}
				</div>

				<div class="profile-details">
					<h1 class="profile-name">{profile.name}</h1>
					<p class="profile-username">@{profile.username}</p>

					<div class="profile-meta">
						{#if profile.location}
							<div class="meta-item">
								<MapPin size={16} class="meta-icon" />
								<span>{profile.location}</span>
							</div>
						{/if}

						<div class="meta-item">
							<Calendar size={16} class="meta-icon" />
							<span>Joined {formatDate(profile.joined)}</span>
						</div>

						{#if profile.website}
							<a
								href={profile.website}
								target="_blank"
								rel="noopener noreferrer"
								class="meta-item website"
							>
								<ExternalLink size={16} class="meta-icon" />
								<span>{profile.website.replace(/(^\w+:|^)\/\//, '')}</span>
							</a>
						{/if}
					</div>

					<p class="profile-bio">{profile.bio}</p>

					<div class="profile-stats">
						<div class="stat-item">
							<span class="stat-value">{profile.stats.recipes}</span>
							<span class="stat-label">Recipes</span>
						</div>
						<div class="stat-item">
							<span class="stat-value">{profile.stats.followers.toLocaleString()}</span>
							<span class="stat-label">Followers</span>
						</div>
						<div class="stat-item">
							<span class="stat-value">{profile.stats.following.toLocaleString()}</span>
							<span class="stat-label">Following</span>
						</div>
						<div class="stat-item">
							<span class="stat-value">{profile.stats.likes.toLocaleString()}</span>
							<span class="stat-label">Likes</span>
						</div>
					</div>
				</div>

				<div class="profile-actions">
					{#if profile.isOwnProfile}
						<a href="/settings/profile" class="edit-profile-button">
							<Settings size={18} class="button-icon" />
							Edit Profile
						</a>
					{:else}
						<button
							class="follow-button"
							class:following={profile.isFollowing}
							on:click={toggleFollow}
						>
							<Users size={18} class="button-icon" />
							{profile.isFollowing ? 'Following' : 'Follow'}
						</button>
					{/if}
				</div>
			</div>

			<div class="social-links">
				{#if profile.social.instagram}
					<a
						href={`https://instagram.com/${profile.social.instagram}`}
						target="_blank"
						rel="noopener noreferrer"
						class="social-link instagram"
						aria-label="Instagram"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="social-icon"
						>
							<rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect>
							<path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path>
							<line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line>
						</svg>
					</a>
				{/if}

				{#if profile.social.youtube}
					<a
						href={`https://youtube.com/@${profile.social.youtube}`}
						target="_blank"
						rel="noopener noreferrer"
						class="social-link youtube"
						aria-label="YouTube"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="social-icon"
						>
							<path
								d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"
							></path>
							<polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon>
						</svg>
					</a>
				{/if}

				{#if profile.social.tiktok}
					<a
						href={`https://tiktok.com/@${profile.social.tiktok}`}
						target="_blank"
						rel="noopener noreferrer"
						class="social-link tiktok"
						aria-label="TikTok"
					>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							viewBox="0 0 24 24"
							fill="none"
							stroke="currentColor"
							stroke-width="2"
							stroke-linecap="round"
							stroke-linejoin="round"
							class="social-icon"
						>
							<path d="M9 12a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"></path>
							<path d="M14 12a4 4 0 1 0 0 8 4 4 0 0 0 0-8z"></path>
							<path d="M8 8v8"></path>
							<path d="M16 16V8a4 4 0 0 0-4-4"></path>
							<path d="M16 8h4"></path>
						</svg>
					</a>
				{/if}
			</div>
		</div>
	</div>

	<!-- Sticky Navigation -->
	<div class="profile-navigation" class:sticky={hasScrolled}>
		<div class="navigation-tabs">
			<button
				class="nav-tab"
				class:active={activeTab === 'recipes'}
				on:click={() => (activeTab = 'recipes')}
			>
				<UtensilsCrossed size={18} class="tab-icon" />
				<span>Recipes</span>
				<span class="tab-count">{profile.stats.recipes}</span>
			</button>

			<button
				class="nav-tab"
				class:active={activeTab === 'saved'}
				on:click={() => (activeTab = 'saved')}
			>
				<BookOpen size={18} class="tab-icon" />
				<span>Saved</span>
				<span class="tab-count">{savedRecipes.length}</span>
			</button>

			<button
				class="nav-tab"
				class:active={activeTab === 'liked'}
				on:click={() => (activeTab = 'liked')}
			>
				<Heart size={18} class="tab-icon" />
				<span>Liked</span>
				<span class="tab-count">{likedRecipes.length}</span>
			</button>
		</div>

		<div class="view-toggles">
			<button
				class="view-toggle"
				class:active={viewMode === 'grid'}
				on:click={() => (viewMode = 'grid')}
				aria-label="Grid view"
			>
				<Grid size={18} />
			</button>
			<button
				class="view-toggle"
				class:active={viewMode === 'list'}
				on:click={() => (viewMode = 'list')}
				aria-label="List view"
			>
				<List size={18} />
			</button>
		</div>
	</div>

	<!-- Recipe Content -->
	<div class="profile-content">
		{#if activeTab === 'recipes'}
			<div class="tab-header">
				<h2 class="tab-title">Recipes by {profile.name}</h2>
				<div class="tab-filters">
					<select class="filter-select">
						<option value="newest">Newest First</option>
						<option value="oldest">Oldest First</option>
						<option value="popular">Most Popular</option>
					</select>
				</div>
			</div>

			{#if recipes.length > 0}
				<div class="recipes-grid" class:list-view={viewMode === 'list'}>
					{#each recipes as recipe}
						<Card {recipe} />
					{/each}
				</div>
			{:else}
				<div class="empty-state">
					<div class="empty-icon">
						<UtensilsCrossed size={48} class="text-gray-300 dark:text-gray-600" />
					</div>
					<h3 class="empty-title">No recipes yet</h3>
					<p class="empty-message">
						{profile.isOwnProfile
							? "You haven't added any recipes yet. Share your first recipe!"
							: `${profile.name} hasn't added any recipes yet.`}
					</p>
					{#if profile.isOwnProfile}
						<a href="/write" class="empty-action">Add Recipe</a>
					{/if}
				</div>
			{/if}
		{:else if activeTab === 'saved'}
			<div class="tab-header">
				<h2 class="tab-title">Saved Recipes</h2>
			</div>

			{#if savedRecipes.length > 0}
				<div class="recipes-grid" class:list-view={viewMode === 'list'}>
					{#each savedRecipes as recipe}
						<Card {recipe} />
					{/each}
				</div>
			{:else}
				<div class="empty-state">
					<div class="empty-icon">
						<BookOpen size={48} class="text-gray-300 dark:text-gray-600" />
					</div>
					<h3 class="empty-title">No saved recipes</h3>
					<p class="empty-message">
						{profile.isOwnProfile
							? "You haven't saved any recipes yet. Browse recipes and save your favorites!"
							: `${profile.name} hasn't saved any recipes yet.`}
					</p>
					{#if profile.isOwnProfile}
						<a href="/recipes" class="empty-action">Browse Recipes</a>
					{/if}
				</div>
			{/if}
		{:else if activeTab === 'liked'}
			<div class="tab-header">
				<h2 class="tab-title">Liked Recipes</h2>
			</div>

			{#if likedRecipes.length > 0}
				<div class="recipes-grid" class:list-view={viewMode === 'list'}>
					{#each likedRecipes as recipe}
						<Card {recipe} />
					{/each}
				</div>
			{:else}
				<div class="empty-state">
					<div class="empty-icon">
						<Heart size={48} class="text-gray-300 dark:text-gray-600" />
					</div>
					<h3 class="empty-title">No liked recipes</h3>
					<p class="empty-message">
						{profile.isOwnProfile
							? "You haven't liked any recipes yet. Like recipes to show your appreciation!"
							: `${profile.name} hasn't liked any recipes yet.`}
					</p>
					{#if profile.isOwnProfile}
						<a href="/recipes" class="empty-action">Browse Recipes</a>
					{/if}
				</div>
			{/if}
		{/if}
	</div>
</div>

<style lang="postcss">
	.profile-page {
		@apply pb-16;
	}

	/* Profile Header Styles */
	.profile-header {
		@apply relative mb-6;
	}

	.profile-cover {
		@apply relative h-48 w-full overflow-hidden bg-gradient-to-r from-orange-400 via-red-500 to-orange-500 sm:h-64;
	}

	.cover-overlay {
		@apply absolute inset-0 bg-black/20;
	}

	.profile-info-container {
		@apply relative mx-auto max-w-7xl px-4;
	}

	.profile-info {
		@apply -mt-16 grid grid-cols-1 gap-6 sm:-mt-24 sm:grid-cols-[auto_1fr_auto];
	}

	.profile-avatar-container {
		@apply relative;
	}

	.profile-avatar {
		@apply h-32 w-32 rounded-full border-4 border-white object-cover shadow-md sm:h-40 sm:w-40 dark:border-gray-800;
	}

	.verified-badge {
		@apply absolute bottom-2 right-2 flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-r from-orange-500 to-red-500 text-white;
	}

	.badge-icon {
		@apply h-4 w-4;
	}

	.profile-details {
		@apply pt-4 sm:pt-8;
	}

	.profile-name {
		@apply mb-1 text-2xl font-bold text-gray-900 sm:text-3xl dark:text-white;
	}

	.profile-username {
		@apply mb-4 text-gray-600 dark:text-gray-400;
	}

	.profile-meta {
		@apply mb-4 flex flex-wrap gap-x-4 gap-y-2 text-sm text-gray-600 dark:text-gray-400;
	}

	.meta-item {
		@apply flex items-center gap-1.5;
	}

	.meta-icon {
		@apply text-gray-500 dark:text-gray-500;
	}

	.meta-item.website {
		@apply text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300;
	}

	.profile-bio {
		@apply mb-4 text-gray-700 dark:text-gray-300;
	}

	.profile-stats {
		@apply flex flex-wrap gap-6;
	}

	.stat-item {
		@apply flex flex-col;
	}

	.stat-value {
		@apply font-bold text-gray-900 dark:text-white;
	}

	.stat-label {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.profile-actions {
		@apply flex gap-4 pt-4 sm:pt-8;
	}

	.edit-profile-button,
	.follow-button {
		@apply flex items-center gap-2 rounded-full px-6 py-2 font-medium transition-all;
	}

	.edit-profile-button {
		@apply bg-gray-100 text-gray-900 hover:bg-gray-200 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-700;
	}

	.follow-button {
		@apply bg-gradient-to-r from-orange-500 to-red-500 text-white hover:shadow-lg hover:shadow-orange-500/20;
	}

	.follow-button.following {
		@apply bg-gray-100 bg-none text-gray-900 hover:bg-gray-200 dark:bg-gray-800 dark:text-white dark:hover:bg-gray-700;
	}

	.button-icon {
		@apply h-4 w-4;
	}

	.social-links {
		@apply mt-6 flex justify-center gap-4 border-t border-gray-200 pt-6 sm:justify-end dark:border-gray-700;
	}

	.social-link {
		@apply flex h-10 w-10 items-center justify-center rounded-full transition-all;
	}

	.social-icon {
		@apply h-5 w-5;
	}

	.social-link.instagram {
		@apply text-[#d62976] hover:bg-[#d62976]/10;
	}

	.social-link.youtube {
		@apply text-[#FF0000] hover:bg-[#FF0000]/10;
	}

	.social-link.tiktok {
		@apply text-[#000000] hover:bg-[#000000]/10 dark:text-[#ffffff] dark:hover:bg-[#ffffff]/10;
	}

	/* Navigation Styles */
	.profile-navigation {
		@apply mb-6 flex items-center justify-between border-b border-gray-200 bg-white px-4 py-2 dark:border-gray-700 dark:bg-gray-800;
	}

	.profile-navigation.sticky {
		position: sticky;
		top: 0;
		z-index: 40;
		@apply shadow-sm;
	}

	.navigation-tabs {
		@apply flex overflow-x-auto;
	}

	.nav-tab {
		@apply flex items-center gap-2 px-4 py-3 text-sm font-medium text-gray-600 transition-colors hover:text-gray-900 dark:text-gray-400 dark:hover:text-white;
	}

	.nav-tab.active {
		@apply border-b-2 border-orange-500 text-orange-500 dark:border-orange-400 dark:text-orange-400;
	}

	.tab-icon {
		@apply h-4 w-4;
	}

	.tab-count {
		@apply ml-1 rounded-full bg-gray-100 px-2 py-0.5 text-xs text-gray-700 dark:bg-gray-700 dark:text-gray-300;
	}

	.view-toggles {
		@apply flex rounded-lg border border-gray-200 p-1 dark:border-gray-700;
	}

	.view-toggle {
		@apply rounded-md p-1.5 text-gray-500 transition-colors hover:bg-gray-100 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white;
	}

	.view-toggle.active {
		@apply bg-gray-100 text-gray-900 dark:bg-gray-700 dark:text-white;
	}

	/* Content Styles */
	.profile-content {
		@apply mx-auto max-w-7xl px-4;
	}

	.tab-header {
		@apply mb-6 flex flex-wrap items-center justify-between gap-4;
	}

	.tab-title {
		@apply text-xl font-bold text-gray-900 dark:text-white;
	}

	.tab-filters {
		@apply flex gap-4;
	}

	.filter-select {
		@apply rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm text-gray-700 focus:border-orange-500 focus:outline-none focus:ring-2 focus:ring-orange-500/20 dark:border-gray-600 dark:bg-gray-700 dark:text-white;
	}

	.recipes-grid {
		@apply grid gap-6 sm:grid-cols-2 lg:grid-cols-3;
	}

	.recipes-grid.list-view {
		@apply grid-cols-1;
	}

	/* Empty State Styles */
	.empty-state {
		@apply flex flex-col items-center justify-center rounded-lg bg-white py-16 text-center shadow-sm dark:bg-gray-800;
	}

	.empty-icon {
		@apply mb-4;
	}

	.empty-title {
		@apply mb-2 text-xl font-semibold text-gray-900 dark:text-white;
	}

	.empty-message {
		@apply mb-6 max-w-md text-gray-600 dark:text-gray-400;
	}

	.empty-action {
		@apply rounded-full bg-gradient-to-r from-orange-500 to-red-500 px-6 py-2 font-medium text-white transition-all hover:shadow-lg hover:shadow-orange-500/20;
	}

	/* Media Queries */
	@media (max-width: 768px) {
		.profile-info {
			@apply grid-cols-1;
		}

		.profile-avatar {
			@apply mx-auto;
		}

		.profile-details {
			@apply text-center;
		}

		.profile-meta {
			@apply justify-center;
		}

		.profile-stats {
			@apply justify-center;
		}

		.profile-actions {
			@apply justify-center;
		}
	}
</style>



============================================================
File: ./src/routes/recipes/[slug]/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/recipes/[slug]/+page.svelte -->
<script lang="ts">
	import { page } from '$app/stores';
	import { theme } from '$lib/stores/theme';
	import { onMount } from 'svelte';
	import {
		Clock,
		Users,
		ChefHat,
		Flame,
		Bookmark,
		Heart,
		Share2,
		MessageCircle,
		Printer,
		Star,
		ThumbsUp,
		ChevronDown,
		AlertCircle
	} from 'lucide-svelte';
	import Comments from '../../../components/Comments/Comments.svelte';
	import CookingMode from '../../../components/CookingMode/CookingMode.svelte';

	let isCookingModeActive = false;

	function enterCookingMode() {
		isCookingModeActive = true;
		document.body.style.overflow = 'hidden'; // Prevent scrolling of main page
	}

	function exitCookingMode() {
		isCookingModeActive = false;
		document.body.style.overflow = ''; // Restore scrolling
	}

	// This would come from your API in a real implementation
	const recipe = {
		id: 'classic-butter-chicken',
		title: 'Classic Butter Chicken (Murgh Makhani)',
		description:
			"A rich, creamy, and aromatic Indian curry that's beloved worldwide. This authentic butter chicken recipe features tender chicken pieces in a velvety tomato-based sauce.",
		images: [
			'/images/recipes/butter-chicken.jpg',
			'/images/recipes/butter-chicken-2.jpg',
			'/images/recipes/butter-chicken-3.jpg'
		],
		cookTime: 45,
		prepTime: 20,
		totalTime: 65,
		servings: 4,
		difficulty: 'Medium',
		cuisine: 'Indian',
		category: 'Main Course',
		rating: 4.8,
		reviewsCount: 243,
		likesCount: 1243,
		isFavorited: false,
		isLiked: false,
		isSaved: false,
		author: {
			id: 'chef-yuki',
			name: 'Chef Yuki',
			avatar: '/images/users/chef-yuki.jpg',
			recipesCount: 87,
			followersCount: 12400
		},
		ingredients: [
			{
				group: 'For the Marinade',
				items: [
					'1 lb (450g) boneless, skinless chicken thighs, cut into bite-sized pieces',
					'1/2 cup plain yogurt',
					'2 tablespoons lemon juice',
					'4 cloves garlic, minced',
					'1 tablespoon ginger paste',
					'1 teaspoon garam masala',
					'1 teaspoon ground cumin',
					'1 teaspoon ground coriander',
					'1 teaspoon Kashmiri red chili powder (or mild paprika)',
					'1/2 teaspoon ground turmeric',
					'Salt to taste'
				]
			},
			{
				group: 'For the Sauce',
				items: [
					'3 tablespoons ghee or unsalted butter',
					'1 large onion, finely chopped',
					'2 green chilies, slit (optional, for heat)',
					'4 cloves garlic, minced',
					'1 tablespoon ginger paste',
					'1 cinnamon stick',
					'4 green cardamom pods, slightly crushed',
					'2 cloves',
					'1 bay leaf',
					'2 cups tomato puree (or 4 large tomatoes, pureed)',
					'1 tablespoon Kashmiri red chili powder',
					'1 teaspoon garam masala',
					'1/2 cup heavy cream',
					'2 tablespoons kasuri methi (dried fenugreek leaves)',
					'2 tablespoons honey or sugar',
					'Salt to taste'
				]
			},
			{
				group: 'For Garnish',
				items: [
					'2 tablespoons fresh cilantro, chopped',
					'1 tablespoon butter, for topping',
					'A swirl of cream, for topping'
				]
			}
		],
		steps: [
			{
				title: 'Marinate the Chicken',
				content:
					'In a large bowl, combine all marinade ingredients with the chicken pieces. Make sure all pieces are well coated. Cover and refrigerate for at least 2 hours, preferably overnight for best flavor.'
			},
			{
				title: 'Cook the Marinated Chicken',
				content:
					'Preheat your oven to 425¬∞F (220¬∞C). Line a baking sheet with aluminum foil and arrange the marinated chicken pieces in a single layer. Bake for 15 minutes, or until the chicken is cooked through and slightly charred on the edges. Alternatively, you can grill the chicken or cook it in a pan until done.'
			},
			{
				title: 'Prepare the Sauce',
				content:
					'Heat ghee or butter in a large, heavy-bottomed pot over medium heat. Add the cinnamon stick, cardamom pods, cloves, and bay leaf. Saut√© for 30 seconds until fragrant. Add the chopped onions and green chilies (if using) and saut√© until the onions are golden brown, about 5-7 minutes. Add the minced garlic and ginger paste. Saut√© for another 1-2 minutes until the raw smell disappears.'
			},
			{
				title: 'Add Tomatoes and Spices',
				content:
					'Pour in the tomato puree and bring to a simmer. Add the Kashmiri red chili powder and salt. Cover and simmer for about 15 minutes, stirring occasionally, until the sauce thickens and the oil begins to separate.'
			},
			{
				title: 'Blend the Sauce',
				content:
					'Remove the cinnamon stick, cardamom pods, cloves, and bay leaf. Let the sauce cool slightly, then transfer to a blender and blend until smooth. You can also use an immersion blender directly in the pot. Return the sauce to the pot if you used a countertop blender.'
			},
			{
				title: 'Finish the Dish',
				content:
					'Bring the sauce back to a simmer over medium heat. Add the cooked chicken pieces and any accumulated juices. Stir in the heavy cream, kasuri methi (crush it between your palms before adding), garam masala, and honey or sugar. Simmer for 5-7 minutes until the flavors meld together and the sauce reaches your desired consistency.'
			},
			{
				title: 'Garnish and Serve',
				content:
					'Just before serving, stir in the remaining tablespoon of butter until melted. Transfer to a serving dish, drizzle with a little cream, and sprinkle with chopped cilantro. Serve hot with naan bread or steamed rice.'
			}
		],
		tips: [
			'For a richer flavor, use bone-in chicken pieces in the marinade and remove the bones before adding to the sauce.',
			'The longer you marinate the chicken, the more flavorful and tender it will be.',
			'If the sauce is too thick, add a little water or chicken broth to reach your desired consistency.',
			"Don't skip the kasuri methi (dried fenugreek leaves) - it gives butter chicken its distinctive flavor.",
			'For a tangier sauce, add a tablespoon of tomato paste along with the tomato puree.'
		],
		nutrition: {
			calories: 420,
			protein: 28,
			carbs: 12,
			fat: 32,
			fiber: 3,
			sugar: 8
		},
		tags: ['Indian', 'chicken', 'curry', 'creamy', 'dinner', 'comfort food'],
		relatedRecipes: [
			{
				id: 'chicken-tikka-masala',
				title: 'Chicken Tikka Masala',
				image: '/images/recipes/chicken-tikka.jpeg'
			},
			{
				id: 'naan-bread',
				title: 'Homemade Naan Bread',
				image: '/images/recipes/naan.jpeg'
			},
			{
				id: 'palak-paneer',
				title: 'Palak Paneer',
				image: '/images/recipes/palak-paneer.jpg'
			}
		],
		createdAt: '2023-08-15T14:30:00Z',
		updatedAt: '2023-10-03T09:15:00Z'
	};

	// These would be state variables in a real implementation
	let activeImageIndex = 0;
	let expandedSection = '';
	let showAllIngredients = false;
	let showAllTips = false;

	function toggleExpandSection(section: string) {
		expandedSection = expandedSection === section ? '' : section;
	}

	function toggleLike() {
		recipe.isLiked = !recipe.isLiked;
		recipe.likesCount += recipe.isLiked ? 1 : -1;
	}

	function toggleSave() {
		recipe.isSaved = !recipe.isSaved;
	}

	function toggleFavorite() {
		recipe.isFavorited = !recipe.isFavorited;
	}

	function handleShare() {
		// Logic for sharing would go here
		console.log('Share recipe', recipe.id);
	}

	function formatDate(dateString: string): string {
		const date = new Date(dateString);
		return new Intl.DateTimeFormat('en-US', {
			year: 'numeric',
			month: 'long',
			day: 'numeric'
		}).format(date);
	}

	let reviews = [
		{
			id: 1,
			author: {
				name: 'Sarah M.',
				avatar: '/images/users/default-avatar.jpg'
			},
			rating: 5,
			date: '2023-09-28T10:30:00Z',
			content:
				"This butter chicken recipe is amazing! The flavors are perfectly balanced and it tastes just like what I've had at my favorite Indian restaurant."
		},
		{
			id: 2,
			author: {
				name: 'Michael R.',
				avatar: '/images/users/default-avatar.jpg'
			},
			rating: 4,
			date: '2023-09-15T14:22:00Z',
			content:
				'Really good recipe! I reduced the cream slightly and it was still delicious. Will definitely make again.'
		},
		{
			id: 3,
			author: {
				name: 'Jessica T.',
				avatar: '/images/users/default-avatar.jpg'
			},
			rating: 5,
			date: '2023-08-30T19:45:00Z',
			content:
				'The step by step instructions were so easy to follow. My family loved it! This is now going into our regular rotation.'
		}
	];

	let showAllReviews = false;
	let currentServings = recipe.servings;
	let servingsScaleFactor = 1;

	// Parse an ingredient string to separate quantity, unit, and ingredient name
	function parseIngredient(ingredientText: string) {
		// This regex matches patterns like "2 cups flour" or "1/2 teaspoon salt"
		const regex = /^((?:\d+\/\d+|\d+(?:\.\d+)?|\d+\s*-\s*\d+)?\s*(?:[\w\-\.]+)?)?\s*(.*)/;
		const match = ingredientText.match(regex);

		if (match) {
			const quantityWithUnit = match[1] ? match[1].trim() : '';
			const rest = match[2] ? match[2].trim() : '';

			// Try to split quantityWithUnit into quantity and unit
			const quantityUnitRegex = /^((?:\d+\/\d+|\d+(?:\.\d+)?|\d+\s*-\s*\d+)?)\s*([\w\-\.]*)?/;
			const quantityUnitMatch = quantityWithUnit.match(quantityUnitRegex);

			let quantity = '';
			let unit = '';

			if (quantityUnitMatch) {
				quantity = quantityUnitMatch[1] ? quantityUnitMatch[1].trim() : '';
				unit = quantityUnitMatch[2] ? quantityUnitMatch[2].trim() : '';
			}

			return {
				quantity,
				unit,
				ingredient: rest,
				original: ingredientText
			};
		}

		return {
			quantity: '',
			unit: '',
			ingredient: ingredientText,
			original: ingredientText
		};
	}

	// Convert fractions to decimal
	function fractionToDecimal(fraction: string): number {
		if (!fraction) return 0;

		// If it's already a number, return it
		if (!isNaN(Number(fraction))) return parseFloat(fraction);

		// If it contains a dash (like "1-2"), take the average
		if (fraction.includes('-')) {
			const [min, max] = fraction.split('-').map((part) => parseFloat(part.trim()));
			return (min + max) / 2;
		}

		// If it's a fraction like 1/2
		if (fraction.includes('/')) {
			const [numerator, denominator] = fraction.split('/').map((part) => parseFloat(part.trim()));
			return parseFloat(numerator.toString()) / parseFloat(denominator.toString());
		}

		return 0;
	}

	// Scale ingredient quantity
	function scaleQuantity(quantityStr: string, scaleFactor: number): string {
		if (!quantityStr) return '';

		const quantity = fractionToDecimal(quantityStr);
		if (quantity === 0) return quantityStr;

		const scaled = quantity * scaleFactor;

		// Format the scaled quantity nicely
		if (scaled === Math.floor(scaled)) {
			return Math.floor(scaled).toString();
		} else if (scaled < 1) {
			// For small quantities, try to convert to fractions
			if (Math.abs(scaled - 0.25) < 0.01) return '1/4';
			if (Math.abs(scaled - 0.33) < 0.01) return '1/3';
			if (Math.abs(scaled - 0.5) < 0.01) return '1/2';
			if (Math.abs(scaled - 0.67) < 0.01) return '2/3';
			if (Math.abs(scaled - 0.75) < 0.01) return '3/4';
			return scaled.toFixed(2);
		}

		return scaled.toFixed(1).replace(/\.0$/, '');
	}

	// Update the function that handles serving size changes
	function updateIngredientQuantities(newServings: number) {
		const scaleFactor = newServings / recipe.servings;
		currentServings = newServings;
		servingsScaleFactor = scaleFactor;
	}

	onMount(() => {
		// You would fetch the recipe data here in a real implementation
		console.log('Recipe detail page mounted');
	});
</script>

<svelte:head>
	<title>{recipe.title} | OwnChef</title>
	<meta name="description" content={recipe.description} />
</svelte:head>

<div class="recipe-detail-container" class:dark={$theme === 'dark'}>
	<!-- Recipe Header -->
	<header class="recipe-header">
		<div class="breadcrumb">
			<a href="/" class="breadcrumb-link">Home</a>
			<span class="breadcrumb-separator">/</span>
			<a href="/recipes" class="breadcrumb-link">Recipes</a>
			<span class="breadcrumb-separator">/</span>
			<a href="/recipes/category/{recipe.cuisine.toLowerCase()}" class="breadcrumb-link"
				>{recipe.cuisine}</a
			>
		</div>

		<h1 class="recipe-title">{recipe.title}</h1>

		<div class="recipe-meta">
			<div class="recipe-rating">
				<div class="stars">
					{#each Array(5) as _, i}
						<Star
							size={18}
							class="star"
							fill={i < Math.floor(recipe.rating) ? 'currentColor' : 'none'}
						/>
					{/each}
				</div>
				<span class="rating-value">{recipe.rating}</span>
				<span class="rating-count">({recipe.reviewsCount} reviews)</span>
			</div>

			<div class="recipe-time">
				<Clock size={18} class="time-icon" />
				<span>{recipe.totalTime} mins</span>
			</div>

			<div class="recipe-difficulty">
				<ChefHat size={18} class="difficulty-icon" />
				<span>{recipe.difficulty}</span>
			</div>

			<div class="recipe-servings">
				<Users size={18} class="servings-icon" />
				<span>{recipe.servings} servings</span>
			</div>
		</div>

		<div class="author-info">
			<img src={recipe.author.avatar} alt={recipe.author.name} class="author-avatar" />
			<div class="author-details">
				<a href="/profile/{recipe.author.id}" class="author-name">{recipe.author.name}</a>
				<div class="author-stats">
					<span>{recipe.author.recipesCount} recipes</span>
					<span class="stat-separator">‚Ä¢</span>
					<span>{recipe.author.followersCount.toLocaleString()} followers</span>
				</div>
			</div>
			<button class="follow-button">Follow</button>
		</div>
	</header>

	<!-- Recipe Content Grid -->
	<div class="recipe-content">
		<!-- Left Column: Images and Ingredients -->
		<div class="recipe-left-column">
			<!-- Recipe Images Gallery -->
			<div class="recipe-gallery">
				<div class="main-image-container">
					<img src={recipe.images[activeImageIndex]} alt={recipe.title} class="main-image" />

					<div class="image-navigation">
						<button
							class="nav-button prev"
							on:click={() =>
								(activeImageIndex =
									(activeImageIndex - 1 + recipe.images.length) % recipe.images.length)}
							aria-label="Previous image"
						>
							&lsaquo;
						</button>
						<button
							class="nav-button next"
							on:click={() => (activeImageIndex = (activeImageIndex + 1) % recipe.images.length)}
							aria-label="Next image"
						>
							&rsaquo;
						</button>
					</div>

					<div class="image-dots">
						{#each recipe.images as _, index}
							<button
								class="dot-button"
								class:active={activeImageIndex === index}
								on:click={() => (activeImageIndex = index)}
								aria-label={`Image ${index + 1} of ${recipe.images.length}`}
							></button>
						{/each}
					</div>
				</div>

				<div class="thumbnail-container">
					{#each recipe.images as image, index}
						<button
							class="thumbnail"
							class:active={activeImageIndex === index}
							on:click={() => (activeImageIndex = index)}
						>
							<img src={image} alt={`${recipe.title} - view ${index + 1}`} />
						</button>
					{/each}
				</div>
			</div>

			<!-- Recipe Actions -->
			<div class="recipe-actions">
				<button class="action-button" class:active={recipe.isLiked} on:click={toggleLike}>
					<Heart size={20} class="action-icon" fill={recipe.isLiked ? 'currentColor' : 'none'} />
					<span>{recipe.likesCount}</span>
				</button>

				<button class="action-button" class:active={recipe.isSaved} on:click={toggleSave}>
					<Bookmark size={20} class="action-icon" fill={recipe.isSaved ? 'currentColor' : 'none'} />
					<span>Save</span>
				</button>

				<button class="action-button" class:active={recipe.isFavorited} on:click={toggleFavorite}>
					<Star size={20} class="action-icon" fill={recipe.isFavorited ? 'currentColor' : 'none'} />
					<span>Favorite</span>
				</button>

				<button class="action-button" on:click={handleShare}>
					<Share2 size={20} class="action-icon" />
					<span>Share</span>
				</button>

				<button class="action-button print">
					<Printer size={20} class="action-icon" />
					<span>Print</span>
				</button>
			</div>

			<!-- Recipe Description -->
			<div class="recipe-description">
				<p>{recipe.description}</p>
			</div>

			<!-- Servings Adjuster -->
			<div class="servings-adjuster">
				<label for="servings">Adjust servings:</label>
				<div class="servings-controls">
					<button
						class="adjust-button minus"
						on:click={() => updateIngredientQuantities(Math.max(1, currentServings - 1))}
						disabled={currentServings <= 1}>-</button
					>
					<input
						type="number"
						id="servings"
						class="servings-input"
						bind:value={currentServings}
						min="1"
						max="20"
						on:change={(e) => updateIngredientQuantities(parseInt(e.currentTarget.value))}
					/>
					<button
						class="adjust-button plus"
						on:click={() => updateIngredientQuantities(currentServings + 1)}
						disabled={currentServings >= 20}>+</button
					>
				</div>
				{#if servingsScaleFactor !== 1}
					<div class="scaling-badge">
						{servingsScaleFactor > 1
							? `${servingsScaleFactor}√ó`
							: `√∑${Math.round(1 / servingsScaleFactor)}`}
					</div>
				{/if}
			</div>

			<!-- Ingredients -->
			<div class="recipe-ingredients">
				<h2 class="section-title">Ingredients</h2>

				{#each recipe.ingredients as group}
					<div class="ingredient-group">
						{#if group.group}
							<h3 class="ingredient-group-title">{group.group}</h3>
						{/if}

						<ul class="ingredients-list">
							{#each group.items.slice(0, showAllIngredients ? group.items.length : 5) as ingredient}
								<li class="ingredient-item">
									<div class="ingredient-checkbox">
										<input type="checkbox" id={`ingredient-${ingredient}`} />
										<label for={`ingredient-${ingredient}`}>
											{#if servingsScaleFactor !== 1 && parseIngredient(ingredient).quantity}
												<!-- Display scaled quantity -->
												<span class="scaled-quantity">
													{scaleQuantity(parseIngredient(ingredient).quantity, servingsScaleFactor)}
												</span>
												{#if parseIngredient(ingredient).unit}
													<span class="ingredient-unit">{parseIngredient(ingredient).unit}</span>
												{/if}
												<span class="ingredient-name">{parseIngredient(ingredient).ingredient}</span
												>
											{:else}
												{ingredient}
											{/if}
										</label>
									</div>
								</li>
							{/each}

							{#if !showAllIngredients && group.items.length > 5}
								<button class="show-more-button" on:click={() => (showAllIngredients = true)}>
									+ Show {group.items.length - 5} more ingredients
								</button>
							{/if}
						</ul>
					</div>
				{/each}

				{#if showAllIngredients}
					<button class="show-less-button" on:click={() => (showAllIngredients = false)}>
						- Show fewer ingredients
					</button>
				{/if}

				<div class="shopping-list-button-container">
					<button class="shopping-list-button">
						<Bookmark size={18} class="button-icon" />
						Add all to shopping list
					</button>
				</div>
			</div>

			<!-- Nutrition Information -->
			<div class="nutrition-info">
				<h2 class="section-title">Nutrition Per Serving</h2>
				<div class="nutrition-grid">
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.calories}</span>
						<span class="nutrition-label">Calories</span>
					</div>
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.protein}g</span>
						<span class="nutrition-label">Protein</span>
					</div>
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.carbs}g</span>
						<span class="nutrition-label">Carbs</span>
					</div>
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.fat}g</span>
						<span class="nutrition-label">Fat</span>
					</div>
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.fiber}g</span>
						<span class="nutrition-label">Fiber</span>
					</div>
					<div class="nutrition-item">
						<span class="nutrition-value">{recipe.nutrition.sugar}g</span>
						<span class="nutrition-label">Sugar</span>
					</div>
				</div>
				<div class="nutrition-disclaimer">
					<AlertCircle size={16} class="disclaimer-icon" />
					<p>
						Nutrition information is automatically calculated and should be considered an estimate.
					</p>
				</div>
			</div>
		</div>

		<!-- Right Column: Instructions and More -->
		<div class="recipe-right-column">
			<!-- Recipe Instructions -->
			<div class="recipe-instructions">
				<h2 class="section-title">Instructions</h2>

				<div class="instructions-list">
					{#each recipe.steps as step, index}
						<div class="instruction-step">
							<div class="step-header">
								<div class="step-number">{index + 1}</div>
								<h3 class="step-title">{step.title}</h3>
							</div>
							<p class="step-content">{step.content}</p>
						</div>
					{/each}
				</div>

				<div class="cook-mode-button-container">
					<button class="cook-mode-button" on:click={enterCookingMode}>
						<Flame size={18} class="button-icon" />
						Enter cook mode
					</button>
				</div>
			</div>

			<!-- Tips Section -->
			<div class="recipe-tips">
				<h2 class="section-title">Tips for Success</h2>

				<ul class="tips-list">
					{#each recipe.tips.slice(0, showAllTips ? recipe.tips.length : 3) as tip, index}
						<li class="tip-item">
							<div class="tip-number">{index + 1}</div>
							<p>{tip}</p>
						</li>
					{/each}
				</ul>

				{#if !showAllTips && recipe.tips.length > 3}
					<button class="show-more-button" on:click={() => (showAllTips = true)}>
						+ Show {recipe.tips.length - 3} more tips
					</button>
				{/if}

				{#if showAllTips}
					<button class="show-less-button" on:click={() => (showAllTips = false)}>
						- Show fewer tips
					</button>
				{/if}
			</div>

			<!-- Tags Section -->
			<div class="recipe-tags">
				<h2 class="section-title">Tags</h2>
				<div class="tags-container">
					{#each recipe.tags as tag}
						<a href="/recipes/tag/{tag}" class="tag">{tag}</a>
					{/each}
				</div>
			</div>

			<!-- Reviews Section -->
			<div class="recipe-reviews">
				<div class="reviews-header">
					<h2 class="section-title">Reviews</h2>
					<div class="reviews-summary">
						<div class="reviews-rating">
							<div class="rating-large">{recipe.rating}</div>
							<div class="stars-large">
								{#each Array(5) as _, i}
									<Star
										size={16}
										class="star"
										fill={i < Math.floor(recipe.rating) ? 'currentColor' : 'none'}
									/>
								{/each}
							</div>
							<div class="rating-count-large">{recipe.reviewsCount} reviews</div>
						</div>
						<button class="write-review-button">Write a Review</button>
					</div>
				</div>

				<div class="reviews-list">
					{#each reviews.slice(0, showAllReviews ? reviews.length : 2) as review}
						<div class="review-item">
							<div class="review-header">
								<div class="reviewer-info">
									<img
										src={review.author.avatar}
										alt={review.author.name}
										class="reviewer-avatar"
									/>
									<div class="reviewer-details">
										<div class="reviewer-name">{review.author.name}</div>
										<div class="review-date">{formatDate(review.date)}</div>
									</div>
								</div>
								<div class="review-rating">
									{#each Array(5) as _, i}
										<Star
											size={14}
											class="star"
											fill={i < review.rating ? 'currentColor' : 'none'}
										/>
									{/each}
								</div>
							</div>
							<p class="review-content">{review.content}</p>
							<div class="review-actions">
								<button class="review-helpful-button">
									<ThumbsUp size={14} class="helpful-icon" />
									Helpful
								</button>
							</div>
						</div>
					{/each}
				</div>

				{#if !showAllReviews && reviews.length > 2}
					<button class="show-all-reviews-button" on:click={() => (showAllReviews = true)}>
						View all {recipe.reviewsCount} reviews
						<ChevronDown size={16} class="button-icon" />
					</button>
				{/if}

				{#if showAllReviews}
					<button class="show-less-reviews-button" on:click={() => (showAllReviews = false)}>
						Show fewer reviews
					</button>
				{/if}
			</div>

			<!-- Comments Section -->
			<div class="recipe-comments">
				<h2 class="section-title">Comments</h2>
				<Comments />
			</div>
		</div>
	</div>

	<!-- Related Recipes -->
	<div class="related-recipes">
		<h2 class="section-title">You Might Also Like</h2>
		<div class="related-recipes-grid">
			{#each recipe.relatedRecipes as relatedRecipe}
				<a href="/recipes/{relatedRecipe.id}" class="related-recipe-card">
					<div class="related-recipe-image-container">
						<img src={relatedRecipe.image} alt={relatedRecipe.title} class="related-recipe-image" />
					</div>
					<h3 class="related-recipe-title">{relatedRecipe.title}</h3>
				</a>
			{/each}
		</div>
	</div>
	{#if isCookingModeActive}
		<CookingMode steps={recipe.steps} title={recipe.title} onClose={exitCookingMode} />
	{/if}
</div>

<style lang="postcss">
	.recipe-detail-container {
		@apply mx-auto max-w-7xl px-4 pb-16 pt-8;
	}

	/* Breadcrumb Styles */
	.breadcrumb {
		@apply mb-4 flex text-sm text-gray-500 dark:text-gray-400;
	}

	.breadcrumb-link {
		@apply hover:text-orange-500 dark:hover:text-orange-400;
	}

	.breadcrumb-separator {
		@apply mx-2;
	}

	/* Recipe Header Styles */
	.recipe-header {
		@apply mb-8;
	}

	.recipe-title {
		@apply mb-4 text-4xl font-bold leading-tight text-gray-900 dark:text-white;
	}

	.recipe-meta {
		@apply mb-6 flex flex-wrap items-center gap-6 text-gray-600 dark:text-gray-300;
	}

	.recipe-rating {
		@apply flex items-center gap-2;
	}

	.stars {
		@apply flex;
	}

	.star {
		@apply text-yellow-400;
	}

	.rating-value {
		@apply font-semibold;
	}

	.rating-count {
		@apply text-gray-500 dark:text-gray-400;
	}

	.recipe-time,
	.recipe-difficulty,
	.recipe-servings {
		@apply flex items-center gap-1.5;
	}

	.time-icon,
	.difficulty-icon,
	.servings-icon {
		@apply text-orange-500;
	}

	.author-info {
		@apply mt-6 flex items-center gap-4;
	}

	.author-avatar {
		@apply h-12 w-12 rounded-full object-cover;
	}

	.author-details {
		@apply flex flex-col;
	}

	.author-name {
		@apply font-medium text-gray-900 hover:text-orange-500 dark:text-white dark:hover:text-orange-400;
	}

	.author-stats {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.stat-separator {
		@apply mx-1.5;
	}

	.follow-button {
		@apply ml-auto rounded-full bg-orange-500 px-5 py-1.5 text-sm font-medium text-white transition-colors hover:bg-orange-600;
	}

	/* Recipe Content Grid Styles */
	.recipe-content {
		@apply grid gap-8 lg:grid-cols-[3fr_4fr];
	}

	/* Recipe Gallery Styles */
	.recipe-gallery {
		@apply mb-6;
	}

	.main-image-container {
		@apply relative mb-2 overflow-hidden rounded-xl;
	}

	.main-image {
		@apply aspect-[4/3] w-full object-cover;
	}

	.image-navigation {
		@apply absolute inset-y-0 left-0 right-0 flex items-center justify-between px-2;
	}

	.nav-button {
		@apply flex h-10 w-10 items-center justify-center rounded-full bg-black/20 text-2xl text-white backdrop-blur-sm transition-all hover:bg-black/40;
	}

	.image-dots {
		@apply absolute bottom-4 left-0 right-0 flex justify-center gap-2;
	}

	.dot-button {
		@apply h-2 w-2 rounded-full bg-white/40 transition-all hover:bg-white;
	}

	.dot-button.active {
		@apply bg-white;
	}

	.thumbnail-container {
		@apply grid grid-cols-3 gap-2;
	}

	.thumbnail {
		@apply overflow-hidden rounded-lg border-2 border-transparent transition-all hover:border-orange-500;
	}

	.thumbnail.active {
		@apply border-orange-500;
	}

	.thumbnail img {
		@apply aspect-[4/3] w-full object-cover;
	}

	/* Recipe Actions Styles */
	.recipe-actions {
		@apply mb-6 flex flex-wrap justify-between gap-2;
	}

	.action-button {
		@apply flex flex-1 flex-col items-center gap-1 rounded-md px-2 py-3 text-sm text-gray-600 transition-all hover:bg-gray-100 dark:text-gray-300 dark:hover:bg-gray-800;
	}

	.action-button.active {
		@apply text-orange-500;
	}

	.action-icon {
		@apply transition-transform duration-300 group-hover:scale-110;
	}

	.action-button:hover .action-icon {
		@apply scale-110;
	}

	.action-button.print {
		@apply border border-dashed border-gray-200 dark:border-gray-700;
	}

	/* Recipe Description Styles */
	.recipe-description {
		@apply mb-6 text-gray-700 dark:text-gray-300;
	}

	/* Servings Adjuster Styles */
	.servings-adjuster {
		@apply mb-6 flex items-center gap-4 rounded-lg bg-gray-50 p-4 dark:bg-gray-800;
	}

	.servings-controls {
		@apply flex items-center;
	}

	.adjust-button {
		@apply flex h-8 w-8 items-center justify-center rounded-full bg-white text-xl font-bold text-gray-600 transition-colors hover:bg-gray-100 disabled:text-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600;
	}

	.servings-input {
		@apply w-10 appearance-none border-none bg-transparent p-0 text-center text-lg font-medium focus:outline-none focus:ring-0;
	}

	.scaling-badge {
		@apply ml-auto rounded-full bg-orange-100 px-2 py-1 text-xs font-medium text-orange-600 dark:bg-orange-500/20 dark:text-orange-400;
	}

	/* Ingredients Styles */
	.recipe-ingredients {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.section-title {
		@apply mb-4 text-xl font-bold text-gray-900 dark:text-white;
	}

	.ingredient-group {
		@apply mb-4;
	}

	.ingredient-group-title {
		@apply mb-2 font-medium text-gray-700 dark:text-gray-300;
	}

	.ingredients-list {
		@apply space-y-2;
	}

	.ingredient-item {
		@apply text-gray-600 dark:text-gray-300;
	}

	.ingredient-checkbox {
		@apply flex items-center gap-2;
	}

	.ingredient-checkbox input[type='checkbox'] {
		@apply h-4 w-4 rounded border-gray-300 text-orange-500 focus:ring-orange-500/20 dark:border-gray-600 dark:bg-gray-700;
	}

	.scaled-quantity {
		@apply font-medium text-orange-500;
	}

	.ingredient-unit {
		@apply mr-1;
	}

	.ingredient-name {
		@apply text-gray-700 dark:text-gray-300;
	}

	.show-more-button,
	.show-less-button {
		@apply mt-2 text-sm font-medium text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-500;
	}

	.shopping-list-button-container {
		@apply mt-4 border-t border-gray-100 pt-4 dark:border-gray-700;
	}

	.shopping-list-button {
		@apply flex w-full items-center justify-center gap-2 rounded-lg bg-orange-500 px-4 py-2 font-medium text-white transition-colors hover:bg-orange-600;
	}

	/* Nutrition Info Styles */
	.nutrition-info {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.nutrition-grid {
		@apply grid grid-cols-3 gap-4;
	}

	.nutrition-item {
		@apply flex flex-col items-center rounded-lg bg-gray-50 p-3 text-center dark:bg-gray-700;
	}

	.nutrition-value {
		@apply text-lg font-semibold text-gray-900 dark:text-white;
	}

	.nutrition-label {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.nutrition-disclaimer {
		@apply mt-4 flex items-start gap-2 rounded-lg bg-gray-50 p-3 text-sm text-gray-500 dark:bg-gray-700 dark:text-gray-400;
	}

	.disclaimer-icon {
		@apply mt-0.5 flex-shrink-0 text-orange-500;
	}

	/* Instructions Styles */
	.recipe-instructions {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.instructions-list {
		@apply space-y-6;
	}

	.instruction-step {
		@apply relative;
	}

	.step-header {
		@apply mb-2 flex items-center gap-4;
	}

	.step-number {
		@apply flex h-8 w-8 items-center justify-center rounded-full bg-orange-500 font-bold text-white;
	}

	.step-title {
		@apply text-lg font-medium text-gray-900 dark:text-white;
	}

	.step-content {
		@apply ml-12 text-gray-600 dark:text-gray-300;
	}

	.cook-mode-button-container {
		@apply mt-8 border-t border-gray-100 pt-6 dark:border-gray-700;
	}

	.cook-mode-button {
		@apply flex w-full items-center justify-center gap-2 rounded-lg bg-gradient-to-r from-orange-500 to-red-500 px-4 py-3 font-medium text-white transition-all hover:shadow-lg hover:shadow-orange-500/20;
	}

	/* Tips Styles */
	.recipe-tips {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.tips-list {
		@apply space-y-4;
	}

	.tip-item {
		@apply flex gap-3 text-gray-600 dark:text-gray-300;
	}

	.tip-number {
		@apply flex h-6 w-6 flex-shrink-0 items-center justify-center rounded-full bg-gray-100 font-medium text-gray-600 dark:bg-gray-700 dark:text-gray-300;
	}

	/* Tags Styles */
	.recipe-tags {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.tags-container {
		@apply flex flex-wrap gap-2;
	}

	.tag {
		@apply rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-700 transition-colors hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600;
	}

	/* Reviews Styles */
	.recipe-reviews {
		@apply mb-6 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.reviews-header {
		@apply mb-6;
	}

	.reviews-summary {
		@apply flex flex-wrap items-center justify-between gap-4;
	}

	.reviews-rating {
		@apply flex flex-col items-center;
	}

	.rating-large {
		@apply text-3xl font-bold text-gray-900 dark:text-white;
	}

	.stars-large {
		@apply flex;
	}

	.rating-count-large {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.write-review-button {
		@apply rounded-lg bg-gray-100 px-4 py-2 text-sm font-medium transition-colors hover:bg-gray-200 dark:bg-gray-700 dark:hover:bg-gray-600;
	}

	.reviews-list {
		@apply space-y-6;
	}

	.review-item {
		@apply border-b border-gray-100 pb-6 dark:border-gray-700;
	}

	.review-header {
		@apply mb-3 flex items-start justify-between;
	}

	.reviewer-info {
		@apply flex items-center gap-3;
	}

	.reviewer-avatar {
		@apply h-10 w-10 rounded-full object-cover;
	}

	.reviewer-details {
		@apply flex flex-col;
	}

	.reviewer-name {
		@apply font-medium text-gray-900 dark:text-white;
	}

	.review-date {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.review-rating {
		@apply flex;
	}

	.review-content {
		@apply text-gray-600 dark:text-gray-300;
	}

	.review-actions {
		@apply mt-3 flex justify-end;
	}

	.review-helpful-button {
		@apply flex items-center gap-2 rounded-full bg-gray-100 px-3 py-1 text-xs text-gray-600 transition-colors hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600;
	}

	.helpful-icon {
		@apply text-gray-500 dark:text-gray-400;
	}

	.show-all-reviews-button {
		@apply mt-4 flex w-full items-center justify-center gap-2 rounded-lg border border-gray-200 px-4 py-2 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-50 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.show-less-reviews-button {
		@apply mt-4 text-sm font-medium text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-500;
	}

	/* Related Recipes Styles */
	.related-recipes {
		@apply mt-12;
	}

	.related-recipes-grid {
		@apply grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3;
	}

	.related-recipe-card {
		@apply overflow-hidden rounded-lg bg-white shadow-sm transition-all hover:-translate-y-1 hover:shadow-md dark:bg-gray-800;
	}

	.related-recipe-image-container {
		@apply overflow-hidden;
	}

	.related-recipe-image {
		@apply aspect-[16/9] w-full object-cover transition-transform duration-300;
	}

	.related-recipe-card:hover .related-recipe-image {
		@apply scale-105;
	}

	.related-recipe-title {
		@apply p-4 text-center text-lg font-medium text-gray-900 dark:text-white;
	}

	/* Media Queries */
	@media (max-width: 768px) {
		.recipe-content {
			@apply grid-cols-1;
		}

		.recipe-meta {
			@apply flex-col items-start gap-3;
		}

		.recipe-gallery {
			@apply mb-4;
		}

		.author-info {
			@apply flex-wrap;
		}

		.follow-button {
			@apply ml-0 mt-4 w-full;
		}
	}
</style>



============================================================
File: ./src/routes/search/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/search/+page.svelte -->
<script lang="ts">
	import { page } from '$app/stores';
	import { theme } from '$lib/stores/theme';
	import { onMount } from 'svelte';
	import {
		Search,
		Filter,
		Clock,
		X,
		ChefHat,
		Users,
		Flame,
		AlertCircle,
		Star,
		ChevronDown,
		ChevronUp
	} from 'lucide-svelte';
	import Card from '../../components/Card/Card.svelte';

	// Search parameters (would come from URL in a real implementation)
	let searchQuery = $page.url.searchParams.get('q') || '';
	let cuisineFilter = $page.url.searchParams.get('cuisine') || '';
	let categoryFilter = $page.url.searchParams.get('category') || '';
	let timeFilter = $page.url.searchParams.get('time') || '';
	let difficultyFilter = $page.url.searchParams.get('difficulty') || '';
	let dietaryFilter = $page.url.searchParams.get('dietary') || '';

	// UI state
	let showFilters = false;
	let isLoading = true;
	let resultsCount = 0;
	let currentPage = parseInt($page.url.searchParams.get('page') || '1');
	let sortOrder = $page.url.searchParams.get('sort') || 'relevance';

	// Filter options
	const cuisineOptions = [
		'Indian',
		'Chinese',
		'Italian',
		'Thai',
		'Mexican',
		'Japanese',
		'French',
		'Spanish',
		'Middle Eastern',
		'American',
		'Korean',
		'Vietnamese',
		'Mediterranean'
	];

	const categoryOptions = [
		'Breakfast',
		'Lunch',
		'Dinner',
		'Appetizer',
		'Main Course',
		'Side Dish',
		'Dessert',
		'Snack',
		'Soup',
		'Salad',
		'Beverage'
	];

	const timeOptions = [
		{ value: 'under15', label: 'Under 15 minutes' },
		{ value: 'under30', label: 'Under 30 minutes' },
		{ value: 'under60', label: 'Under 1 hour' },
		{ value: 'over60', label: 'Over 1 hour' }
	];

	const difficultyOptions = ['Easy', 'Medium', 'Hard'];

	const dietaryOptions = [
		'Vegetarian',
		'Vegan',
		'Gluten-Free',
		'Dairy-Free',
		'Nut-Free',
		'Low-Carb',
		'Keto',
		'Paleo',
		'Whole30'
	];

	const sortOptions = [
		{ value: 'relevance', label: 'Relevance' },
		{ value: 'rating', label: 'Highest Rated' },
		{ value: 'newest', label: 'Newest First' },
		{ value: 'popular', label: 'Most Popular' },
		{ value: 'time_asc', label: 'Quickest First' },
		{ value: 'time_desc', label: 'Longest First' }
	];

	// Mock search results for demo (this would be fetched from API)
	let results = [
		{
			title: 'Classic Butter Chicken',
			description:
				'A rich and creamy tomato-based curry with tender chicken pieces marinated in yogurt and spices.',
			image: '/images/recipes/butter-chicken.jpg',
			cookTime: 45,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: 'Chef Maria',
				avatar: '/images/users/chef-maria.jpg'
			},
			rating: 4.8
		},
		{
			title: 'Palak Paneer',
			description:
				'Creamy spinach curry with soft paneer cheese cubes, flavored with garlic, ginger, and aromatic spices.',
			image: '/images/palak-paneer.jpg',
			cookTime: 35,
			category: 'Indian',
			difficulty: 'Easy',
			author: {
				name: 'Chef Raj',
				avatar: '/images/users/chef-raj.jpg'
			},
			rating: 4.7
		},
		{
			title: 'Chicken Biryani',
			description:
				'Fragrant basmati rice cooked with tender chicken pieces, saffron, and a blend of traditional spices.',
			image: '/images/recipes/biryani.jpg',
			cookTime: 60,
			category: 'Indian',
			difficulty: 'Medium',
			author: {
				name: 'Chef Sarah',
				avatar: '/images/users/chef-sarah.jpg'
			},
			rating: 4.9
		},
		{
			title: 'Masala Dosa',
			description:
				'Crispy rice and lentil crepes filled with spiced potato filling, served with coconut chutney and sambar.',
			image: '/images/recipes/masala-dosa.jpg',
			cookTime: 50,
			category: 'Indian',
			difficulty: 'Hard',
			author: {
				name: 'Chef Raj',
				avatar: '/images/users/chef-raj.jpg'
			},
			rating: 4.6
		},
		{
			title: 'Pad Thai',
			description:
				'Stir-fried rice noodles with eggs, tofu, bean sprouts, peanuts, and a tangy sauce.',
			image: '/images/recipes/pad-thai.jpg',
			cookTime: 25,
			category: 'Thai',
			difficulty: 'Medium',
			author: {
				name: 'Chef Giovanni',
				avatar: '/images/users/chef-giovanni.jpeg'
			},
			rating: 4.5
		},
		{
			title: 'Spaghetti Carbonara',
			description: 'Classic Italian pasta dish with eggs, cheese, pancetta, and black pepper.',
			image: '/images/recipes/carbonara.jpg',
			cookTime: 20,
			category: 'Italian',
			difficulty: 'Easy',
			author: {
				name: 'Chef Ahmed',
				avatar: '/images/users/chef-ahmed.jpg'
			},
			rating: 4.7
		},
		{
			title: 'Vegetable Stir Fry',
			description:
				'Quick and healthy stir-fried vegetables with a savory sauce, perfect as a side dish or main course.',
			image: '/images/recipe/stir-fry.jpg',
			cookTime: 15,
			category: 'Chinese',
			difficulty: 'Easy',
			author: {
				name: 'Chef Maria',
				avatar: '/images/users/chef-maria.jpg'
			},
			rating: 4.3
		},
		{
			title: 'Chocolate Lava Cake',
			description:
				'Decadent chocolate dessert with a molten center, served with vanilla ice cream.',
			image: '/images/recipes/lava-cake.jpeg',
			cookTime: 25,
			category: 'Dessert',
			difficulty: 'Medium',
			author: {
				name: 'Chef Raj',
				avatar: '/images/users/chef-raj.jpg'
			},
			rating: 4.9
		},
		{
			title: 'Greek Salad',
			description:
				'Fresh Mediterranean salad with cucumber, tomato, olives, feta cheese, and a zesty dressing.',
			image: '/images/recipes/caesar-salad.jpg',
			cookTime: 10,
			category: 'Salad',
			difficulty: 'Easy',
			author: {
				name: 'Chef Yuki',
				avatar: '/images/chef-yuki.jpg'
			},
			rating: 4.4
		}
	];

	// Filter results based on selected criteria
	$: filteredResults = filterResults(results);
	$: resultsCount = filteredResults.length;

	// Function to filter results based on selected criteria
	function filterResults(recipes) {
		return recipes.filter((recipe) => {
			let matchesQuery =
				!searchQuery ||
				recipe.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
				recipe.description.toLowerCase().includes(searchQuery.toLowerCase());

			let matchesCuisine = !cuisineFilter || recipe.category === cuisineFilter;

			let matchesCategory = !categoryFilter || recipe.category === categoryFilter;

			let matchesTime = !timeFilter;
			if (timeFilter === 'under15') matchesTime = recipe.cookTime < 15;
			if (timeFilter === 'under30') matchesTime = recipe.cookTime < 30;
			if (timeFilter === 'under60') matchesTime = recipe.cookTime < 60;
			if (timeFilter === 'over60') matchesTime = recipe.cookTime >= 60;

			let matchesDifficulty = !difficultyFilter || recipe.difficulty === difficultyFilter;

			// For dietary restrictions, we'd need more data in the recipe model
			// This is a simplified example
			let matchesDietary = !dietaryFilter;

			return (
				matchesQuery &&
				matchesCuisine &&
				matchesCategory &&
				matchesTime &&
				matchesDifficulty &&
				matchesDietary
			);
		});
	}

	// Function to handle search form submission
	function handleSearch() {
		// In a real implementation, we'd update the URL and fetch results
		isLoading = true;

		// Simulate API call
		setTimeout(() => {
			isLoading = false;
		}, 800);
	}

	// Function to clear all filters
	function clearFilters() {
		searchQuery = '';
		cuisineFilter = '';
		categoryFilter = '';
		timeFilter = '';
		difficultyFilter = '';
		dietaryFilter = '';
		handleSearch();
	}

	// Function to handle pagination
	function changePage(newPage) {
		if (newPage < 1 || newPage > Math.ceil(resultsCount / 9)) return;
		currentPage = newPage;
		window.scrollTo({ top: 0, behavior: 'smooth' });
	}

	// Function to handle sort order change
	function handleSortChange(event) {
		sortOrder = event.target.value;
		handleSearch();
	}

	// Generate pagination range
	$: totalPages = Math.ceil(resultsCount / 9);
	$: paginationRange = generatePaginationRange(currentPage, totalPages);

	function generatePaginationRange(current, total) {
		const range = [];
		const delta = 2; // Pages to show before and after current page

		for (let i = Math.max(2, current - delta); i <= Math.min(total - 1, current + delta); i++) {
			range.push(i);
		}

		// Always include first and last page
		if (current - delta > 2) range.unshift('...');
		if (current + delta < total - 1) range.push('...');

		if (total > 1) {
			range.unshift(1);
			if (total > 1) range.push(total);
		}

		return range;
	}

	// Get active filter count
	$: activeFilterCount = [
		cuisineFilter,
		categoryFilter,
		timeFilter,
		difficultyFilter,
		dietaryFilter
	].filter(Boolean).length;

	onMount(() => {
		// Simulate API call
		setTimeout(() => {
			isLoading = false;
		}, 1200);
	});
</script>

<svelte:head>
	<title>{searchQuery ? `Search: ${searchQuery}` : 'Search Recipes'} | OwnChef</title>
</svelte:head>

<div class="search-results-container" class:dark={$theme === 'dark'}>
	<!-- Search Header -->
	<div class="search-header">
		<div class="search-bar-container">
			<form on:submit|preventDefault={handleSearch} class="search-form">
				<div class="search-bar">
					<Search size={20} class="search-icon" />
					<input
						type="text"
						bind:value={searchQuery}
						placeholder="Search recipes, ingredients, or cuisines"
						class="search-input"
						aria-label="Search recipes"
					/>
					{#if searchQuery}
						<button type="button" class="clear-search" on:click={() => (searchQuery = '')}>
							<X size={18} />
						</button>
					{/if}
				</div>

				<button type="submit" class="search-button"> Search </button>

				<button
					type="button"
					class="filter-toggle-button"
					class:active={showFilters}
					on:click={() => (showFilters = !showFilters)}
					aria-expanded={showFilters}
					aria-controls="search-filters"
				>
					<Filter size={20} class="filter-icon" />
					<span>Filters</span>
					{#if activeFilterCount > 0}
						<span class="filter-count">{activeFilterCount}</span>
					{/if}
				</button>
			</form>

			{#if searchQuery || activeFilterCount > 0}
				<div class="search-info">
					{#if isLoading}
						<span>Searching...</span>
					{:else}
						<span class="results-count"
							>{resultsCount} {resultsCount === 1 ? 'recipe' : 'recipes'} found</span
						>

						{#if activeFilterCount > 0}
							<button type="button" class="clear-filters" on:click={clearFilters}>
								Clear all filters
							</button>
						{/if}
					{/if}
				</div>
			{/if}
		</div>
	</div>

	<!-- Advanced Search Filters -->
	{#if showFilters}
		<div id="search-filters" class="search-filters" transition:slide={{ duration: 300 }}>
			<div class="filters-content">
				<div class="filter-section">
					<h3 class="filter-section-title">Cuisine</h3>
					<div class="filter-options">
						{#each cuisineOptions as cuisine}
							<label class="filter-option">
								<input
									type="radio"
									name="cuisine"
									value={cuisine}
									bind:group={cuisineFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{cuisine}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="filter-section">
					<h3 class="filter-section-title">Category</h3>
					<div class="filter-options">
						{#each categoryOptions as category}
							<label class="filter-option">
								<input
									type="radio"
									name="category"
									value={category}
									bind:group={categoryFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{category}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="filter-section">
					<h3 class="filter-section-title">Cooking Time</h3>
					<div class="filter-options">
						{#each timeOptions as option}
							<label class="filter-option">
								<input
									type="radio"
									name="time"
									value={option.value}
									bind:group={timeFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{option.label}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="filter-section">
					<h3 class="filter-section-title">Difficulty</h3>
					<div class="filter-options">
						{#each difficultyOptions as difficulty}
							<label class="filter-option">
								<input
									type="radio"
									name="difficulty"
									value={difficulty}
									bind:group={difficultyFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{difficulty}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="filter-section">
					<h3 class="filter-section-title">Dietary Restrictions</h3>
					<div class="filter-options">
						{#each dietaryOptions as dietary}
							<label class="filter-option">
								<input
									type="radio"
									name="dietary"
									value={dietary}
									bind:group={dietaryFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{dietary}</span>
							</label>
						{/each}
					</div>
				</div>
			</div>

			<div class="filters-footer">
				<button type="button" class="clear-all-button" on:click={clearFilters}>
					Clear All Filters
				</button>
				<button type="button" class="apply-filters-button" on:click={() => (showFilters = false)}>
					Apply Filters
				</button>
			</div>
		</div>
	{/if}

	<!-- Results and Sidebar Layout -->
	<div class="search-results-layout">
		<!-- Sidebar Filters (desktop only) -->
		<div class="filters-sidebar">
			<div class="sidebar-section">
				<h3 class="sidebar-title">Sort Results</h3>
				<select class="sort-select" bind:value={sortOrder} on:change={handleSortChange}>
					{#each sortOptions as option}
						<option value={option.value}>{option.label}</option>
					{/each}
				</select>
			</div>

			<div class="sidebar-section">
				<div class="sidebar-header">
					<h3 class="sidebar-title">Filters</h3>
					{#if activeFilterCount > 0}
						<button type="button" class="clear-sidebar-filters" on:click={clearFilters}>
							Clear All
						</button>
					{/if}
				</div>

				<div class="sidebar-filter">
					<h4 class="filter-title">Cuisine</h4>
					<div class="sidebar-options">
						{#each cuisineOptions.slice(0, 6) as cuisine}
							<label class="sidebar-option">
								<input
									type="radio"
									name="sidebar-cuisine"
									value={cuisine}
									bind:group={cuisineFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{cuisine}</span>
							</label>
						{/each}
						{#if cuisineOptions.length > 6}
							<button type="button" class="show-more-button"> Show more cuisines </button>
						{/if}
					</div>
				</div>

				<div class="sidebar-filter">
					<h4 class="filter-title">Cooking Time</h4>
					<div class="sidebar-options">
						{#each timeOptions as option}
							<label class="sidebar-option">
								<input
									type="radio"
									name="sidebar-time"
									value={option.value}
									bind:group={timeFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{option.label}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="sidebar-filter">
					<h4 class="filter-title">Difficulty</h4>
					<div class="sidebar-options">
						{#each difficultyOptions as difficulty}
							<label class="sidebar-option">
								<input
									type="radio"
									name="sidebar-difficulty"
									value={difficulty}
									bind:group={difficultyFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{difficulty}</span>
							</label>
						{/each}
					</div>
				</div>

				<div class="sidebar-filter">
					<h4 class="filter-title">Dietary Restrictions</h4>
					<div class="sidebar-options">
						{#each dietaryOptions.slice(0, 5) as dietary}
							<label class="sidebar-option">
								<input
									type="radio"
									name="sidebar-dietary"
									value={dietary}
									bind:group={dietaryFilter}
									on:change={handleSearch}
								/>
								<span class="option-label">{dietary}</span>
							</label>
						{/each}
						{#if dietaryOptions.length > 5}
							<button type="button" class="show-more-button"> Show more options </button>
						{/if}
					</div>
				</div>
			</div>
		</div>

		<!-- Search Results -->
		<div class="search-results">
			{#if isLoading}
				<div class="loading-state">
					<div class="spinner"></div>
					<p>Searching for recipes...</p>
				</div>
			{:else if filteredResults.length === 0}
				<div class="empty-state">
					<div class="empty-icon">
						<SlashedZero size={48} class="text-gray-300 dark:text-gray-600" />
					</div>
					<h2 class="empty-title">No recipes found</h2>
					<p class="empty-message">
						We couldn't find any recipes matching your search criteria. Try adjusting your filters
						or search terms.
					</p>
					<button type="button" class="empty-action" on:click={clearFilters}>
						Clear All Filters
					</button>
				</div>
			{:else}
				<div class="results-grid">
					{#each filteredResults.slice((currentPage - 1) * 9, currentPage * 9) as recipe}
						<Card {recipe} />
					{/each}
				</div>

				<!-- Pagination -->
				{#if totalPages > 1}
					<div class="pagination">
						<button
							class="page-button prev"
							on:click={() => changePage(currentPage - 1)}
							disabled={currentPage === 1}
						>
							Previous
						</button>

						<div class="page-numbers">
							{#each paginationRange as pageNum}
								{#if pageNum === '...'}
									<span class="page-ellipsis">...</span>
								{:else}
									<button
										class="page-number"
										class:active={pageNum === currentPage}
										on:click={() => changePage(pageNum)}
									>
										{pageNum}
									</button>
								{/if}
							{/each}
						</div>

						<button
							class="page-button next"
							on:click={() => changePage(currentPage + 1)}
							disabled={currentPage === totalPages}
						>
							Next
						</button>
					</div>
				{/if}
			{/if}
		</div>
	</div>
</div>

<style lang="postcss">
	.search-results-container {
		@apply mx-auto max-w-7xl px-4 pb-16 pt-8;
	}

	/* Search Header Styles */
	.search-header {
		@apply mb-6;
	}

	.search-bar-container {
		@apply mx-auto max-w-4xl;
	}

	.search-form {
		@apply flex flex-wrap gap-2;
	}

	.search-bar {
		@apply relative flex-1;
	}

	.search-icon {
		@apply absolute left-4 top-1/2 -translate-y-1/2 text-gray-400;
	}

	.search-input {
		@apply w-full rounded-full border border-gray-300 bg-white py-3 pl-11 pr-4 text-gray-900 outline-none;
		@apply focus:border-orange-500 focus:ring-2 focus:ring-orange-500/20;
		@apply dark:border-gray-600 dark:bg-gray-800 dark:text-white;
	}

	.clear-search {
		@apply absolute right-4 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600;
		@apply dark:hover:text-gray-300;
	}

	.search-button {
		@apply rounded-full bg-gradient-to-r from-orange-500 to-red-500 px-6 py-3 font-medium text-white;
		@apply transition-all hover:shadow-lg hover:shadow-orange-500/20;
	}

	.filter-toggle-button {
		@apply flex items-center gap-2 rounded-full border border-gray-300 px-4 py-3 text-gray-700;
		@apply transition-all hover:bg-gray-50;
		@apply dark:border-gray-600 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.filter-toggle-button.active {
		@apply border-orange-500 bg-orange-50 text-orange-500;
		@apply dark:border-orange-500 dark:bg-orange-900/20 dark:text-orange-400;
	}

	.filter-count {
		@apply ml-1 flex h-5 w-5 items-center justify-center rounded-full bg-orange-500 text-xs font-medium text-white;
	}

	.search-info {
		@apply mt-3 flex items-center justify-between text-sm text-gray-600 dark:text-gray-400;
	}

	.results-count {
		@apply font-medium;
	}

	.clear-filters {
		@apply text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-500;
	}

	/* Search Filters Styles */
	.search-filters {
		@apply mb-8 rounded-xl bg-white p-6 shadow-md dark:bg-gray-800;
	}

	.filters-content {
		@apply grid gap-6 sm:grid-cols-2 lg:grid-cols-3;
	}

	.filter-section {
		@apply space-y-3;
	}

	.filter-section-title {
		@apply text-sm font-semibold text-gray-900 dark:text-white;
	}

	.filter-options {
		@apply grid grid-cols-2 gap-2;
	}

	.filter-option {
		@apply flex cursor-pointer items-center gap-2 rounded-md px-3 py-2 text-sm text-gray-700;
		@apply transition-colors hover:bg-gray-100;
		@apply dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.filter-option input[type='radio'] {
		@apply h-4 w-4 rounded-full border-gray-300 text-orange-500;
		@apply focus:ring-orange-500/20;
		@apply dark:border-gray-600 dark:bg-gray-700;
	}

	.option-label {
		@apply select-none;
	}

	.filters-footer {
		@apply mt-6 flex justify-end gap-4 border-t border-gray-100 pt-4 dark:border-gray-700;
	}

	.clear-all-button {
		@apply rounded-lg px-4 py-2 text-sm font-medium text-gray-600;
		@apply hover:bg-gray-100 hover:text-gray-900;
		@apply dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white;
	}

	.apply-filters-button {
		@apply rounded-lg bg-gradient-to-r from-orange-500 to-red-500 px-6 py-2 text-sm font-medium text-white;
		@apply transition-all hover:shadow-lg hover:shadow-orange-500/20;
	}

	/* Layout Styles */
	.search-results-layout {
		@apply grid gap-8 lg:grid-cols-[280px_1fr];
	}

	/* Sidebar Styles */
	.filters-sidebar {
		@apply hidden space-y-6 lg:block;
	}

	.sidebar-section {
		@apply rounded-xl bg-white p-5 shadow-sm dark:bg-gray-800;
	}

	.sidebar-header {
		@apply mb-4 flex items-center justify-between;
	}

	.sidebar-title {
		@apply text-lg font-semibold text-gray-900 dark:text-white;
	}

	.clear-sidebar-filters {
		@apply text-xs text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-500;
	}

	.sort-select {
		@apply mt-2 w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-gray-700;
		@apply focus:border-orange-500 focus:outline-none focus:ring-2 focus:ring-orange-500/20;
		@apply dark:border-gray-600 dark:bg-gray-700 dark:text-white;
	}

	.sidebar-filter {
		@apply mt-6 first:mt-0;
	}

	.filter-title {
		@apply mb-3 text-sm font-medium text-gray-900 dark:text-white;
	}

	.sidebar-options {
		@apply space-y-2;
	}

	.sidebar-option {
		@apply flex cursor-pointer items-center gap-2 rounded-md px-2 py-1.5 text-sm text-gray-700;
		@apply transition-colors hover:bg-gray-100;
		@apply dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.show-more-button {
		@apply mt-2 text-xs text-orange-500 hover:text-orange-600 dark:text-orange-400 dark:hover:text-orange-500;
	}

	/* Results Styles */
	.search-results {
		@apply min-h-[500px];
	}

	.results-grid {
		@apply grid gap-6 sm:grid-cols-2 lg:grid-cols-3;
	}

	/* Loading State */
	.loading-state {
		@apply flex flex-col items-center justify-center py-12 text-center;
	}

	.spinner {
		@apply mb-4 h-10 w-10 animate-spin rounded-full border-4 border-gray-200 border-t-orange-500;
	}

	/* Empty State */
	.empty-state {
		@apply flex flex-col items-center justify-center rounded-xl bg-white py-16 text-center shadow-sm dark:bg-gray-800;
	}

	.empty-icon {
		@apply mb-4;
	}

	.empty-title {
		@apply mb-2 text-xl font-semibold text-gray-900 dark:text-white;
	}

	.empty-message {
		@apply mb-6 max-w-md text-gray-600 dark:text-gray-400;
	}

	.empty-action {
		@apply rounded-full bg-gradient-to-r from-orange-500 to-red-500 px-6 py-2 font-medium text-white;
		@apply transition-all hover:shadow-lg hover:shadow-orange-500/20;
	}

	/* Pagination */
	.pagination {
		@apply mt-12 flex items-center justify-center;
	}

	.page-button {
		@apply rounded-lg px-4 py-2 text-sm font-medium;
		@apply disabled:cursor-not-allowed disabled:opacity-50;
	}

	.page-button.prev {
		@apply mr-2 bg-gray-100 text-gray-700 hover:bg-gray-200;
		@apply dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600;
	}

	.page-button.next {
		@apply ml-2 bg-gray-100 text-gray-700 hover:bg-gray-200;
		@apply dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600;
	}

	.page-numbers {
		@apply flex items-center;
	}

	.page-number {
		@apply mx-1 flex h-8 w-8 items-center justify-center rounded-full text-sm;
		@apply text-gray-700 hover:bg-gray-100;
		@apply dark:text-gray-300 dark:hover:bg-gray-700;
	}

	.page-number.active {
		@apply bg-orange-500 text-white;
	}

	.page-ellipsis {
		@apply mx-1 text-gray-500 dark:text-gray-400;
	}
</style>



============================================================
File: ./src/routes/write/+page.server.ts
Type: .ts
============================================================

// src/routes/write/+page.server.ts
import { redirect } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

export const load: PageServerLoad = async ({ locals }) => {
	// if (!locals.session) {
	// 	throw redirect(303, '/login');
	// }
	return {};
};



============================================================
File: ./src/routes/write/+page.svelte
Type: .svelte
============================================================

<!-- src/routes/write/+page.svelte -->
<script lang="ts">
	import { enhance } from '$app/forms';
	import { goto } from '$app/navigation';
	import { page } from '$app/stores';
	import { theme } from '$lib/stores/theme';
	import { onMount } from 'svelte';
	import RichTextEditor from '$lib/components/RichTextEditor.svelte';
	import {
		Image as ImageIcon,
		Plus,
		X,
		Clock,
		Users,
		ChefHat,
		Tag,
		ListOrdered,
		ShoppingBasket,
		AlertCircle,
		Link,
		Video,
		Info
	} from 'lucide-svelte';

	// Form state
	let recipe = {
		title: '',
		description: '',
		content: '',
		cookTime: 30,
		prepTime: 15,
		servings: 4,
		difficulty: 'Medium',
		cuisine: '',
		category: '',
		images: ['', '', ''],
		ingredients: [{ group: '', items: ['', ''] }],
		steps: [{ title: '', content: '' }],
		tips: [''],
		tags: ['']
	};

	// UI state
	let activeTab = 'basic';
	let hasUnsavedChanges = false;
	let isSubmitting = false;
	let errors: Record<string, string> = {};
	let uploadedImages: string[] = [];
	let imgPreviewUrls: string[] = [];

	// Available options
	const difficultyOptions = ['Easy', 'Medium', 'Hard'];
	const cuisineOptions = [
		'Indian',
		'Chinese',
		'Italian',
		'Japanese',
		'Thai',
		'Mexican',
		'French',
		'Spanish',
		'American',
		'Mediterranean',
		'Other'
	];
	const categoryOptions = [
		'Appetizer',
		'Main Course',
		'Side Dish',
		'Dessert',
		'Breakfast',
		'Lunch',
		'Dinner',
		'Snack',
		'Soup',
		'Salad',
		'Beverage',
		'Other'
	];

	// Client-side redirect if no session
	// $: if (!$page.data.session) {
	// 	goto('/login');
	// }

	// Track form changes
	$: {
		const { title, description, content, cookTime, prepTime, servings } = recipe;
		hasUnsavedChanges = Boolean(
			title || description || content || cookTime !== 30 || prepTime !== 15 || servings !== 4
		);
	}

	function validateForm() {
		errors = {};

		if (!recipe.title.trim()) {
			errors.title = 'Recipe title is required';
		}

		if (!recipe.description.trim()) {
			errors.description = 'Recipe description is required';
		}

		if (recipe.prepTime <= 0) {
			errors.prepTime = 'Prep time must be greater than 0';
		}

		if (recipe.cookTime <= 0) {
			errors.cookTime = 'Cook time must be greater than 0';
		}

		if (recipe.servings <= 0) {
			errors.servings = 'Number of servings must be greater than 0';
		}

		if (!recipe.cuisine) {
			errors.cuisine = 'Please select a cuisine';
		}

		if (!recipe.category) {
			errors.category = 'Please select a category';
		}

		let hasIngredients = false;
		recipe.ingredients.forEach((group, groupIndex) => {
			group.items.forEach((item, itemIndex) => {
				if (item.trim()) hasIngredients = true;
			});
		});

		if (!hasIngredients) {
			errors.ingredients = 'At least one ingredient is required';
		}

		let hasSteps = false;
		recipe.steps.forEach((step, index) => {
			if (step.content.trim()) hasSteps = true;
		});

		if (!hasSteps) {
			errors.steps = 'At least one instruction step is required';
		}

		return Object.keys(errors).length === 0;
	}

	// Ingredient management
	function addIngredientGroup() {
		recipe.ingredients = [...recipe.ingredients, { group: '', items: [''] }];
	}

	function removeIngredientGroup(groupIndex: number) {
		recipe.ingredients = recipe.ingredients.filter((_, i) => i !== groupIndex);
		if (recipe.ingredients.length === 0) {
			recipe.ingredients = [{ group: '', items: [''] }];
		}
	}

	function addIngredientItem(groupIndex: number) {
		recipe.ingredients = recipe.ingredients.map((group, i) => {
			if (i === groupIndex) {
				return { ...group, items: [...group.items, ''] };
			}
			return group;
		});
	}

	function removeIngredientItem(groupIndex: number, itemIndex: number) {
		recipe.ingredients = recipe.ingredients.map((group, i) => {
			if (i === groupIndex) {
				return {
					...group,
					items: group.items.filter((_, j) => j !== itemIndex)
				};
			}
			return group;
		});

		// If the last item is removed, add a new empty one
		if (recipe.ingredients[groupIndex].items.length === 0) {
			recipe.ingredients[groupIndex].items = [''];
		}
	}

	// Instruction steps management
	function addStep() {
		recipe.steps = [...recipe.steps, { title: '', content: '' }];
	}

	function removeStep(index: number) {
		recipe.steps = recipe.steps.filter((_, i) => i !== index);
		if (recipe.steps.length === 0) {
			recipe.steps = [{ title: '', content: '' }];
		}
	}

	// Tips management
	function addTip() {
		recipe.tips = [...recipe.tips, ''];
	}

	function removeTip(index: number) {
		recipe.tips = recipe.tips.filter((_, i) => i !== index);
		if (recipe.tips.length === 0) {
			recipe.tips = [''];
		}
	}

	// Tags management
	function addTag() {
		recipe.tags = [...recipe.tags, ''];
	}

	function removeTag(index: number) {
		recipe.tags = recipe.tags.filter((_, i) => i !== index);
		if (recipe.tags.length === 0) {
			recipe.tags = [''];
		}
	}

	// Image management
	function handleImageUpload(event: Event, index: number) {
		const input = event.target as HTMLInputElement;
		const file = input.files?.[0];

		if (file) {
			// In a real implementation, you would upload the file to your server or cloud storage
			// For now, we'll just create a local object URL for preview
			const reader = new FileReader();
			reader.onload = (e) => {
				imgPreviewUrls[index] = e.target?.result as string;
				recipe.images[index] = file.name; // In real implementation, this would be the URL from your server
			};
			reader.readAsDataURL(file);
		}
	}

	function removeImage(index: number) {
		imgPreviewUrls[index] = '';
		recipe.images[index] = '';
	}

	// Form submission
	async function handleSubmit() {
		if (!validateForm()) {
			// Scroll to the first error
			const firstErrorKey = Object.keys(errors)[0];
			const element = document.querySelector(`[data-error="${firstErrorKey}"]`);
			element?.scrollIntoView({ behavior: 'smooth', block: 'center' });
			return;
		}

		isSubmitting = true;

		try {
			// In a real implementation, you would submit the form data to your API
			const response = await fetch('/api/recipes', {
				method: 'POST',
				body: JSON.stringify(recipe),
				headers: {
					'Content-Type': 'application/json'
				}
			});

			if (response.ok) {
				// Navigate to the new recipe
				const data = await response.json();
				goto(`/recipes/${data.slug}`);
			} else {
				// Handle errors from the API
				const errorData = await response.json();
				errors = errorData.errors || { form: 'Failed to save recipe' };
			}
		} catch (error) {
			console.error('Error saving recipe:', error);
			errors = { form: 'An unexpected error occurred' };
		} finally {
			isSubmitting = false;
		}
	}

	function handleCancel() {
		if (
			hasUnsavedChanges &&
			!confirm('You have unsaved changes. Are you sure you want to leave this page?')
		) {
			return;
		}

		goto('/');
	}

	onMount(() => {
		// If we want to load a draft or edit an existing recipe, we would do it here
		console.log('Recipe form mounted');

		// Set up confirmation before leaving the page
		const beforeUnloadHandler = (e: BeforeUnloadEvent) => {
			if (hasUnsavedChanges) {
				e.preventDefault();
				e.returnValue = '';
				return '';
			}
		};

		window.addEventListener('beforeunload', beforeUnloadHandler);

		return () => {
			window.removeEventListener('beforeunload', beforeUnloadHandler);
		};
	});
</script>

<svelte:head>
	<title>Create New Recipe | OwnChef</title>
</svelte:head>

<div class="recipe-form-container" class:dark={$theme === 'dark'}>
	<div class="form-header">
		<h1 class="form-title">Create New Recipe</h1>
		<p class="form-subtitle">Share your culinary masterpiece with the world</p>
	</div>

	{#if errors.form}
		<div class="form-error" role="alert">
			<AlertCircle size={18} class="error-icon" />
			<span>{errors.form}</span>
		</div>
	{/if}

	<div class="form-tabs">
		<button
			class="tab-button"
			class:active={activeTab === 'basic'}
			on:click={() => (activeTab = 'basic')}
		>
			Basic Info
		</button>
		<button
			class="tab-button"
			class:active={activeTab === 'ingredients'}
			on:click={() => (activeTab = 'ingredients')}
		>
			Ingredients
		</button>
		<button
			class="tab-button"
			class:active={activeTab === 'instructions'}
			on:click={() => (activeTab = 'instructions')}
		>
			Instructions
		</button>
		<button
			class="tab-button"
			class:active={activeTab === 'media'}
			on:click={() => (activeTab = 'media')}
		>
			Media
		</button>
		<button
			class="tab-button"
			class:active={activeTab === 'tips'}
			on:click={() => (activeTab = 'tips')}
		>
			Tips & Tags
		</button>
	</div>

	<form on:submit|preventDefault={handleSubmit} class="recipe-form">
		<!-- Basic Info Tab -->
		<div class="form-tab-content" class:active={activeTab === 'basic'}>
			<div class="form-section">
				<div class="form-group" data-error="title">
					<label for="title" class="form-label">Recipe Title*</label>
					<input
						type="text"
						id="title"
						class="form-input"
						class:error={errors.title}
						bind:value={recipe.title}
						placeholder="E.g., Classic Chocolate Chip Cookies"
					/>
					{#if errors.title}
						<span class="error-message">{errors.title}</span>
					{/if}
				</div>

				<div class="form-group" data-error="description">
					<label for="description" class="form-label">Description*</label>
					<textarea
						id="description"
						class="form-textarea"
						class:error={errors.description}
						bind:value={recipe.description}
						placeholder="Briefly describe your recipe in 2-3 sentences"
						rows="3"
					></textarea>
					{#if errors.description}
						<span class="error-message">{errors.description}</span>
					{/if}
				</div>

				<div class="form-row">
					<div class="form-group" data-error="prepTime">
						<label for="prepTime" class="form-label">Prep Time (mins)*</label>
						<input
							type="number"
							id="prepTime"
							class="form-input"
							class:error={errors.prepTime}
							bind:value={recipe.prepTime}
							min="1"
						/>
						{#if errors.prepTime}
							<span class="error-message">{errors.prepTime}</span>
						{/if}
					</div>

					<div class="form-group" data-error="cookTime">
						<label for="cookTime" class="form-label">Cook Time (mins)*</label>
						<input
							type="number"
							id="cookTime"
							class="form-input"
							class:error={errors.cookTime}
							bind:value={recipe.cookTime}
							min="0"
						/>
						{#if errors.cookTime}
							<span class="error-message">{errors.cookTime}</span>
						{/if}
					</div>

					<div class="form-group" data-error="servings">
						<label for="servings" class="form-label">Servings*</label>
						<input
							type="number"
							id="servings"
							class="form-input"
							class:error={errors.servings}
							bind:value={recipe.servings}
							min="1"
						/>
						{#if errors.servings}
							<span class="error-message">{errors.servings}</span>
						{/if}
					</div>
				</div>

				<div class="form-row">
					<div class="form-group" data-error="difficulty">
						<label for="difficulty" class="form-label">Difficulty*</label>
						<select
							id="difficulty"
							class="form-select"
							class:error={errors.difficulty}
							bind:value={recipe.difficulty}
						>
							{#each difficultyOptions as option}
								<option value={option}>{option}</option>
							{/each}
						</select>
						{#if errors.difficulty}
							<span class="error-message">{errors.difficulty}</span>
						{/if}
					</div>

					<div class="form-group" data-error="cuisine">
						<label for="cuisine" class="form-label">Cuisine*</label>
						<select
							id="cuisine"
							class="form-select"
							class:error={errors.cuisine}
							bind:value={recipe.cuisine}
						>
							<option value="">Select Cuisine</option>
							{#each cuisineOptions as option}
								<option value={option}>{option}</option>
							{/each}
						</select>
						{#if errors.cuisine}
							<span class="error-message">{errors.cuisine}</span>
						{/if}
					</div>

					<div class="form-group" data-error="category">
						<label for="category" class="form-label">Category*</label>
						<select
							id="category"
							class="form-select"
							class:error={errors.category}
							bind:value={recipe.category}
						>
							<option value="">Select Category</option>
							{#each categoryOptions as option}
								<option value={option}>{option}</option>
							{/each}
						</select>
						{#if errors.category}
							<span class="error-message">{errors.category}</span>
						{/if}
					</div>
				</div>
			</div>

			<div class="form-nav">
				<button type="button" class="form-button secondary" on:click={handleCancel}>
					Cancel
				</button>
				<button
					type="button"
					class="form-button primary"
					on:click={() => (activeTab = 'ingredients')}
				>
					Next: Ingredients
				</button>
			</div>
		</div>

		<!-- Ingredients Tab -->
		<div class="form-tab-content" class:active={activeTab === 'ingredients'}>
			<div class="form-section">
				<div class="form-group-header">
					<h2 class="form-section-title">
						<ShoppingBasket size={20} class="section-icon" />
						Ingredients
					</h2>
					<p class="form-section-help">
						List all ingredients needed for your recipe, with measurements
					</p>
				</div>

				{#if errors.ingredients}
					<div class="section-error" role="alert">
						<AlertCircle size={18} class="error-icon" />
						<span>{errors.ingredients}</span>
					</div>
				{/if}

				{#each recipe.ingredients as group, groupIndex}
					<div class="ingredient-group" data-error="ingredients">
						<div class="group-header">
							<div class="form-group">
								<label for={`group-${groupIndex}`} class="form-label">Group Name (optional)</label>
								<input
									type="text"
									id={`group-${groupIndex}`}
									class="form-input"
									bind:value={group.group}
									placeholder="E.g., For the marinade, For the sauce, etc."
								/>
							</div>

							{#if recipe.ingredients.length > 1}
								<button
									type="button"
									class="remove-button"
									on:click={() => removeIngredientGroup(groupIndex)}
									aria-label="Remove ingredient group"
								>
									<X size={18} />
								</button>
							{/if}
						</div>

						<div class="ingredients-list">
							{#each group.items as item, itemIndex}
								<div class="ingredient-item">
									<input
										type="text"
										class="form-input"
										bind:value={group.items[itemIndex]}
										placeholder="E.g., 2 cups all-purpose flour"
									/>

									<button
										type="button"
										class="remove-button"
										on:click={() => removeIngredientItem(groupIndex, itemIndex)}
										aria-label="Remove ingredient"
										disabled={group.items.length === 1}
									>
										<X size={18} />
									</button>
								</div>
							{/each}

							<button
								type="button"
								class="add-button"
								on:click={() => addIngredientItem(groupIndex)}
							>
								<Plus size={16} />
								Add Ingredient
							</button>
						</div>
					</div>
				{/each}

				<button type="button" class="add-group-button" on:click={addIngredientGroup}>
					<Plus size={16} />
					Add Ingredient Group
				</button>
			</div>

			<div class="form-nav">
				<button type="button" class="form-button secondary" on:click={() => (activeTab = 'basic')}>
					Previous: Basic Info
				</button>
				<button
					type="button"
					class="form-button primary"
					on:click={() => (activeTab = 'instructions')}
				>
					Next: Instructions
				</button>
			</div>
		</div>

		<!-- Instructions Tab -->
		<div class="form-tab-content" class:active={activeTab === 'instructions'}>
			<div class="form-section">
				<div class="form-group-header">
					<h2 class="form-section-title">
						<ListOrdered size={20} class="section-icon" />
						Instructions
					</h2>
					<p class="form-section-help">
						Provide step-by-step instructions for preparing your recipe
					</p>
				</div>

				{#if errors.steps}
					<div class="section-error" role="alert">
						<AlertCircle size={18} class="error-icon" />
						<span>{errors.steps}</span>
					</div>
				{/if}

				{#each recipe.steps as step, index}
					<div class="instruction-step" data-error="steps">
						<div class="step-header">
							<div class="step-number">{index + 1}</div>
							<div class="form-group step-title-group">
								<label for={`step-title-${index}`} class="form-label">Step Title (optional)</label>
								<input
									type="text"
									id={`step-title-${index}`}
									class="form-input"
									bind:value={step.title}
									placeholder="E.g., Prepare the dough, Marinate the chicken, etc."
								/>
							</div>

							{#if recipe.steps.length > 1}
								<button
									type="button"
									class="remove-button"
									on:click={() => removeStep(index)}
									aria-label="Remove step"
								>
									<X size={18} />
								</button>
							{/if}
						</div>

						<div class="form-group">
							<label for={`step-content-${index}`} class="form-label">Step Instructions*</label>
							<textarea
								id={`step-content-${index}`}
								class="form-textarea"
								bind:value={step.content}
								placeholder="Describe this step in detail"
								rows="3"
							></textarea>
						</div>
					</div>
				{/each}

				<button type="button" class="add-button" on:click={addStep}>
					<Plus size={16} />
					Add Step
				</button>
			</div>

			<div class="form-nav">
				<button
					type="button"
					class="form-button secondary"
					on:click={() => (activeTab = 'ingredients')}
				>
					Previous: Ingredients
				</button>
				<button type="button" class="form-button primary" on:click={() => (activeTab = 'media')}>
					Next: Media
				</button>
			</div>
		</div>

		<!-- Media Tab -->
		<div class="form-tab-content" class:active={activeTab === 'media'}>
			<div class="form-section">
				<div class="form-group-header">
					<h2 class="form-section-title">
						<ImageIcon size={20} class="section-icon" />
						Recipe Images
					</h2>
					<p class="form-section-help">Upload high-quality images of your finished dish</p>
				</div>

				<div class="images-grid">
					{#each recipe.images as _, index}
						<div class="image-upload-container">
							{#if imgPreviewUrls[index]}
								<div class="image-preview">
									<img src={imgPreviewUrls[index]} alt="Recipe preview" />
									<button
										type="button"
										class="remove-image-button"
										on:click={() => removeImage(index)}
										aria-label="Remove image"
									>
										<X size={18} />
									</button>
								</div>
							{:else}
								<label for={`image-upload-${index}`} class="image-upload-label">
									<div class="upload-placeholder">
										<ImageIcon size={24} class="placeholder-icon" />
										<span>Upload Image</span>
										<span class="upload-hint">Click to browse</span>
									</div>
									<input
										type="file"
										id={`image-upload-${index}`}
										class="image-upload-input"
										accept="image/*"
										on:change={(e) => handleImageUpload(e, index)}
									/>
								</label>
							{/if}
						</div>
					{/each}
				</div>

				<div class="form-group">
					<label class="form-label">Video URL (optional)</label>
					<div class="input-with-icon">
						<Video size={18} class="input-icon" />
						<input
							type="url"
							class="with-icon form-input"
							placeholder="E.g., https://youtube.com/watch?v=..."
						/>
					</div>
					<p class="input-help">You can link to YouTube, Vimeo, or other video platforms</p>
				</div>

				<div class="form-group">
					<label class="form-label">External Source URL (optional)</label>
					<div class="input-with-icon">
						<Link size={18} class="input-icon" />
						<input
							type="url"
							class="with-icon form-input"
							placeholder="E.g., https://myrecipeblog.com/pasta-recipe"
						/>
					</div>
					<p class="input-help">
						If this recipe is from another source, please provide credit by linking to it
					</p>
				</div>
			</div>

			<div class="form-nav">
				<button
					type="button"
					class="form-button secondary"
					on:click={() => (activeTab = 'instructions')}
				>
					Previous: Instructions
				</button>
				<button type="button" class="form-button primary" on:click={() => (activeTab = 'tips')}>
					Next: Tips & Tags
				</button>
			</div>
		</div>

		<!-- Tips & Tags Tab -->
		<div class="form-tab-content" class:active={activeTab === 'tips'}>
			<div class="form-section">
				<div class="form-group-header">
					<h2 class="form-section-title">
						<Info size={20} class="section-icon" />
						Tips for Success
					</h2>
					<p class="form-section-help">
						Share tips, variations, or helpful advice for making this recipe
					</p>
				</div>

				{#each recipe.tips as tip, index}
					<div class="tip-item">
						<div class="form-group">
							<label for={`tip-${index}`} class="form-label">Tip {index + 1}</label>
							<textarea
								id={`tip-${index}`}
								class="form-textarea"
								bind:value={recipe.tips[index]}
								placeholder="E.g., For a crispier crust, preheat the baking sheet"
								rows="2"
							></textarea>
						</div>

						{#if recipe.tips.length > 1}
							<button
								type="button"
								class="remove-button"
								on:click={() => removeTip(index)}
								aria-label="Remove tip"
							>
								<X size={18} />
							</button>
						{/if}
					</div>
				{/each}

				<button type="button" class="add-button" on:click={addTip}>
					<Plus size={16} />
					Add Tip
				</button>

				<div class="form-divider"></div>

				<div class="form-group-header">
					<h2 class="form-section-title">
						<Tag size={20} class="section-icon" />
						Recipe Tags
					</h2>
					<p class="form-section-help">Add tags to help others discover your recipe</p>
				</div>

				<div class="tags-container">
					{#each recipe.tags as tag, index}
						<div class="tag-item">
							<input
								type="text"
								class="tag-input form-input"
								bind:value={recipe.tags[index]}
								placeholder="E.g., vegetarian, gluten-free, dessert, etc."
							/>

							{#if recipe.tags.length > 1}
								<button
									type="button"
									class="remove-button"
									on:click={() => removeTag(index)}
									aria-label="Remove tag"
								>
									<X size={18} />
								</button>
							{/if}
						</div>
					{/each}
				</div>

				<button type="button" class="add-button" on:click={addTag}>
					<Plus size={16} />
					Add Tag
				</button>
			</div>

			<div class="form-nav">
				<button type="button" class="form-button secondary" on:click={() => (activeTab = 'media')}>
					Previous: Media
				</button>
				<button type="submit" class="form-button submit" disabled={isSubmitting}>
					{isSubmitting ? 'Publishing...' : 'Publish Recipe'}
				</button>
			</div>
		</div>
	</form>
</div>

<style lang="postcss">
	.recipe-form-container {
		@apply mx-auto max-w-3xl px-4 pb-16 pt-8;
	}

	.form-header {
		@apply mb-8 text-center;
	}

	.form-title {
		@apply mb-2 text-3xl font-bold text-gray-900 dark:text-white;
	}

	.form-subtitle {
		@apply text-gray-600 dark:text-gray-400;
	}

	.form-error {
		@apply mb-6 flex items-center gap-2 rounded-lg bg-red-50 p-4 text-red-600 dark:bg-red-900/20 dark:text-red-400;
	}

	.error-icon {
		@apply flex-shrink-0;
	}

	.form-tabs {
		@apply mb-6 flex flex-wrap rounded-lg bg-gray-100 p-1 dark:bg-gray-800;
	}

	.tab-button {
		@apply flex-1 rounded-md px-4 py-2 text-sm font-medium transition-all;
		@apply text-gray-600 hover:bg-white hover:text-gray-900;
		@apply dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white;
	}

	.tab-button.active {
		@apply bg-white text-gray-900 shadow-sm;
		@apply dark:bg-gray-700 dark:text-white;
	}

	.form-tab-content {
		@apply hidden;
	}

	.form-tab-content.active {
		@apply block;
	}

	.form-section {
		@apply mb-8 rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800;
	}

	.form-group {
		@apply mb-4;
	}

	.form-group-header {
		@apply mb-4;
	}

	.form-section-title {
		@apply mb-1 flex items-center gap-2 text-xl font-semibold text-gray-900 dark:text-white;
	}

	.section-icon {
		@apply text-orange-500;
	}

	.form-section-help {
		@apply text-sm text-gray-500 dark:text-gray-400;
	}

	.form-label {
		@apply mb-1 block text-sm font-medium text-gray-700 dark:text-gray-300;
	}

	.form-input,
	.form-textarea,
	.form-select {
		@apply w-full rounded-lg border border-gray-300 px-4 py-2 text-gray-700;
		@apply focus:border-orange-500 focus:outline-none focus:ring-2 focus:ring-orange-500/20;
		@apply dark:border-gray-600 dark:bg-gray-700 dark:text-white;
	}

	.form-input.with-icon {
		@apply pl-10;
	}

	.form-input.error,
	.form-textarea.error,
	.form-select.error {
		@apply border-red-500 bg-red-50 dark:border-red-500 dark:bg-red-900/20;
	}

	.input-with-icon {
		@apply relative;
	}

	.input-icon {
		@apply absolute left-3 top-1/2 -translate-y-1/2 text-gray-400;
	}

	.input-help {
		@apply mt-1 text-xs text-gray-500 dark:text-gray-400;
	}

	.error-message {
		@apply mt-1 text-sm text-red-500 dark:text-red-400;
	}

	.section-error {
		@apply mb-4 flex items-center gap-2 rounded-lg bg-red-50 p-3 text-sm text-red-600 dark:bg-red-900/20 dark:text-red-400;
	}

	.form-row {
		@apply mb-4 grid gap-4 sm:grid-cols-3;
	}

	.form-nav {
		@apply mt-8 flex justify-between;
	}

	.form-button {
		@apply rounded-lg px-6 py-2 text-sm font-medium transition-all;
	}

	.form-button.primary {
		@apply bg-gray-100 text-gray-900 hover:bg-gray-200;
		@apply dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600;
	}

	.form-button.secondary {
		@apply text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800;
	}

	.form-button.submit {
		@apply bg-gradient-to-r from-orange-500 to-red-500 text-white;
		@apply hover:shadow-lg hover:shadow-orange-500/20;
		@apply disabled:opacity-70;
	}

	/* Ingredient Styles */
	.ingredient-group {
		@apply mb-6 rounded-lg border border-gray-200 p-4 dark:border-gray-700;
	}

	.group-header {
		@apply mb-4 flex gap-4;
	}

	.ingredients-list {
		@apply space-y-2;
	}

	.ingredient-item {
		@apply flex items-center gap-2;
	}

	.remove-button {
		@apply flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full text-gray-500 transition-colors;
		@apply hover:bg-gray-100 hover:text-red-500;
		@apply dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-red-400;
		@apply disabled:cursor-not-allowed disabled:opacity-50;
	}

	.add-button {
		@apply mt-2 flex items-center gap-2 rounded-lg px-4 py-2 text-sm font-medium text-gray-600 transition-colors;
		@apply hover:bg-gray-100 hover:text-gray-900;
		@apply dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white;
	}

	.add-group-button {
		@apply flex w-full items-center justify-center gap-2 rounded-lg border border-dashed border-gray-300 px-4 py-3 text-sm;
		@apply text-gray-600 transition-colors hover:border-orange-500 hover:text-orange-500;
		@apply dark:border-gray-600 dark:text-gray-400 dark:hover:border-orange-500 dark:hover:text-orange-500;
	}

	/* Instructions Styles */
	.instruction-step {
		@apply mb-6 rounded-lg border border-gray-200 p-4 dark:border-gray-700;
	}

	.step-header {
		@apply mb-4 flex items-start gap-4;
	}

	.step-number {
		@apply flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full bg-orange-500 font-semibold text-white;
	}

	.step-title-group {
		@apply flex-1;
	}

	/* Media Styles */
	.images-grid {
		@apply mb-6 grid gap-4 sm:grid-cols-3;
	}

	.image-upload-container {
		@apply aspect-square overflow-hidden rounded-lg border border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-700;
	}

	.image-upload-label {
		@apply flex h-full w-full cursor-pointer items-center justify-center;
	}

	.upload-placeholder {
		@apply flex flex-col items-center justify-center text-center text-gray-500 dark:text-gray-400;
	}

	.placeholder-icon {
		@apply mb-2;
	}

	.upload-hint {
		@apply mt-1 text-xs text-gray-400 dark:text-gray-500;
	}

	.image-upload-input {
		@apply hidden;
	}

	.image-preview {
		@apply relative h-full;
	}

	.image-preview img {
		@apply h-full w-full object-cover;
	}

	.remove-image-button {
		@apply absolute right-2 top-2 flex h-8 w-8 items-center justify-center rounded-full bg-black/50 text-white backdrop-blur-sm transition-colors hover:bg-black/70;
	}

	/* Tips Styles */
	.tip-item {
		@apply mb-4 flex items-start gap-2;
	}

	.form-divider {
		@apply my-8 border-t border-gray-200 dark:border-gray-700;
	}

	/* Tags Styles */
	.tags-container {
		@apply mb-4 space-y-2;
	}

	.tag-item {
		@apply flex items-center gap-2;
	}
</style>



============================================================
File: ./static/test-auth.html
Type: .html
============================================================

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Simple Auth Test</title>
        <style>
        body { 
            font-family: Arial, sans-serif; 
            max-width: 500px; 
            margin: 50px auto; 
            padding: 20px; 
        }
        .box { 
            border: 1px solid #ddd; 
            padding: 20px; 
            margin: 20px 0; 
            border-radius: 8px; 
        }
        input { 
            width: 100%; 
            padding: 10px; 
            margin: 5px 0; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
            box-sizing: border-box;
        }
        button { 
            width: 100%; 
            padding: 12px; 
            margin: 10px 0; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 16px;
        }
        .register { background: #28a745; color: white; }
        .login { background: #007bff; color: white; }
        .test { background: #6c757d; color: white; }
        .logout { background: #dc3545; color: white; }
        
        .result { 
            background: #f8f9fa; 
            padding: 15px; 
            margin: 20px 0; 
            border-radius: 4px; 
            white-space: pre-wrap; 
            font-family: monospace; 
            border-left: 4px solid #007bff;
        }
        .error { border-left-color: #dc3545; background: #f8d7da; }
        .success { border-left-color: #28a745; background: #d4edda; }
    </style>
    </head>
    <body>
        <h1>üîê Simple Auth Test</h1>

        <div class="box">
            <h3>üìù Register New User</h3>
            <input type="text" id="regUser" placeholder="Username (testuser123)"
                value="testuser123">
            <input type="password" id="regPass"
                placeholder="Password (password123)" value="password123">
            <button class="register" onclick="register()">Register
                (POST)</button>
        </div>

        <div class="box">
            <h3>üîë Login</h3>
            <input type="text" id="loginUser" placeholder="Username"
                value="testuser123">
            <input type="password" id="loginPass" placeholder="Password"
                value="password123">
            <button class="login" onclick="login()">Login (PUT)</button>
        </div>

        <div class="box">
            <h3>üß™ Test Actions</h3>
            <button class="test" onclick="getCurrentUser()">Get Current User
                (GET)</button>
            <button class="test" onclick="testRecipes()">Test Recipes
                API</button>
            <button class="logout" onclick="logout()">Logout (DELETE)</button>
        </div>

        <div id="result" class="result" style="display: none;"></div>

        <script>
        const resultDiv = document.getElementById('result');

        function showResult(data, isError = false) {
            resultDiv.style.display = 'block';
            resultDiv.className = `result ${isError ? 'error' : 'success'}`;
            resultDiv.textContent = JSON.stringify(data, null, 2);
        }

        // Register function
        async function register() {
            const username = document.getElementById('regUser').value;
            const password = document.getElementById('regPass').value;
            
            try {
                console.log('Registering with POST...');
                const response = await fetch('/api/auth', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                const data = await response.json();
                console.log('Register response:', data);
                showResult(data, !response.ok);
            } catch (error) {
                console.error('Register error:', error);
                showResult({ error: error.message }, true);
            }
        }

        // Login function  
        async function login() {
            const username = document.getElementById('loginUser').value;
            const password = document.getElementById('loginPass').value;
            
            try {
                console.log('Logging in with PUT...');
                const response = await fetch('/api/auth', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ username, password })
                });
                const data = await response.json();
                console.log('Login response:', data);
                showResult(data, !response.ok);
            } catch (error) {
                console.error('Login error:', error);
                showResult({ error: error.message }, true);
            }
        }

        // Get current user
        async function getCurrentUser() {
            try {
                console.log('Getting current user with GET...');
                const response = await fetch('/api/auth');
                const data = await response.json();
                console.log('Get user response:', data);
                showResult(data, !response.ok);
            } catch (error) {
                console.error('Get user error:', error);
                showResult({ error: error.message }, true);
            }
        }

        // Test recipes API
        async function testRecipes() {
            try {
                console.log('Testing recipes API...');
                const response = await fetch('/api/recipes');
                const data = await response.json();
                console.log('Recipes response:', data);
                showResult(data, !response.ok);
            } catch (error) {
                console.error('Recipes error:', error);
                showResult({ error: error.message }, true);
            }
        }

        // Logout
        async function logout() {
            try {
                console.log('Logging out with DELETE...');
                const response = await fetch('/api/auth', { method: 'DELETE' });
                const data = await response.json();
                console.log('Logout response:', data);
                showResult(data, !response.ok);
            } catch (error) {
                console.error('Logout error:', error);
                showResult({ error: error.message }, true);
            }
        }
    </script>
    </body>
</html>


============================================================
File: ./svelte.config.js
Type: .js
============================================================

import adapter from '@sveltejs/adapter-auto';
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	// Consult https://svelte.dev/docs/kit/integrations
	// for more information about preprocessors
	preprocess: vitePreprocess(),

	kit: {
		// adapter-auto only supports some environments, see https://svelte.dev/docs/kit/adapter-auto for a list.
		// If your environment is not supported, or you settled on a specific environment, switch out the adapter.
		// See https://svelte.dev/docs/kit/adapters for more information about adapters.
		adapter: adapter()
	}
};

export default config;



============================================================
File: ./tailwind.config.ts
Type: .ts
============================================================

import forms from '@tailwindcss/forms';
import typography from '@tailwindcss/typography';
import type { Config } from 'tailwindcss';

export default {
	content: ['./src/**/*.{html,js,svelte,ts}'],

	theme: {
		extend: {}
	},

	plugins: [typography, forms]
} satisfies Config;



============================================================
File: ./tsconfig.json
Type: .json
============================================================

{
	"extends": "./.svelte-kit/tsconfig.json",
	"compilerOptions": {
		"allowJs": true,
		"checkJs": true,
		"esModuleInterop": true,
		"forceConsistentCasingInFileNames": true,
		"resolveJsonModule": true,
		"skipLibCheck": true,
		"sourceMap": true,
		"strict": true,
		"moduleResolution": "bundler",
		"types": [
			"node"
		],
		"paths": {
			"$lib/*": [
				"./src/lib/*"
			],
			"$components/*": [
				"./src/components/*"
			]
		}
	}
}


============================================================
File: ./vite.config.ts
Type: .ts
============================================================

import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';
import * as path from 'path';

export default defineConfig({
	plugins: [sveltekit()],
	resolve: {
		alias: [
			{ find: '$components', replacement: path.resolve('src/components') },
			{ find: '$lib', replacement: path.resolve('src/lib') }
		]
	}
});


